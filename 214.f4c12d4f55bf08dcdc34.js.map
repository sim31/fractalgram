{"version":3,"file":"214.f4c12d4f55bf08dcdc34.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e4;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications,\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n","export default \"**Telegram Web Z was updated to version alpha 1.18**\\n\\n👏 **Harder**\\n· Support for downloading all media types (via context menu).\\n· Support for downloading media from multiple selected messages.\\n· Group Management: Users can now be removed via the Member List and the Permissions screen.\\n· Privacy and Security: Tap the `+` button in Privacy and Security > Blocked Users to add additional users to the list.\\n· These fancy new changelogs.\\n\\n🤩 **Better**\\n· Message: Video Mesages and GIFs are now larger in chat.\\n· Sticker and GIF Search: Your cursor automatically moves to the panel when you open it.\\n\\n🚀 **Faster**\\n· Optimized, more efficient animations.\\n\\n💪 **Stronger**\\n· Notifications: Fixed missing sounds.\\n· Left Column: Fixed default width for smaller screens.\\n· Media Viewer: Fixed pinch-to-zoom for iOS users.\\n· Audio: Fixed the download button for RTL language users.\\n· Messages: Self-destructing videos must now be opened in the Telegram App for iOS or Android.\\n· Various other layout improvements.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { getDispatch } from '../lib/teact/teactn';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n  } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const { domain, post, comment } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n          messageId: Number(post),\n          commentId: Number(comment),\n        });\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: -Number(channel),\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS, RE_TG_LINK, RE_TME_ADDSTICKERS_LINK, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst CHATS_PRELOAD_INTERVAL = 300;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), CHATS_PRELOAD_INTERVAL, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('preloadArchivedChats', () => {\n  (async () => {\n    while (!getGlobal().chats.isFullyLoaded.archived) {\n      const currentGlobal = getGlobal();\n      const listIds = currentGlobal.chats.listIds.archived;\n      const oldestChat = listIds\n        ? listIds\n          .map((id) => currentGlobal.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(currentGlobal, chat.id))\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats('archived', oldestChat?.id, oldestChat?.lastMessage!.date);\n      await pause(CHATS_PRELOAD_INTERVAL);\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId }: { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId }: { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const stickersMatch = RE_TME_ADDSTICKERS_LINK.exec(url);\n  if (stickersMatch) {\n    actions.openStickerSetShortName({\n      stickerSetShortName: stickersMatch[1],\n    });\n  } else if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n  } else {\n    let match = RE_TME_INVITE_LINK.exec(url);\n\n    if (match) {\n      const hash = match[1];\n\n      actions.openChatByInvite({ hash });\n    } else {\n      match = RE_TME_LINK.exec(url)!;\n\n      const username = match[1];\n      const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n      const messageId = match[3] ? Number(match[3]) : undefined;\n      const commentId = match[4] === 'comment' && match[5] ? Number(match[5]) : undefined;\n\n      // Open message in private group\n      if (username === 'c' && chatOrChannelPostId && messageId) {\n        actions.focusMessage({\n          chatId: -chatOrChannelPostId,\n          messageId,\n        });\n      } else {\n        actions.openChatByUsername({\n          username,\n          messageId: messageId || chatOrChannelPostId,\n          commentId,\n        });\n      }\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username, messageId, commentId } = payload!;\n\n  (async () => {\n    const chat = selectCurrentChat(global);\n\n    if (!commentId) {\n      if (chat && chat.username === username) {\n        actions.focusMessage({ chatId: chat.id, messageId });\n        return;\n      }\n      await openChatByUsername(actions, username, messageId);\n      return;\n    }\n\n    const { chatId, type } = selectCurrentMessageList(global) || {};\n    const usernameChat = selectChatByUsername(global, username);\n    if (chatId && usernameChat && type === 'thread') {\n      const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n      if (threadInfo && threadInfo.chatId === chatId) {\n        actions.focusMessage({\n          chatId: threadInfo.chatId,\n          threadId: threadInfo.threadId,\n          messageId: commentId,\n        });\n        return;\n      }\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: global.chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: number | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return undefined;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_ADDSTICKERS_LINK, RE_TME_INVITE_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)\n        || button.value.match(RE_TME_ADDSTICKERS_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId));\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string, replyingTo?: number) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n  selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError' | 'setLeftColumnWidth' | 'resetLeftColumnWidth'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n  setLeftColumnWidth,\n  resetLeftColumnWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError', 'setLeftColumnWidth', 'resetLeftColumnWidth',\n  ]),\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat?.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = getCoverSize(audio, voice, media);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, origin = AudioOrigin.Inline, className, noUi, sender, focusMessage, closeAudioPlayer, chat,\n}) => {\n  const lang = useLang();\n  const { audio, voice } = getMessageContent(message);\n  const isVoice = Boolean(voice);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n  const { playPause, stop, isPlaying } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    origin,\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n\n    return {\n      sender,\n      chat,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={renderingPinnedMessagesCount || 0}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n    noAutoFreeze: true,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(shouldAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(shouldAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo, phoneCodeList,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { selectActiveDownloadIds, selectTheme } from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint'>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !isRepliesChat && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup) && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport { AudioOrigin, IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: number,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Inline });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isActive: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isActive,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isActive,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isActive: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isActive) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers?.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  isActive: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isActive,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds && messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && document.getElementById(anchorIdRef.current);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isActive={isActive}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n  botCommands?: ApiBotCommand[] | false;\n  chatBotCommands?: ApiBotCommand[];\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' |\n  'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  openChat,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={!attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: cleanHtml });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode' |\n  'closePaymentModal' | 'clearReceipt'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n  closePaymentModal,\n  clearReceipt,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {(isActive) => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    isActive={isActive}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={isMessagingDisabled || isSelectModeActive || isPinnedMessageList}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n    'closePaymentModal', 'clearReceipt',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID, ApiChat,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId, origin: AudioOrigin.SharedMedia });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      chatsById,\n      ...(hasMembersTab && members && { members }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelMessageMediaDownload'>;\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadsManager: FC<StateProps & DispatchProps> = ({\n  activeDownloads,\n  messages,\n  cancelMessageMediaDownload,\n}) => {\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory<ApiMediaFormat.BlobUrl>(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['cancelMessageMediaDownload']),\n)(DownloadsManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin, LangCode } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  audioOrigin?: AudioOrigin;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n  isServiceChatReady?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName' | 'loadCountryList' | 'checkVersionNotification'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  audioOrigin,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  loadCountryList,\n  openStickerSetShortName,\n  checkVersionNotification,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, loadCountryList, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} origin={audioOrigin} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <DownloadManager />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId, origin } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      audioOrigin: origin,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName', 'loadCountryList', 'checkVersionNotification',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","apiUpdate","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","processDeepLink","protocol","searchParams","pathname","URL","openChatByInvite","openChatByUsername","openStickerSetShortName","getDispatch","method","replace","params","value","key","domain","post","comment","username","commentId","channel","invite","set","stickerSetShortName","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","lastLocalServiceMessage","selectLastServiceNotification","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","fetchChatByUsername","localChat","selectChatByUsername","isMin","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","currentUserId","hasUnreadMark","toggleChatUnread","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","chatFullInfo","linkedChatId","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","currentGlobal","force","lastLocalMessage","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","concat","emoticon","recommendedId","description","newFolder","createChatFolder","apply","deleteChatFolder","unreadCount","stickersMatch","RE_TME_ADDSTICKERS_LINK","match","RE_TG_LINK","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","channelPostId","openPreviousChat","usernameChat","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","fullChat","isPreHistoryHidden","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runDebouncedForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","localMessages","allMessages","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","progressCallback","attachment","messageLocalId","has","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","minId","selectFirstUnreadId","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","realMessages","isServiceNotificationMessage","poll","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","contactIds","contactList","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","shouldSkipHistoryAnimations","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","width","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","disabled","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","AudioOrigin","noUi","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","useAudioPlayer","makeTrackId","getMediaDuration","handleClick","handleClose","clearMediaSession","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","ApiMediaFormat","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","usePauseOnInactive","useVideoCleanup","cancelMessageMediaDownload","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","Avatar","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","selectIsDownloading","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","noAutoFreeze","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","shouldSuggestStickers","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","createMessageHash","isMessagingDisabled","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","fullName","getUserFullName","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","audioOrigin","isHistoryCalendarOpen","isServiceChatReady","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","checkVersionNotification","LOCATION_HASH","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","IS_PWA","usePreventPinchZoomGesture","onDrop","onDragOver","DownloadManager","initApi"],"sourceRoot":""}