{"version":3,"file":"87.21c99c534903dd9259ca.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/hooks/useInterval.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version 1.29**\\n\\n👏 **Harder**\\n• Add admins in groups and channels.\\n• Use inline \\\"Request Contact\\\" button for bots.\\n• See inline search results in chats with bots that support it.\\n\\n🤩 **Better**\\n• Dialogs now have a closing animation.\\n• Messages with spoilers will be hidden in chat until full support is added.\\n• Various UI fixes.\\n\\n💪 **Stronger**\\n• Fixed missing user list when creating groups and channels.\\n• Fixed chat history being deleted when deleting a contact.\\n• Fixed missing text in messages containing specific emoji.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', () => {\n  void afterSync();\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync() {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n} from '../../selectors';\nimport { getMessageContent, isUserId, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            !!nextOffset || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: string;\n  globalSearchChatId?: string;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<string, ApiChat>;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  allListIds,\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, allListIds, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats'), id: ALL_FOLDER_ID },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isUserId,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<string, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && !!renderingPinnedMessage)\n          || (shouldRenderAudioPlayer && !!renderingAudioMessage)\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000, lang)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openUserInfo } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectIsMessageProtected,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n};\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = (\n    threadInfo && (!isInDocumentGroup || isLastInDocumentGroup) && messageListType === 'thread' && !noComments\n  );\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup) && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, openUserInfo, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const { loadViewportMessages, setScrollOffset, loadSponsoredMessages } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useLayoutEffect, useRef } from '../lib/teact/teact';\n\nfunction useInterval(callback: NoneToVoidFunction, delay?: number, noFirst = false) {\n  const savedCallback = useRef(callback);\n\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === undefined) {\n      return undefined;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n    if (!noFirst) savedCallback.current();\n\n    return () => clearInterval(id);\n  }, [delay, noFirst]);\n}\n\nexport default useInterval;\n","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport SendAsMenu from './SendAsMenu.async';\nimport Avatar from '../../common/Avatar';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    usersById?: Record<string, ApiUser>;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {!!sendAsIds?.length && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n    const { currentUserId } = global;\n    const sendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsUser = sendAsId ? usersById?.[sendAsId] : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? chatsById?.[sendAsId] : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      usersById,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    animationLevel, currentTransitionKey, prevTransitionKey, chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  animationLevel?: number,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (animationLevel !== ANIMATION_LEVEL_MIN) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: animationLevel !== ANIMATION_LEVEL_MIN ? handleOpenEnd : undefined,\n    handleSlideStop: animationLevel !== ANIMATION_LEVEL_MIN ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact,\n  isChatAdmin,\n  isChatChannel,\n  isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar, addContact,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    openUserInfo,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    openUserInfo,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory<ApiMediaFormat.BlobUrl>(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n  } = getDispatch();\n  const isSynced = Boolean(lastSyncTime);\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isSynced) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [isSynced, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","setsById","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","updateChatListSecondaryInfo","loadAndUpdateUsers","contactIds","contactList","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userId","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","targetChat","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","some","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","omit","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","allListIds","usersById","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","useThrottledMemo","folderTabs","ALL_FOLDER_ID","handleSwitchTab","forceOnHeavyAnimation","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","width","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","isAudioPlayerRendered","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","preventMessageInputBlur","onContextMenu","customText","isProtected","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","outgoingStatus","signature","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","replace","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","contains","safePlay","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","ApiMediaFormat","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","videoClassName","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","asForwarded","isLinkedChannelPost","isInDocumentGroup","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","stopEvent","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","SendAsMenu","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","sendMessageAction","useSendMessageAction","htmlRef","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","delay","noFirst","savedCallback","setInterval","clearInterval","useInterval","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","ANIMATION_LEVEL_MIN","propertyName","useIsReady","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageGroupAddAdmins","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","isSynced","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}