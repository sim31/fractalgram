{"version":3,"file":"608.2aa2a91f9f1e8e5b07c2.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/ui/RangeSlider.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'downloadMessageMedia' | 'cancelMessageMediaDownload'>;\n\nconst MediaViewerActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n}) => {\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloading ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n\n    return {\n      isDownloading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n  ]),\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setIsControlsVisible(false);\n      }\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n    if (!isControlsVisible) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    }\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif && !IS_TOUCH_ENV ? handleMouseOver : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl, loadProgress } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n\n        return true;\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaBlobUrl}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              loadProgress={loadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaBlobUrl || previewBlobUrl}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isChatPrivate } from '../../modules/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: number;\n  chatOrUserIds: number[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  onFilterChange: (filter: string) => void;\n  loadMore: NoneToVoidFunction;\n  onSelectChatOrUser: (chatOrUserId: number) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  onFilterChange,\n  onClose,\n  loadMore,\n  onSelectChatOrUser,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  useInputFocusOnOpen(filterRef, isOpen, () => { onFilterChange(''); });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat, getChatTitle, sortChatIds } from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: number) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={chatIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreChats}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages' | 'downloadSelectedMessages'\n)>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n  downloadSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton('forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages)\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'exitMessageSelectMode', 'openForwardMenuForSelectedMessages', 'downloadSelectedMessages',\n  ]),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n  activeDownloads: Record<number, number[]>;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Search });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            disabled={!hasWebNotifications}\n            range={{\n              min: 0,\n              max: 10,\n            }}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick, unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  blockedIds: number[];\n  contactIds?: number[];\n  localContactIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery' | 'blockContact'>;\n\nconst BlockUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadContactList,\n  setUserSearchQuery,\n  blockContact,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactsId = useMemo(() => {\n    const availableContactsId = (contactIds || []).concat(localContactIds || []).filter((contactId) => {\n      return !blockedIds.includes(contactId) && contactId !== currentUserId;\n    });\n\n    return unique(availableContactsId).reduce((acc, contactId) => {\n      if (\n        !filter\n        || !usersById[contactId]\n        || searchWords(getUserFullName(usersById[contactId]) || '', filter)\n        || usersById[contactId]?.username.toLowerCase().includes(filter)\n      ) {\n        acc.push(contactId);\n      }\n\n      return acc;\n    }, [] as number[])\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: number) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactsId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadContactList', 'setUserSearchQuery', 'blockContact',\n  ]),\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n  unblockContact,\n}) => {\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChatFolder } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolders'>;\n\nconst ChatFolderModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n  editChatFolders,\n}) => {\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolders']),\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst getTouchY = (e: WheelEvent | TouchEvent) => ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null) {\n  scrollLockEl = el;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  isDownloading?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onDownload?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  isDownloading,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  useEffect(() => {\n    disableScrolling(withScroll ? menuRef.current : undefined);\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      menuStyle={menuStyle}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canDownload && (\n        <MenuItem icon=\"download\" onClick={onDownload}>\n          {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n        </MenuItem>\n      )}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n} from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  activeDownloads: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'downloadMessageMedia' | 'cancelMessageMediaDownload'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  activeDownloads,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${Math.abs(message.chatId)}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        isDownloading={isDownloading}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onDownload={handleDownloadClick}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload,\n      activeDownloads,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot' | 'openLinkedChat'\n)>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n  openLinkedChat,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n    'openLinkedChat',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../../hooks/useTransitionForMedia';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(mediaBlobUrl, 'slow');\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        {shouldRenderThumb && (\n          <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        )}\n        {shouldRenderFullMedia && (\n          <img src={mediaBlobUrl} className={`${transitionClassNames} full-media`} alt=\"\" />\n        )}\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={shouldRenderFullMedia ? mediaBlobUrl : (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={shouldRenderFullMedia ? transitionClassNames : undefined}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: number;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreMembers' | 'deleteChatMember'>;\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadMoreMembers,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMembers = (chat.fullInfo?.members || []).filter((member) => {\n      return !member.isAdmin && !member.isOwner && member.userId !== currentUserId;\n    });\n\n    return availableMembers.reduce((acc, member) => {\n      if (\n        !filter\n        || !usersById[member.userId]\n        || searchWords(getUserFullName(usersById[member.userId]) || '', filter)\n      ) {\n        acc.push(member.userId);\n      }\n\n      return acc;\n    }, [] as number[]);\n  }, [chat.fullInfo?.members, currentUserId, filter, usersById]);\n\n  const handleRemoveUser = useCallback((userId: number) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      currentUserId,\n    } = global;\n\n    return { usersById, currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreMembers', 'deleteChatMember']),\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getHasAdminRight, getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n  canDeleteMembers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return { chat, usersById, canDeleteMembers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.adminRights) || {});\n    setCustomTitle(((selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","size","chat","user","dir","renderText","formatMediaDateTime","date","memo","isDownloading","selectIsDownloading","mediaData","isVideo","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","undefined","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","loadedPercent","totalSize","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","disabled","step","value","type","onChange","Number","target","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","ANIMATION_DURATION","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","textParts","renderMessageText","hasFooter","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","top","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","excludedClosestSelector","onSwipe","SwipeDirection","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","onFilterChange","loadMore","onSelectChatOrUser","viewportIds","getMore","useInfiniteScroll","useInputFocusOnOpen","containerRef","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","setFilter","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","handleSelectUser","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","AudioOrigin","Audio","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","play","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","focus","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleStickerSetClick","stickerSets","installedDate","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","shouldRenderThumb","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","contactIds","userSearch","setUserSearchQuery","blockContact","filteredContactsId","availableContactsId","concat","contactId","acc","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","onCloseAnimationEnd","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","clientY","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","onkeydown","enableScrolling","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","menuRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","menuStyle","withScroll","useContextMenuPosition","Menu","selectActiveDownloadIds","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","some","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","abs","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","canStartBot","canRestartBot","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","openLinkedChat","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleLinkedChatClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}