{"version":3,"file":"192.dc58dac565956beab12d.js","mappings":"s0CAgNA,SAASA,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAchB,GAbAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EAEE,iBAAXX,EACTO,EAAIK,IAAMZ,EACDA,aAAkBa,iBAC3BN,EAAIK,IAAMZ,EAAOc,OAEjBP,EAAIK,IAAMZ,EAAOY,IAGnBV,EAAMa,YAAYR,GAEdN,IAAWe,EAAAA,GAAAA,eAAmCf,IAAWe,EAAAA,GAAAA,eAAkC,CAC7Fd,EAAMG,UAAUC,IAAI,eAChBL,IAAWe,EAAAA,GAAAA,gBACbd,EAAMG,UAAUC,IAAI,QAEtB,MAAMW,EAAcd,SAASe,cAC3BjB,IAAWe,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFf,EAAMa,YAAYE,EAAYE,WAAU,IAI5C,OAAOjB,EAoCT,SAASkB,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBpB,SAASe,cAA8B,6CAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,aAa/F,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,GAG/B,SAASI,EAASrC,EAA2BsC,GAC3C,IAAIC,EACAC,EAEJ,OAAQxC,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,2DAAyDE,EAAAA,EAAAA,IAAiBH,EAASZ,MACxGc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,6DACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,kEACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,qEACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,+CAA6CE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC5Fc,EAAgB,4DAGpB,MAAMpB,EAAYlB,SAASe,cAA2BsB,GAChDG,EAAWtB,GAAaA,EAAUuB,iBAAsDH,GAE9F,MAAO,CACLpB,UAAAA,EACAwB,QAASF,MAAAA,OAAF,EAAEA,EAAWA,EAASG,OAAS,IAI1C,SAASC,EAAW7C,EAAuBD,GACzC,OAAQA,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHd,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKU,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFd,EAAM8C,WAA2BX,MAAMY,UAAY,QACpD,MAEF,KAAKjC,EAAAA,GAAAA,mBACHd,EAAMG,UAAUC,IAAI,W,8DC3U1B,MAgKA,GAAe4C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAqC,IAA5B,QAAEb,GAA0B,EAInC,MAAO,CACLc,gBAJoBd,IAAUe,EAAAA,EAAAA,IAAoBF,EAAQb,GAK1DgB,aAJkBC,EAAAA,EAAAA,IAAyBJ,EAAQb,MAHrCY,EAhKkC,IAYhD,IAZiD,UACrDM,EADqD,QAErDC,EAFqD,SAGrDC,EAHqD,QAIrDpB,EAJqD,SAKrDqB,EALqD,SAMrDC,EANqD,cAOrDR,EAPqD,YAQrDE,EARqD,mBASrDO,EATqD,UAUrDC,EAVqD,aAWrDC,GACI,EACJ,MAAM,qBACJC,EADI,2BAEJC,IACEC,EAAAA,EAAAA,OAEIC,aAAcC,IAAqBC,EAAAA,EAAAA,GACzC/B,IAAWgC,EAAAA,EAAAA,IAAoBhC,EAAS,aACvCc,GAGGmB,GAAsBC,EAAAA,EAAAA,KAAY,KAClCpB,EACFa,EAA2B,CAAE3B,QAAAA,IAE7B0B,EAAqB,CAAE1B,QAAAA,MAExB,CAAC2B,EAA4BD,EAAsBZ,EAAed,IAE/DmC,GAAOC,EAAAA,EAAAA,KAEPC,GAA8DC,EAAAA,EAAAA,KAAQ,IACnE,QAAC,UAAEC,EAAF,OAAaC,GAAd,SACL,mBAACC,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNC,UAAWL,EAAS,cAAWM,EAC/BC,QAASR,EACTS,UAAU,gBAEV,wBAAGH,UAAU,iBAGhB,IAmCH,GAAII,EAAAA,GAAyB,CAC3B,GAAIjC,EACF,OAGF,OACE,0BAAK6B,UAAU,6BACb,mBAACK,EAAA,EAAD,CACEC,QAASd,EACTe,UAAU,UAER9B,GACA,mBAAC+B,EAAA,EAAD,CACEC,KAAK,UACLP,QAASvB,GAERW,EAAK,YAGThB,EACC,mBAACkC,EAAA,EAAD,CACEC,KAAMxC,EAAgB,QAAU,WAChCiC,QAASd,GAERnB,EAAiB,GAAEyC,KAAKb,MAAyB,IAAnBZ,qBAA4C,YAG7E,mBAACuB,EAAA,EAAD,CACEC,KAAK,WACLE,KAAMtC,EACNuC,SAAUpC,GAETc,EAAK,uBAIXrB,GAAiB,mBAAC4C,EAAA,EAAD,CAAiBC,SAAU7B,EAAkBa,KAAK,IAAIiB,SAAO,KAKrF,OACE,0BAAKf,UAAU,uBACXvB,IAAaN,GACb,sCACE,mBAACyB,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,oBACNI,UAAWb,EAAK,WAChBY,QAASvB,GAET,wBAAGqB,UAAU,mBArFvB,WACE,IAAI7B,EAIJ,OAAOG,EACL,mBAACsB,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,oBACNI,UAAWb,EAAK,qBAChBY,QAASd,GAERnB,EACC,mBAAC4C,EAAA,EAAD,CAAiBC,SAAU7B,EAAkBa,KAAK,IAAII,QAASd,IAE/D,wBAAGY,UAAU,mBAIjB,mBAACJ,EAAA,EAAD,CACEe,KAAMtC,EACNuC,SAAUpC,EACVqB,OAAK,EACLC,KAAK,UACLC,MAAM,oBACNI,UAAWb,EAAK,sBAEhB,wBAAGU,UAAU,mBA6DdgB,GACD,mBAACpB,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,oBACNI,UAAW5B,EAAW,WAAa,UACnC2B,QAAStB,GAET,wBAAGoB,UAAWzB,EAAW,gBAAkB,kBAE7C,mBAACqB,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,oBACNI,UAAWb,EAAK,SAChBY,QAASxB,GAET,wBAAGsB,UAAU,qB,+DCxLrB,MAyDA,EAhDwC,IAElC,IAFmC,KACvCiB,EAAO,GADgC,SAC5BC,EAD4B,WAClBC,EADkB,QACNjB,GAC7B,EACJ,MAAOkB,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IAC/CC,EAAAA,EAAAA,KAAU,KACR,MAAMC,EAAgBzG,SAASe,cAAc,kCAEvC2F,EAAmB,KACvB,MAAMC,EAASF,EAAgBA,EAAcG,aAAe,EAE5DN,EAAeK,EAAe,EAANE,EAAAA,KAI1BH,IAEA,MAAMI,GAAeC,EAAAA,EAAAA,IAASL,EAzBP,KAyB6C,GAIpE,OAFAM,OAAOC,iBAAiB,SAAUH,GAAc,GAEzC,KACLE,OAAOE,oBAAoB,SAAUJ,GAAc,MAEpD,IAQH,MAAMK,GAAaC,EAAAA,EAAAA,GACjB,oBACAhB,GAAc,eACdD,GAAY,aAGd,OACE,0BAAKlB,UAAWkC,EAAYhC,QAb9B,SAAmBkC,GACbnB,GACFmB,EAAEC,oBAYDpB,GACC,0BAAKjB,UAAU,8BAA8BE,QAAUE,EAAAA,QAAoCH,EAAVC,GAC/E,wBAAGF,UAAY,6BAA2BoB,EAAc,YAAc,IAAMkB,IAAI,QAAQrB,M,cClDlG,MAAMsB,OA+EsC,IAA/BxH,SAASyH,kBACX,yBAC2C,IAAlCzH,SAAS0H,qBAClB,4BAC8C,IAArC1H,SAAS2H,wBAClB,0BAGF,G,2CCjGT,MAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,MAQhD,EANwBC,IACtB,MAAMC,EAAmB,IAAVD,EAAc,EAAIlC,KAAKoC,MAAMpC,KAAKqC,IAAIH,GAASlC,KAAKqC,IAAI,OAEvE,MAAQ,IAAGH,EAAQ,MAAQlC,KAAKoC,MAAMD,IAASG,QAAQ,MAAML,EAAME,MC0B/DtH,EAAa6G,IACjBA,EAAEC,mBA2JJ,GAtJwC,IAclC,IAdmC,iBACvCY,EADuC,YAEvCC,EAFuC,SAGvCC,EAHuC,SAIvCC,EAJuC,qBAKvCC,EALuC,SAMvCC,EANuC,sBAOvCC,EAPuC,aAQvCC,EARuC,mBASvCC,EATuC,YAUvCC,EAVuC,UAWvCC,EAXuC,cAYvCC,EAZuC,OAavCC,GACI,EAEJ,MAAMC,GAAYC,EAAAA,EAAAA,IAAuB,MACnCC,GAAeD,EAAAA,EAAAA,KAAgB,GAC/BE,EAAYD,EAAaE,SAG/B3C,EAAAA,EAAAA,KAAU,KACR,IAAI4C,EACJ,GAAKR,GAAcL,IAAYW,EAO/B,OAHAE,EAAUpC,OAAOqC,YAAW,KAC1BR,GAAc,KA9Ba,MAgCtB,KACDO,GAASpC,OAAOsC,aAAaF,IAP7BA,GAASpC,OAAOsC,aAAaF,KASlC,CAACb,EAAUK,EAAWM,EAAWL,KAEpCrC,EAAAA,EAAAA,KAAU,KACJoC,EACF5I,SAASuJ,KAAKrJ,UAAUC,IAAI,0BAE5BH,SAASuJ,KAAKrJ,UAAUsJ,OAAO,0BAE1B,KACLxJ,SAASuJ,KAAKrJ,UAAUsJ,OAAO,6BAEhC,CAACZ,IAEJ,MAAMrE,GAAOC,EAAAA,EAAAA,KAEPiF,GAAanF,EAAAA,EAAAA,KAAa+C,IAC9B,GAAI4B,EAAaE,SAAWJ,EAAUI,QAAS,CAC7C,MAAM,MACJO,EADI,KAEJC,GACEZ,EAAUI,QAAQS,wBAChBC,EAAUxC,aAAayC,WAAazC,EAAEwC,QAAUxC,EAAE0C,cAAc,GAAGF,QACzEf,EAAOnD,KAAKqE,IAAIrE,KAAKsE,IAAI7B,IAAayB,EAAUF,GAAQD,GAAQtB,GAAW,OAE5E,CAACA,EAAUU,IAERoB,GAAkB5F,EAAAA,EAAAA,KAAa+C,IACnC4B,EAAaE,SAAU,EACvBM,EAAWpC,KACV,CAACoC,IAEEU,GAAiB7F,EAAAA,EAAAA,KAAY,KACjC2E,EAAaE,SAAU,IACtB,IAaH,OAXA3C,EAAAA,EAAAA,KAAU,KACR,GAAKuC,EAAUI,SAAYP,EAC3B,OAAOwB,EAAAA,EAAAA,IAAcrB,EAAUI,QAAS,CACtCkB,UAAWH,EACXI,UAAWH,EACXhF,QAASgF,EACTI,OAAQd,MAET,CAACb,EAAWsB,EAAiBT,EAAYU,IAI1C,0BACElF,WAAWmC,EAAAA,EAAAA,GAAe,sBAAuBkB,GAAwB,SAAUM,GAAa,UAChGzD,QAAS3E,GA8Cf,SACE2H,EAAqBC,EAAkBF,EAA0Ba,GAEjE,MAAMyB,EAAoBrC,EAAcC,EAAY,IAC9CqC,EAAwC,IAAnBvC,EAE3B,OACE,0BAAKjD,UAAU,kBAAkByF,IAAK3B,GACpC,0BAAK9D,UAAU,yBACb,0BACEA,UAAU,2BACV/C,MAAQ,UAASuI,GAAsB,OAEzC,0BACExF,UAAU,yBACV/C,MAAQ,UAASsI,GAAoB,SA3DxCG,CAAexC,EAAaC,EAAUF,EAAkBa,GACzD,mBAAClE,EAAA,EAAD,CACEO,UAAWb,EAAK,iBAChBQ,KAAK,OACL6F,QAASvF,EAAAA,GACTL,MAAM,oBACNC,UAAU,OACVE,QAASwD,GAET,wBAAG1D,UAAWsD,EAAW,aAAe,eAmBhD,SAAoBJ,EAAqBC,GACvC,OACE,0BAAKnD,UAAU,eACX,IAAE4F,EAAAA,EAAAA,IAAoB1C,SAAkB0C,EAAAA,EAAAA,IAAoBzC,MApB7D0C,CAAW3C,EAAaC,GACxBF,EAAmB,IAwBF6C,EAxBsB7C,EAwBC8C,EAxBiB3C,EA0B5D,0BAAKpD,UAAU,oBACX,GAAEgG,EAAeD,EAAYD,QAAoBE,EAAeD,OA1BjExC,GACC,mBAAC3D,EAAA,EAAD,CACEO,UAAU,aACVL,KAAK,OACLC,MAAM,oBACNC,UAAU,aACVE,QAASuD,GAET,wBAAGzD,UAAcwD,EAAe,mBAAqB,sBAe/D,IAAwBsC,EAAuBC,G,mNC/H/C,MAsLA,IAAejI,EAAAA,EAAAA,KApLmB,IAY5B,IAZ6B,IACjCmI,EADiC,MAEjCC,EAFiC,WAGjCC,EAHiC,WAIjCC,EAJiC,aAKjCpH,EALiC,SAMjCoE,EANiC,kBAOjCiD,EAPiC,OAQjCC,EARiC,QASjCC,EATiC,eAUjCC,EAViC,mBAWjCC,GACI,EAEJ,MAAMC,GAAW3C,EAAAA,EAAAA,IAAyB,OACnCT,EAAUqD,IAAerF,EAAAA,EAAAA,KAAUsF,EAAAA,KAAiBC,EAAAA,KACpD3D,EAAa4D,IAAkBxF,EAAAA,EAAAA,IAAS,IAExCkC,EAAcuD,EAAeC,GHtCvB,SAA6BC,EAAgBN,GAC1D,MAAOnD,EAAc0D,IAAmB5F,EAAAA,EAAAA,IAAS6F,QAAQ5E,GAAQxH,SAASwH,KAoE1E,OA9BA6E,EAAAA,EAAAA,KAAgB,KACd,MAAMC,EAAW,KAAQH,EAAgBC,QAAQ5E,GAAQxH,SAASwH,MAC5D+E,EAAgB,KAAQJ,GAAgB,IACxCK,EAAe,KACnBL,GAAgB,GAChBP,GAAY,IAERa,EAAQP,EAAM/C,QAWpB,OATAnJ,SAASiH,iBAAiB,mBAAoBqF,GAAU,GACxDtM,SAASiH,iBAAiB,yBAA0BqF,GAAU,GAC9DtM,SAASiH,iBAAiB,sBAAuBqF,GAAU,GAEvDG,IACFA,EAAMxF,iBAAiB,wBAAyBsF,GAAe,GAC/DE,EAAMxF,iBAAiB,sBAAuBuF,GAAc,IAGvD,KACLxM,SAASkH,oBAAoB,mBAAoBoF,GAAU,GAC3DtM,SAASkH,oBAAoB,yBAA0BoF,GAAU,GACjEtM,SAASkH,oBAAoB,sBAAuBoF,GAAU,GAC1DG,IACFA,EAAMvF,oBAAoB,wBAAyBqF,GAAe,GAClEE,EAAMvF,oBAAoB,sBAAuBsF,GAAc,OAIlE,IAEEhF,GAAyB,QAAjBkF,EAAAA,GAIN,CAACjE,EAtEc,KACfyD,EAAM/C,UAAa3B,GAAyB,QAAjBkF,EAAAA,MAI5BR,EAAM/C,QAAQwD,kBAChBT,EAAM/C,QAAQwD,oBACLT,EAAM/C,QAAQyD,wBACvBV,EAAM/C,QAAQyD,0BACLV,EAAM/C,QAAQ0D,sBACvBX,EAAM/C,QAAQ0D,wBACLX,EAAM/C,QAAQ2D,sBACvBZ,EAAM/C,QAAQ2D,uBAGhBX,GAAgB,KAGK,KAChBD,EAAM/C,UAIPnJ,SAASiM,eACXjM,SAASiM,iBACAjM,SAAS+M,oBAClB/M,SAAS+M,sBACA/M,SAASgN,uBAClBhN,SAASgN,yBACAhN,SAASiN,sBAClBjN,SAASiN,uBAGXd,GAAgB,MAkCT,EAAC,GGhC4Ce,CAAoBvB,EAAUC,IAE9E,WAAEuB,EAAF,iBAAcjF,EAAd,kBAAgCkF,IAAsBC,EAAAA,EAAAA,MAE1DC,aAAcC,EACdC,qBAAsBC,IACpBC,EAAAA,EAAAA,IAAmBP,OAAYjI,OAAWA,EAAW,SAEvDoI,aAAcK,EACdH,qBAAsBI,IACpBF,EAAAA,EAAAA,GAAkB5B,EAAAA,KAAWvD,IAAagF,OAAqBrI,OAAWA,EAAW,SAEzFsB,EAAAA,EAAAA,KAAU,KACJ+E,IAAWD,EACbK,EAASxC,QAAS0E,QACT3C,IAAQW,EAAAA,KAIjBiC,EAAAA,EAAAA,GAASnC,EAASxC,WAEnB,CAACoC,EAAQD,EAAmBJ,KAE/B1E,EAAAA,EAAAA,KAAU,KACJmF,EAASxC,QAAShB,cAAgBwD,EAASxC,QAASf,UACtD2D,EAAe,GACfH,GAAY,IAEZG,EAAeJ,EAASxC,QAAShB,eAElC,CAACA,IAEJ,MAAM4F,GAAkBzJ,EAAAA,EAAAA,KAAa+C,IACnCA,EAAEC,kBACEiB,GACFoD,EAASxC,QAAS0E,QAClBjC,GAAY,MAEZkC,EAAAA,EAAAA,GAASnC,EAASxC,SAClByC,GAAY,MAEb,CAACrD,KAEJyF,EAAAA,EAAAA,GAAgBrC,EAAU,IAE1B,MAAMsC,GAAkB3J,EAAAA,EAAAA,KAAY,KAClCmH,GAAe,KACd,CAACA,IAEEyC,GAAiB5J,EAAAA,EAAAA,KAAa+C,IAC9BA,EAAE8G,SAAWxC,EAASxC,SACxBsC,GAAe,KAEhB,CAACA,IAEE2C,GAAmB9J,EAAAA,EAAAA,KAAa+C,IACpC0E,EAAe1E,EAAEgH,cAAclG,eAC9B,IAEGmG,GAAchK,EAAAA,EAAAA,KAAY,KAC9ByH,EAAe,GACfH,GAAY,GACZH,GAAe,KACd,CAACA,IAEE8C,GAAyBjK,EAAAA,EAAAA,KAAY,KACrCmE,GAAgBwD,EAClBA,KACUxD,GAAgBuD,GAC1BA,MAED,CAACC,EAAgBxD,EAAcuD,IAE5BvC,GAAanF,EAAAA,EAAAA,KAAakK,IAC9B7C,EAASxC,QAAShB,YAAcqG,IAC/B,KAEHhI,EAAAA,EAAAA,KAAU,KACR,MAAMiI,EAA4BpH,IAClB,UAAVA,EAAEqH,KAA6B,MAAVrH,EAAEqH,MACzBrH,EAAEsH,iBACFZ,EAAgB1G,KAMpB,OAFArH,SAASiH,iBAAiB,UAAWwH,GAA0B,GAExD,KACLzO,SAASkH,oBAAoB,UAAWuH,GAA0B,MAEnE,CAACV,IAEJ,MAAMa,EAAevD,GAAe,UAASA,EAAW3B,oBAAoB2B,EAAW1E,WACjFkI,EAAc,yBAAwBzD,KAE5C,OACE,0BACEnG,UAAU,cACV6J,YAAc3D,GAAUU,EAAAA,QAAiC3G,EAAlB+I,EACvCc,WAAa5D,GAAUU,EAAAA,QAAgC3G,EAAjBgJ,GAEtC,0BACEhM,MAAO0M,GAGP,+BACElE,IAAKiB,EACLqD,SAAUnD,EAAAA,GACVoD,aAAW,EACXC,KAAM/D,EAENgE,MAAOhE,EACP3J,GAAG,qBACHU,MAAO2M,EACPO,OAAQtD,EAAAA,GAAS,IAAMF,GAAY,QAAQ1G,EAC3CmK,QAASf,EACTnJ,QAAUE,EAAAA,QAA4CH,EAAlB6I,EACpCuB,cAAgBzD,EAAAA,QAAwC3G,EAAzBqJ,GAE3BnB,EAdN,CAeEmC,aAAcnB,IAEblD,GAAO,6BAAQzK,IAAKyK,MAGxByC,GACC,mBAAC9I,EAAA,EAAD,CAAQC,OAAK,EAACG,UAAY,eAAc2I,IAAwBzI,QAAS4I,GACvE,wBAAG9I,UAAU,eAGhBsI,GACC,0BAAKtI,UAAW,CAAC,oBAAqBwI,GAAmB+B,KAAK,OAC1DrC,GAAc,0BAAKlI,UAAU,aAAf,gBAChB,mBAACa,EAAA,EAAD,CACEf,KAAK,KACLgB,SAAUoH,EAAa,EAAIlJ,EAC3BwL,QAAM,EACNtK,QAASqG,MAIbL,IAAUoC,GACV,mBAAC,GAAD,CACEhF,SAAUA,EACVL,iBAAkBA,EAClBC,YAAaA,EACbK,sBAAuB4D,QAAQJ,GAC/BvD,aAAcA,EACdJ,SAAUA,EACVD,SAAUuD,EAASxC,SAAUwC,EAASxC,QAAQf,UAAgB,EAC9DQ,UAAW8C,EACX7C,cAAe4C,EACfnD,qBAAsB+C,GAAcA,EAAW3B,MA5KpB,IA6K3BZ,OAAQW,EACRf,mBAAoB6F,EACpB5F,YAAaoF,QCsBvB,IAAehL,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAQyM,KACP,MAAM,OACJC,EADI,SAEJC,EAFI,UAGJC,EAHI,cAIJC,EAJI,kBAKJC,EALI,OAMJjQ,GACE4P,EAEJ,GAAI5P,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAM8O,IAAUE,EACd,MAAO,GAGT,MAAMzN,GAAU4N,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,GAClD,OAAKzN,EAIE,CACLuN,OAAAA,EACAE,UAAAA,EACAI,SAAU7N,EAAQ6N,SAClBnQ,OAAAA,EACAsC,QAAAA,EACAgB,aAAaC,EAAAA,EAAAA,IAAyBJ,EAAQb,IATvC,GAaX,GAAI0N,EAGF,MAAO,CACLD,WAAY,EACZI,SAAUH,EACVI,aALaC,EAAAA,EAAAA,IAAWlN,EAAQ6M,KAAkBM,EAAAA,EAAAA,IAAWnN,EAAQ6M,GAMrEC,kBAAmBA,GAAqB,EACxCjQ,OAAAA,GAIJ,KAAM6P,GAAUC,GAAYC,GAC1B,MAAO,GAGT,IAAIzN,EAOJ,OALEA,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjFuQ,EAAAA,EAAAA,IAAuBpN,EAAQ0M,EAAQE,IAEvCG,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,GAGzCzN,EAIE,CACLuN,OAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAI,SAAU7N,EAAQ6N,SAClBnQ,OAAAA,EACAsC,QAAAA,EACAgB,aAAaC,EAAAA,EAAAA,IAAyBJ,EAAQb,IAVvC,KAvDOY,EA7JmCsN,IACrD,MAAM,UACJT,EADI,SAEJU,EAFI,YAGJL,EAHI,OAIJP,EAJI,QAKJvN,EALI,kBAMJ2N,EANI,OAOJjQ,EAPI,eAQJ0Q,EARI,QASJhF,EATI,cAUJiF,EAVI,eAWJC,EAXI,YAYJtN,EAZI,kBAaJuN,GACEL,EAEEM,EAAQxO,GAAUyO,EAAAA,EAAAA,IAAgBzO,QAAW8C,EAC7CuH,EAAQrK,GAAU0O,EAAAA,EAAAA,IAAgB1O,QAAW8C,EAC7C6L,EAAe3O,GAAU4O,EAAAA,EAAAA,IAAuB5O,QAAW8C,EAC3D+L,EAAe7O,GAAU8O,EAAAA,EAAAA,IAAuB9O,QAAW8C,EAC3DiM,IAAkB/O,IAAUgP,EAAAA,EAAAA,IAAuBhP,GACnDiP,IAAkBjP,IAAUkP,EAAAA,EAAAA,IAAuBlP,GACnDmB,EAAU6I,QAAQK,GAASwE,GAAgBI,GAC3CE,EAAUnF,SAAS7I,IAAYqN,GAASG,GAAgBI,KACxD,MAAEhG,GAAUsB,GAASwE,GAAgB,GAErCrM,EAASwH,QAAQ8D,GAAeL,GAChCnM,EAAW0I,QAAQ8D,GAEnBsB,EAAoB1R,IAAWe,EAAAA,GAAAA,YAC/B4Q,EAAe3R,IAAWe,EAAAA,GAAAA,aAE1B6Q,EAAsC,IAAnBlB,EAGzB,SAASmB,EAAaC,GACpB,GAAIlO,QAAkCwB,IAAtB6K,EAAiC,CAC/C,MAAM,OAAE8B,GAAW3B,EACnB,OAAO2B,GAAUA,EAAO9B,GACnB,QAAO8B,EAAO9B,GAAmBvO,aAClCsQ,EAAAA,EAAAA,IAAkB5B,EAAc0B,EAAS,MAAQ,UAGvD,OAAOxP,IAAWgC,EAAAA,EAAAA,IAAoBhC,EAASwP,EAAS,aAAe,iBAGzE,MAAMG,GAAmBC,EAAAA,EAAAA,GACvB5P,IAAYoP,GAAqBC,KAAiBrN,EAAAA,EAAAA,IAAoBhC,EAAS,kBAC/E8C,EACA+M,EAAAA,GAAAA,aACA/M,EACAwM,GAtDuB,KAwDnBQ,EAAmBP,IACnBQ,GAAiBH,EAAAA,EAAAA,GACrBE,OACAhN,EACA+M,EAAAA,GAAAA,aACA/M,EACAwM,GA9DuB,MAiEvBpO,UAAW8O,EADP,aAEJnO,IACEE,EAAAA,EAAAA,GACFwN,GAAa,QACbzM,EACA9C,IAAWiQ,EAAAA,EAAAA,IAAsBjQ,EAAS,mBAC1C8C,EACAwM,GAxEuB,KA2EnBjG,GAAiBnH,EAAAA,EAAAA,KAAasE,IAClC+H,MAAAA,GAAAA,GAAqB/H,KACpB,CAAC+H,IAEE2B,EAAgB1B,GAASnE,GAAUmE,GAASnE,GAAQ8F,aAAUrN,EACpE,IAAIsN,GAAkBjP,IAAY+O,GAAgBF,IAAsBD,GAAkBJ,EAC1F,MAAMU,GAAeC,EAAAA,EAAAA,IAAaF,GAAiBpQ,IAAWuQ,EAAAA,EAAAA,IAA4BvQ,IACrFoQ,GAAiB1S,IAAWe,EAAAA,GAAAA,eAC/B2R,EAAgBC,GAGlB,MAAMG,EAAYxQ,GAAUyQ,EAAAA,EAAAA,IAAmBzQ,QAAW8C,EAE1D,IAAI4N,EAaJ,GAZI1Q,EACE+O,GAAmBE,EACrByB,GAAaC,EAAAA,EAAAA,IAAmB3Q,GAAU4Q,UACjCpC,GAASG,EAClB+B,GAAaG,EAAAA,EAAAA,IAAwBrC,GAASG,IACrCtE,GAASwE,KAClB6B,GAAaI,EAAAA,EAAAA,IAAoBzG,GAASwE,IAG5C6B,EAAaK,EAAAA,GAGXzP,EACF,OACE,0BAAKgL,IAAKiB,EAAQ1K,UAAU,sBACzBmO,GACChB,GAAoBD,GACpBkB,EAAAA,EAAAA,IAA+BF,EAAAA,IAAwB,IACtD9N,EAAAA,KAA4BjC,IAMrC,IAAKhB,EAAS,OACd,MAAMkR,GAAYC,EAAAA,EAAAA,GAAkBnR,GAC9BoR,GAAYpH,QAAQkH,GAE1B,OACE,0BACErO,UAAY,uBAAqBuO,GAAY,aAAe,KAE3DpQ,GAAe,0BAAKqQ,cAAejT,EAAAA,EAAWyE,UAAU,cACxDsM,GAAW6B,GACVd,GAAgBF,GAAoBD,GAAkBJ,EACtD3P,IAAWiR,EAAAA,EAAAA,IAA+BP,EAAaU,KACtDnO,EAAAA,KAA4BjC,GAE9BG,KAAcgN,GAAY1E,EAAAA,GA0HjC,SAA4B0G,EAAkBmB,EAA2BC,GACvE,MAAM/E,EAAe8E,GAAc,UAASA,EAAUhK,oBAAoBgK,EAAU/M,WAC9EkI,EAAc,yBAAwB0D,KAC5C,OAAOA,EAEH,0BACEtN,UAAU,eAEV,0BACE/C,MAAO0M,GAGP,4BACE1M,MAAO2M,EACPvO,UAAW8L,QAAQuH,OAMzB,0BACE1O,UAAU,kBACV/C,MAAOwR,EAAa,UAASA,EAAUhK,UAAY,IAEnD,mBAACkK,EAAA,EAAD,CAAS5O,MAAM,WAlJ0B6O,CACzCrB,EACApQ,IAAWiR,EAAAA,EAAAA,IAA+BP,EAAaU,IAAW,IACjEnO,EAAAA,KAA4BjC,GAE7B,mBAAC,GAAD,CACEsL,IAAKmB,EACL3E,IAAKoH,GAAgBF,EACrBjH,MAAOA,EACPC,WAAYoH,EACZnH,WAAYjJ,IAAWiR,EAAAA,EAAAA,IAA+BP,EAAaU,IAAW,GAC9EvP,aAAcA,EACdoE,SAAUuK,EACVtH,kBAAmB1G,GAAU2L,EAC7B7E,oBAAqBgF,EACrBjF,eAAgBA,EAChBF,QAASgF,EACT/E,QAASA,KAGZ8H,GACC,mBAAC,EAAD,CACEpN,KAAMoN,EACNnO,QAASsL,EACTtK,SAAUuK,GAAkB7E,EAAAA,GAC5BzF,WAAY7C,IAAY4H,SA6ElC,SAASiI,GAAYb,EAAkBmB,EAA2BC,GAChE,OAAOpB,EAEH,0BACE9R,IAAK8R,EACLuB,IAAI,GACJ5R,MAAOwR,EAAa,UAASA,EAAUhK,UAAY,GACnDpJ,UAAW8L,QAAQuH,KAIrB,0BACE1O,UAAU,kBACV/C,MAAOwR,EAAa,UAASA,EAAUhK,UAAY,IAEnD,mBAACkK,EAAA,EAAD,CAAS5O,MAAM,W,kOChRvB,MAGM+O,GAAqB,IAS3B,IAAIC,G,IAQCC,I,SAAAA,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,KAAAA,GAAAA,KAKL,MAueA,IAAelR,EAAAA,EAAAA,KAveyB,IAWlC,IAXmC,UACvC8M,EADuC,aAEvCqE,EAFuC,cAGvCC,EAHuC,QAIvC5Q,EAJuC,MAKvC4H,EALuC,QAMvCoG,EANuC,OAOvC3M,EAPuC,SAQvC2L,EARuC,UASvCiD,KACGY,GACC,EAEJ,MAAMC,GAAerL,EAAAA,EAAAA,IAAuB,MAEtCsL,GAAiBtL,EAAAA,EAAAA,IAAuB,MACxCuL,GAAevL,EAAAA,EAAAA,IAAkB,CAAEwL,EAAG,EAAGC,EAAG,EAAGC,MAAO,IACtDC,GAAoB3L,EAAAA,EAAAA,SAAmC9D,GACvD0P,GAAc5L,EAAAA,EAAAA,KAAO,IACpB6L,EAAiBC,IAAsBvO,EAAAA,EAAAA,IAA6BsJ,GACrEkF,GAAcC,EAAAA,EAAAA,MACbtE,EAAgBC,IAAqBpK,EAAAA,EAAAA,KAAkB,IAExD,SACJ/C,EADI,QAEJgI,GACE4I,EAEEa,GAAe3Q,EAAAA,EAAAA,KAAa4Q,IAChCX,EAAapL,QAAU+L,EACvBH,MACC,CAACA,IAEEI,GAAc7Q,EAAAA,EAAAA,KAAa4Q,IAC/BN,EAAYzL,QAAU+L,EACtBH,MACC,CAACA,IAEEK,GAAqBC,EAAAA,EAAAA,GA3DJ,KA2DkC,GACnDC,GAAyBD,EAAAA,EAAAA,GA3DV,KA2DsC,GACrDE,GAAiBF,EAAAA,EAAAA,GA3DD,KA2D8B,GAE9CG,GAA+BlR,EAAAA,EAAAA,KAAa+C,IAChD,IAAKwE,EAAAA,GAAc,OACnB,MAAM4J,EAAWzO,OAAO0O,YAAcrO,EAAEsO,MA1DlB,IA2DjBF,GAAYpO,EAAEuO,MA5DG,KA6DjBH,GAAYpO,EAAEuO,MAAQ5O,OAAO6O,WA7DZ,IA8DtBlF,GAAmBD,KAClB,CAACA,IAwYJ,IAtYAoF,EAAAA,GAAAA,IAAW,IAAMnF,GAAkB,IAAQoD,MAE3CvN,EAAAA,EAAAA,KAAU,KACR,IAAKqF,EAAAA,KAAiBwI,EAAalL,SAAW3F,IAAaqR,EACzD,OAEF,IAAIkB,EAAgB,CAAEvB,EAAG,EAAGC,EAAG,EAAGC,MAAO,GACzC,MAAMsB,EAAiB,CACrBxB,EAAG,EACHC,EAAG,GAECwB,EAAiB,CACrBzB,EAAG,EACHC,EAAG,GAECyB,EAAW,CACf1B,EAAG,EACHC,EAAG,GAEL,IACI0B,EACAC,EAFAC,EAAkBC,KAAKC,MAG3B,MAAMC,GAAqBC,EAAAA,EAAAA,KAAS,KAClCJ,EAAkBC,KAAKC,QACtB,KAAK,GAAO,GAETG,EAAerP,IACnB,GAAmC,IAA/BkN,EAAapL,QAAQuL,MAAa,OAAO,EAC7C,IAAIiC,EAAY,EAChB,GAAI3P,OAAO0O,YAAcrO,EAAEsO,MA7FP,GA8FlB,OAAO,EAELtO,EAAEuO,MAjGc,GAkGlBe,GAAa,EACJtP,EAAEuO,MAAQ5O,OAAO6O,WAnGR,KAoGlBc,EAAY,GAEd,MAAMC,EAAM1C,EAAaW,EAAiB8B,GAC1C,GAAIC,EAAK,CACP,MAAMC,GAAU7P,OAAO6O,WAhHZ,IAgHuCc,EAClDpC,EAAapL,QAAQqL,GAAKqC,EAC1BjC,EAAYzL,SAAU,EACtB2L,EAAmB8B,GACnBxB,GAAmB,IAAMjB,EAAcyC,KACvCrB,GAAe,KACbJ,GAAY,MAEdY,EAAgB,CAAEvB,EAAG,EAAGC,EAAG,EAAGC,MAAO,GACrCV,IAAkB8C,EAAAA,EAAAA,IAAc,CAC9BC,KAAMxC,EAAapL,QAAQqL,EAC3BwC,GAAI,EACJ5O,SAAU2L,GACVkD,OAAQC,EAAAA,GAAAA,aACRC,SAAWjC,GAAUD,EAAa,CAChCR,EAAG,EACHD,EAAGU,EACHR,MAAO,MAIb,OAAqB,IAAdiC,GAGT,OAAOvM,EAAAA,EAAAA,IAAciK,EAAalL,QAAS,CACzCiO,cAAc,EACdC,wBAAyB,qBACzBhN,UAAYhD,IACV,IAAIiQ,GAAqBjQ,KACzBgP,EAAkBC,KAAKC,OACnBgB,EAAAA,EAAAA,GAAqBhD,EAAapL,QAAS,CAAEqL,EAAG,EAAGC,EAAG,EAAGC,MAAO,KAAM,CACxE,IAAKJ,EAAenL,QAAS,OAE7B,GADAiN,EAAU9B,EAAenL,QAAQpI,cAAc,eAC1CqV,EAAS,OAEdD,EAAqBC,EAAQxM,0BAGjCW,OAAQ,CAACiN,EAAOC,EAAR,KAGF,IAHwB,YAC5BC,EAD4B,YAE5BC,GACI,EACJ,GAAIL,GAAqBE,GAAQ,OAEjC,GAAI1L,EAAAA,GAAQ,CACV,MAAM,MAAE8J,GAAW6B,EAAgCG,QAAQ,GAC3D,GAAIhC,GAASiC,EAAAA,IAA6BjC,GAAS5O,OAAO6O,WAAagC,EAAAA,GACrE,OAGA7D,KACFA,KACAA,QAAkB9O,GAEpBgR,EAAS1B,EAAIwB,EAAexB,EAAIkD,EAChCxB,EAASzB,EAAIuB,EAAevB,EAAIkD,EAChC3B,EAAexB,EAAIkD,EACnB1B,EAAevB,EAAIkD,EACnB,MAAMG,EAAanS,KAAKoS,IAAIL,GACtBM,EAAarS,KAAKoS,IAAIJ,IACtB,MACJjD,EADI,EAEJF,EAFI,EAGJC,GACEF,EAAapL,QACX8O,EAAI,GAOV,GAHAzB,IAGc,IAAV9B,EAUJ,OAAIC,EAAkBxL,UAAY8K,GAAeiE,WAG3CvD,EAAkBxL,UAAY8K,GAAekE,YAC5CxS,KAAKoS,IAAIvD,GAAKyD,GAAMH,EAAaG,GAAKD,EAAaC,IACtDtD,EAAkBxL,QAAU8K,GAAekE,WAC3CvD,EAAYzL,SAAU,OACtB8L,EAAa,CACXT,EAAGkD,EACHjD,EAAG,EACHC,MAAAA,WAMFC,EAAkBxL,UAAY8K,GAAeiE,UAC5CvS,KAAKoS,IAAItD,GAAKwD,GAAMD,EAAaC,GAAKH,EAAaG,KACtDtD,EAAkBxL,QAAU8K,GAAeiE,SAC3CjD,EAAa,CACXT,EAAG,EACHC,EAAGkD,EACHjD,MAAAA,MA/BE,YAAa8C,GAAkC,IAAzBA,EAAMI,QAAQjV,QACtCsS,EAAa,CACXT,EAAGuB,EAAcvB,EAAIkD,EACrBjD,EAAGsB,EAActB,EAAIkD,EACrBjD,MAAAA,KA+BR0D,OAAQ,CAAC/Q,EAAD,KAQF,IARM,WACVgR,EADU,eAEVC,EAFU,eAGVC,EAHU,YAIVb,EAJU,YAKVC,EALU,eAMVa,EANU,eAOVC,GACI,EAEJ,MAAM/D,EAAQ/O,KAAKsE,IAAIyO,GAAc/S,KAAKqE,IAAI+L,EAAcrB,MAAQ2D,EAhO3D,KAiOHM,EAAcjE,EAAQqB,EAAcrB,MAKpCkE,EAJUjT,KAAKoS,IAAIpS,KAAKsE,IAAI8L,EAAcvB,EAAG,IAInB8D,EAC1BO,EAJUlT,KAAKoS,IAAIpS,KAAKsE,IAAI8L,EAActB,EAAG,IAInB8D,EAGhCtC,EAAezB,EAAIgE,EACnBvC,EAAexB,EAAIgE,EAGnB,MAAMK,EAAgBF,EAAgBD,EAAcC,EAC9CG,EAAgBF,EAAgBF,EAAcE,EAEpD5D,EAAa,CACXT,EAAGuB,EAAcvB,EAAIsE,EAAepB,EACpCjD,EAAGsB,EAActB,EAAIsE,EAAepB,EACpCjD,MAAAA,KAGJvP,QAAQkC,GACFqP,EAAYrP,KACdA,EAAEsH,iBACFtH,EAAEC,oBAGNgI,cAAcjI,EAAD,GAGV,IAHc,QACf2R,EADe,QAEfC,GACC,EACD,GAAIvC,EAAYrP,GAGd,OAFAA,EAAEsH,sBACFtH,EAAEC,kBAIJ,MAAMwR,EAAgBE,EAtQN,EAsQkCA,EAC5CD,EAAgBE,EAvQN,EAuQkCA,GAC5C,MACJvE,EADI,EAEJF,EAFI,EAGJC,GACEF,EAAapL,QACjB,GAAc,IAAVuL,EAAa,CACf,GAAU,IAANF,GAAiB,IAANC,EAAS,OACxBsB,EAAgB,CACdvB,EAAGsE,EACHrE,EAAGsE,EACHrE,MAlRY,QAqRdqB,EAAgB,CACdvB,EAAG,EACHC,EAAG,EACHC,MAAO,GAGX,OAAOoC,EAAAA,EAAAA,IAAc,CACnBC,KAAM,CAACvC,EAAGC,EAAGC,GACbsC,GAAI,CAACjB,EAAcvB,EAAGuB,EAActB,EAAGsB,EAAcrB,OACrDtM,SAAU2L,GACVkD,OAAQC,EAAAA,GAAAA,aACRC,SAAWjC,GAAUD,EAAa,CAChCT,EAAGU,EAAM,GACTT,EAAGS,EAAM,GACTR,MAAOQ,EAAM,QAInB5K,UAAW,KACT,MAAM4O,EAAOvT,KAAKoS,IAAIxD,EAAapL,QAAQqL,GACrC2E,EAAOxT,KAAKoS,IAAIxD,EAAapL,QAAQsL,IACrC,MACJC,EADI,EAEJF,EAFI,EAGJC,GACEF,EAAapL,QAUjB,GARAmM,GAAuB,KACrBX,EAAkBxL,aAAUjE,KAE9BqQ,GAAe,KACbJ,GAAY,MAIVT,EAAQ,EAEV,OADAqB,EAAgB,CAAEvB,EAAG,EAAGC,EAAG,EAAGC,MAAO,IAC9BoC,EAAAA,EAAAA,IAAc,CACnBC,KAAM,CAACvC,EAAGC,EAAGC,GACbsC,GAAI,CAAC,EAAG,EAAG,GACX5O,SAAU2L,GACVkD,OAAQC,EAAAA,GAAAA,aACRC,SAAWjC,GAAUD,EAAa,CAChCT,EAAGU,EAAM,GACTT,EAAGS,EAAM,GACTR,MAAOQ,EAAM,OAInB,GAAIR,EAAQ,EAAG,CACb,IAAK0B,IAAYD,EAMf,YALAJ,EAAgB,CACdvB,EAAAA,EACAC,EAAAA,EACAC,MAAAA,IAKJ,MAAM0E,EAAahD,EAAQxM,wBACrByP,EAAK1T,KAAKsE,IAAIyK,EAnVb,GAoVDiE,EAAcU,EAAK3E,EAIzB,IAAI4E,EAAK9E,EAAImE,GAAe1C,EAAezB,EAAImE,EAAc1C,EAAezB,GACxE+E,EAAK9E,EAAIkE,GAAe1C,EAAexB,EAAIkE,EAAc1C,EAAexB,GAG5E,MAAM+E,EAAI,IAGV,GAAIzD,EAAcrB,QAAUA,EAAO,CAEjC,MAAM+E,EAAK9T,KAAKoS,IAAI/B,EAAexB,IAAM8B,KAAKC,MAAQF,GAChDqD,EAAK/T,KAAKoS,IAAI/B,EAAevB,IAAM6B,KAAKC,MAAQF,GAGtDiD,GAAM3T,KAAKoS,IAAI/B,EAAexB,GAAKiF,EAAKD,EAAItD,EAAS1B,EACrD+E,GAAM5T,KAAKoS,IAAI/B,EAAevB,GAAKiF,EAAKF,EAAItD,EAASzB,EAKvD,GAAI2E,EAAW1P,MAAQ1C,OAAO6O,WAAY,CACxC,MAAM8D,GAAcxD,EAAmBxM,KAAO0P,EACxCO,EAAa5S,OAAO6O,WAAaM,EAAmB0D,MAAQR,EAClEC,EAAK3T,KAAKsE,IAAI0P,EAAYhU,KAAKqE,IAAI4P,EAAYN,SAG/CA,GAAMtS,OAAO6O,WAAa7O,OAAO6O,WAAawD,GAAM,EAGtD,GAAID,EAAWzS,OAASK,OAAO0O,YAAa,CAC1C,MAAMoE,GAAc3D,EAAmB4D,IAAMV,EACvCW,EAAahT,OAAO0O,YAAcS,EAAmB8D,OAASZ,EACpEE,EAAK5T,KAAKsE,IAAI6P,EAAYnU,KAAKqE,IAAIgQ,EAAYT,SAE/CA,GAAMvS,OAAO0O,YAAc1O,OAAO0O,YAAc2D,GAAM,EAkBxD,OAhBAtD,EAAgB,CACdvB,EAAG8E,EACH7E,EAAG8E,EACH7E,MAAO2E,QAETrF,IAAkB8C,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACvC,EAAGC,EAAGC,GACbsC,GAAI,CAACsC,EAAIC,EAAIF,GACbjR,SAAU2L,GACVkD,OAAQC,EAAAA,GAAAA,aACRC,SAAWjC,GAAUD,EAAa,CAChCT,EAAGU,EAAM,GACTT,EAAGS,EAAM,GACTR,MAAOQ,EAAM,QAUnB,GALAa,EAAgB,CACdvB,EAAAA,EACAC,EAAAA,EACAC,MAAAA,GAEEyE,GAxZc,GAwZa,OAAO3N,IAEtC,GAAI2N,EAAO,EACT,OAAOrC,EAAAA,EAAAA,IAAc,CACnBC,KAAMtC,EACNuC,GAAI,EACJ5O,SAAU2L,GACVkD,OAAQC,EAAAA,GAAAA,aACRC,SAAWjC,GAAUD,EAAa,CAChCT,EAAG,EACHC,EAAGS,EACHR,MAAAA,MAKN,MAAMiC,EAAYnC,EAAI,EAAI,GAAK,EACzBoC,EAAM1C,EAAaW,EAAiBL,EAAI,EAAI,GAAK,GAKjD0F,EAAOhE,EAAS1B,EAAI,GAAK,EAAI,EACnC,GAAIoC,GAAOsC,GAhbO,IAgbsBvC,IAAcuD,EAAM,CAC1D,MAAMrD,GAAU7P,OAAO6O,WA/ad,IA+ayCc,EAGlDpC,EAAapL,QAAQqL,GAAKqC,EAC1B/B,EAAmB8B,GACnBxB,GAAmB,IAAMjB,EAAcyC,KAGzC5C,IAAkB8C,EAAAA,EAAAA,IAAc,CAC9BC,KAAMxC,EAAapL,QAAQqL,EAC3BwC,GAAI,EACJ5O,SAAU2L,GACVkD,OAAQC,EAAAA,GAAAA,aACRC,SAAWjC,GAAUD,EAAa,CAChCR,EAAG,EACHD,EAAGU,EACHR,MAAOH,EAAapL,QAAQuL,eAOnC,CACDlR,EACAgI,EACAyJ,EACAf,EACAW,EACAM,KAGGN,EAAiB,OAEtB,MAAMsF,EAAgBjG,EAAaW,EAAiB,GAC9CuF,EAAoBlG,EAAaW,GAAkB,GACnDwF,EAAU9F,EAAapL,QAAQqL,EAC/B8F,EAAU/F,EAAapL,QAAQsL,GAC/B,MAAEC,GAAUH,EAAapL,QAE/B,OACE,0BAAKlE,UAAU,oBAAoByF,IAAK2J,GACrC+F,GAA+B,IAAV1F,GACpB,0BAAKzP,UAAU,mBAAmB/C,MAAOqY,IAAmBvT,OAAO6O,WAAawE,EA1drE,KA2dT,mBAAC,GAAD,MAEMjG,EAFN,CAGEvE,UAAWuK,MAGhBvF,GACC,0BACE5P,UAAY,qBAAmBsL,EAAW,2BAA6B,IACvEpL,QAASqQ,EACT9K,IAAK4J,EACLpS,MAAOqY,GAAkBF,EAASC,EAAS5F,IAE3C,mBAAC,GAAD,MAEMN,EAFN,CAGEvE,UAAWgF,EACXtE,SAAUA,GAAYqE,EAAYzL,QAClCwH,kBAAmBA,EACnBD,eAAgBA,GAAkBlN,GAAsB,IAAVkR,MAInDyF,GAA2B,IAAVzF,GAChB,0BAAKzP,UAAU,mBAAmB/C,MAAOqY,GAAkBvT,OAAO6O,WAAawE,EAnfpE,KAofT,mBAAC,GAAD,MAEMjG,EAFN,CAGEvE,UAAWsK,UASvB,SAASI,KAA2C,IAAzB/F,EAAyB,uDAArB,EAAGC,EAAkB,uDAAd,EAAGC,EAAW,uDAAH,EAC/C,MAAQ,0BAAyBF,EAAEvM,QAAQ,SAASwM,EAAExM,QAAQ,oBAAoByM,EAAMzM,QAAQ,OAGlG,SAASuS,GAAsB1Y,EAAsB2Y,GACnD,QAAK3Y,MACDA,EAAQ4Y,QAAQD,IACbrO,QAAQtK,EAAQP,QAAQkZ,KAGjC,SAASnD,GAAqBjQ,GAC5B,MAAM8G,EAAS9G,EAAE8G,OACjB,GAAIqM,GAAsBrM,EAAQ,wBAChC,OAAIqM,GAAsBrM,EAAQ,uBAGlC9G,EAAEsH,kBAFO,E,cCxhBb,MAAMgM,GAAiB,CACrB,EAAG,EAAG,EAAG,EAAG,EAAG,GAGXC,GAAe,CACnB,EAAG,EACH,IAAK,IACL,EAAG,IACH,IAAK,IACL,EAAG,KAGCC,GAAiB,IAsKvB,IAAe9X,EAAAA,EAAAA,KA1Ie,IASxB,IATyB,SAC7B+X,EAD6B,UAE7B7V,EAF6B,OAG7B8V,EAH6B,OAI7BC,EAJ6B,UAK7BC,EAL6B,UAM7BC,EAN6B,UAO7BC,EAP6B,MAQ7BC,GACI,EACJ,MAAMC,EAAiBT,GAAaK,IAA2CA,GACxEK,EAAYC,IAAiBhV,EAAAA,EAAAA,KAAkB,IAC/CiV,EAAUC,IAAelV,EAAAA,EAAAA,IAAoB,CAClDmV,GAAIR,EAAWS,GAAIR,EAAW3G,EAAG,EAAGC,EAAG,KAGlCmH,EAAYC,IAAiBtV,EAAAA,EAAAA,IAAmBoU,IAGjDmB,GAAgB9S,EAAAA,EAAAA,IAAuB,MAGvC+S,GAAkB/S,EAAAA,EAAAA,IAAuB,MA8F/C,OA5FAxC,EAAAA,EAAAA,KAAU,KACR,MAAMwV,EAAeX,GAAkBO,EAAW,GAC5CK,EAAWf,GAAaU,EAAW,GACnCM,EAAWf,GAAaS,EAAW,GAEnCO,EAAgB,IAAIP,GACtBA,EAAW,KAAOI,IACpBG,EAAc,GAAKH,GAAgBG,EAAc,GACjDA,EAAc,GAAKH,GAAgBG,EAAc,IAE/CP,EAAW,KAAOK,IACpBE,EAAc,GAAKF,GAEjBL,EAAW,KAAOM,IACpBC,EAAc,GAAKD,IAGhBE,EAAAA,GAAAA,IAAqBR,EAAYO,IACpCN,EApEN,SAAiCQ,EAAkBT,EAAsBU,GACvE,MAAMC,EAAQD,GAAWA,EAAQvb,cAAc,kCAC/C,IAAKub,IAAYC,EACf,OAAOX,EAET,MAAMY,EAAcF,EAAQ1S,wBACtB6S,EAAYF,EAAM3S,wBAElB8S,EAAeD,EAAU/S,MAAQ2S,EAAYT,EAAW,GACxDe,EAAgBF,EAAU9V,OAAS0V,EAAYT,EAAW,GAC1DgB,GAAWJ,EAAY9S,MAAQgT,GAAe,EAAId,EAAW,GAC7DiB,GAAWL,EAAY7V,OAASgW,GAAgB,EAAIf,EAAW,GAYrE,OAXIY,EAAY9S,OAAS8S,EAAY9S,MAAQmR,GAAiB+B,EAC5DhB,EAAW,IAAMgB,EAAUJ,EAAY9S,MAAQmR,GACtC6B,GAAeA,EAAcE,EAAU/B,KAChDe,EAAW,IAAMc,EAAcE,EAAU/B,IAEvC2B,EAAY7V,QAAU6V,EAAY7V,OAASkU,GAAiBgC,EAC9DjB,EAAW,IAAMiB,EAAUL,EAAY7V,OAASkU,GACvC8B,GAAgBA,EAAeE,EAAUhC,KAClDe,EAAW,IAAMe,EAAeE,EAAUhC,IAGrCe,EA6CWkB,CAAwBlB,EAAW,GAAIO,EAAeL,EAAc3S,YAGnF,CAAC+R,EAAWC,EAAWE,KAE1B7U,EAAAA,EAAAA,KAAU,KACHwU,GACHa,EAAclB,MAEf,CAACK,KAEJxU,EAAAA,EAAAA,KAAU,KACJuV,EAAgB5S,UAClB4S,EAAgB5S,QAAQjH,MAAM6a,UAAa,UAASnB,EAAWoB,iBAEhE,CAACjC,EAAQa,IA2DRb,EACKD,EAIP,0BACEpQ,IAAKoR,EACL7W,UAAY,eAAcA,GAAa,KACvCgY,YAjEqB5V,IACvB,IAAK2T,EACH,OAGF3T,EAAEC,kBACFD,EAAEsH,iBAEF,MAEMuO,EAAyB,CAC7BxB,GAHcE,EAAW,GAIzBD,GAHcC,EAAW,GAIzBpH,EAAGnN,EAAEuO,MACLnB,EAAGpN,EAAEsO,OAEP8F,EAAYyB,GACZ3B,GAAc,GAEVO,EAAc3S,SAChB2S,EAAc3S,QAAQjJ,UAAUC,IAAI,SA8CpCgd,UA1CkB,KACpB5B,GAAc,GAEVO,EAAc3S,SAChB2S,EAAc3S,QAAQjJ,UAAUsJ,OAAO,QAGrC4R,GACFA,EAAMQ,EAAW,GAAIA,EAAW,KAmChC9M,YArBqBzH,IACvB,GAAIiU,EAAY,CACd,MAAMa,EAZV,SAA0B3H,EAAWC,GACnC,MAAM0H,EAAgB,IAAIP,GACpBwB,EAAS5B,EAAShH,EAAIA,EACtB6I,EAAS7B,EAAS/G,EAAIA,EAI5B,OAHA0H,EAAc,GAAKX,EAASE,GAAK0B,EACjCjB,EAAc,GAAKX,EAASG,GAAK0B,EAE1BlB,EAKiBmB,CAAiBjW,EAAEuO,MAAOvO,EAAEsO,OAClDkG,EAAcM,GAEVJ,EAAgB5S,UAClB4S,EAAgB5S,QAAQjH,MAAM6a,UAAa,UAASnB,EAAWoB,kBAiBjE,0BACEtS,IAAKqR,EACL9W,UAAU,iBAET6V,O,yBC5KT,MAyDA,IAAe9X,EAAAA,EAAAA,KACb,CAACC,EAAD,KAAyD,IAAhD,OAAE0M,EAAF,UAAUE,EAAV,SAAqBnM,GAA2B,EACvD,GAAIA,GAAYiM,EACd,MAAO,CACL4N,QAAQC,EAAAA,EAAAA,IAAS7N,IAAUQ,EAAAA,EAAAA,IAAWlN,EAAQ0M,IAAUS,EAAAA,EAAAA,IAAWnN,EAAQ0M,IAI/E,IAAKE,IAAcF,EACjB,MAAO,GAGT,MAAMvN,GAAU4N,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,GAElD,MAAO,CACLzN,QAAAA,EACAmb,OAAQnb,IAAWqb,EAAAA,EAAAA,IAAaxa,EAAQb,MAhB9C,EAvD8C,IAMxC,IANyC,OAC7CuN,EAD6C,UAE7CE,EAF6C,OAG7C0N,EAH6C,SAI7C7Z,EAJ6C,QAK7CtB,GACI,EACJ,MAAM,iBACJsb,EADI,aAEJC,EAFI,eAGJC,IACE5Z,EAAAA,EAAAA,MAEE6Z,GAAqBvZ,EAAAA,EAAAA,KAAY,KACrCoZ,IAEIrY,EAAAA,GACFgE,YAAW,KACTuU,GAAe,EAAO,CAAEE,gBAAgB,IACxCH,EAAa,CAAEhO,OAAAA,EAAQE,UAAAA,MArBJ,KAwBrB8N,EAAa,CAAEhO,OAAAA,EAAQE,UAAAA,MAExB,CAACF,EAAQgO,EAAcC,EAAgB/N,EAAW6N,IAE/CnZ,GAAOC,EAAAA,EAAAA,KAEb,IAAK+Y,IAAYnb,IAAYsB,EAC3B,OAGF,MAAMqa,GAAcC,EAAAA,EAAAA,IAAezZ,EAAMgZ,GAEzC,OACE,0BAAKtY,UAAU,aAAaE,QAAS0Y,IAClCL,EAAAA,EAAAA,IAASD,EAAO/b,IACf,mBAACyc,GAAA,EAAD,CAAQvP,IAAK6O,EAAO/b,GAAIuD,KAAK,SAASmZ,KAAMX,IAE5C,mBAACU,GAAA,EAAD,CAAQvP,IAAK6O,EAAO/b,GAAIuD,KAAK,SAASoZ,KAAMZ,IAE9C,0BAAKtY,UAAU,QACb,0BAAKA,UAAU,QAAQsC,IAAI,QACxBwW,IAAeK,EAAAA,GAAAA,GAAWL,IAE7B,0BAAK9Y,UAAU,OAAOsC,IAAI,QACvB7D,EACGa,EAAK,gCACL8Z,EAAAA,EAAAA,IAAoB9Z,EAAsB,IAAhBnC,EAASkc,MAAa,SCtE9D,GANwE,IAA4B,IAA3B,SAAExD,KAAaxK,GAAY,EAClG,OAAIzE,EAAAA,GAAqBiP,GAAS,GAAM,EAAM,GAEvC,mBAACyD,EAAA,EAAejO,EAAQwK,ICmHjC,IAAe/X,EAAAA,EAAAA,KApGoB,IAA+B,IAA9B,QAAEyb,EAAF,aAAWC,GAAmB,EAChE,MAAM,qBAAEjR,IAAyBE,EAAAA,EAAAA,GAAkB8Q,GAC7CE,GAAcC,EAAAA,EAAAA,GAAqBH,GAEnCI,GAAW5V,EAAAA,EAAAA,IAAyB,OACnCiS,EAAW4D,IAAgBtY,EAAAA,EAAAA,IAAS,GACrC2C,GAAYF,EAAAA,EAAAA,KAAgB,IAElCxC,EAAAA,EAAAA,KAAU,KACJgY,IAAYE,GACdG,EAZmB,OAcpB,CAACL,EAASE,IAEb,MAYMxU,GAAkB5F,EAAAA,EAAAA,KAAY,KAClC4E,EAAUC,SAAU,IACnB,IAEGgB,GAAiB7F,EAAAA,EAAAA,KAAY,KACjC4E,EAAUC,SAAU,EACF,IAAd8R,GACFwD,EAAaxD,GAAY/R,EAAUC,WAEpC,CAACsV,EAAcxD,KAMlBzU,EAAAA,EAAAA,KAAU,KACRiY,EAAaxD,GAAY/R,EAAUC,WAClC,CAAC8R,EAAWwD,IAEf,MAAMla,GAAOC,EAAAA,EAAAA,KAEPS,GAAYmC,EAAAA,EAAAA,GAChB,eACAoG,GAGF,OACE,0BAAKvI,UAAWA,GACd,mBAACJ,EAAA,EAAD,CACEia,SA3DsB,IA2DZ7D,EACVlW,KAAK,OACLC,MAAM,oBACNI,UAAWb,EAAK,WAChBU,UAAU,WACV2F,QAASvF,EAAAA,GACTF,QA/CgB,KAChByZ,EAASzV,SACX0V,EAAalZ,KAAKqE,IApBM,EAoBciR,EAAY,OA+ChD,wBAAGhW,UAAU,mBAEf,mBAACJ,EAAA,EAAD,CACEia,SAvEsB,IAuEZ7D,EACVlW,KAAK,OACLC,MAAM,oBACNI,UAAU,UACVH,UAAU,UACV2F,QAASvF,EAAAA,GACTF,QApDe,KACfyZ,EAASzV,SACX0V,EAAalZ,KAAKsE,IA3BM,EA2BcgR,EAAY,OAoDhD,wBAAGhW,UAAU,kBAEf,0BAAKA,UAAU,YACb,0BAAKA,UAAU,kBACb,0BACEA,UAAU,kBACV/C,MAAQ,UAnFK,IAmFK+Y,EAAY,QAEhC,4BACEvQ,IAAKkU,EACL3U,IAxFkB,EAyFlBD,IA1FkB,EA2FlB+U,KAAK,MACL7J,MAAO+F,EACP+D,KAAK,QACL/Z,UAAU,iBACVga,SArDoB5X,IAC5BwX,EAAalZ,KAAKsE,IA3CQ,EA2CYtE,KAAKqE,IAAIkV,OAAO7X,EAAE8G,OAAO+G,OA1CrC,MA+FlB+H,YAAa/S,EACbiT,UAAWhT,UClCjB4J,GAAqB,IAud3B,IAAehR,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OACJ0M,EADI,SAEJC,EAFI,UAGJC,EAHI,cAIJC,EAJI,kBAKJC,EALI,OAMJjQ,GACEmD,EAAOkc,aACL,eACJ3O,GACEvN,EAAOmc,SAASC,MAEpB,GAAIvf,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAM8O,IAAUE,EACd,MAAO,CAAEW,eAAAA,GAGX,MAAMpO,GAAU4N,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,GAClD,OAAKzN,EAIE,CACLuN,OAAAA,EACAE,UAAAA,EACAI,SAAU7N,EAAQ6N,SAClBnQ,OAAAA,EACAsC,QAAAA,EACAoO,eAAAA,GATO,CAAEA,eAAAA,GAab,GAAIV,EAGF,MAAO,CACLD,WAAY,EACZI,SAAUH,EACVI,aALaC,EAAAA,EAAAA,IAAWlN,EAAQ6M,KAAkBM,EAAAA,EAAAA,IAAWnN,EAAQ6M,GAMrEC,kBAAmBA,GAAqB,EACxCS,eAAAA,EACA1Q,OAAAA,GAIJ,KAAM6P,GAAUC,GAAYC,GAC1B,MAAO,CAAEW,eAAAA,GAGX,IAAIpO,EAWAkd,EAOAC,EAXJ,GALEnd,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjFuQ,EAAAA,EAAAA,IAAuBpN,EAAQ0M,EAAQE,IAEvCG,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,IAGzCzN,EACH,MAAO,CAAEoO,eAAAA,GAYX,GANE8O,EADExf,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IAC5E0f,EAAAA,EAAAA,IAAwBvc,EAAQ0M,IAEhC8P,EAAAA,EAAAA,IAAmBxc,EAAQ0M,GAIxC7P,IAAWe,EAAAA,GAAAA,QAA4Bf,IAAWe,EAAAA,GAAAA,MACpD0e,GAAgBG,EAAAA,EAAAA,IAAkBzc,EAAQ0M,EAAQC,KAAa+P,EAAAA,EAAAA,IAAgB1c,EAAQ0M,EAAQC,QAC1F,GAAI9P,IAAWe,EAAAA,GAAAA,YAA+B,CACnD,MAAM+e,GAAgBC,EAAAA,EAAAA,IAAyB5c,IACzC,SAAE6c,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,GAC5GT,EAAgBO,EAGlB,MAAO,CACLnQ,OAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAI,SAAU7N,EAAQ6N,SAClBnQ,OAAAA,EACAsC,QAAAA,EACAkd,aAAAA,EACAC,cAAAA,EACA/O,eAAAA,KAxFcxN,EArdgB,IAY9B,IAZ+B,OACnC2M,EADmC,SAEnCC,EAFmC,UAGnCC,EAHmC,SAInCI,EAJmC,OAKnCnQ,EALmC,YAMnCoQ,EANmC,kBAOnCH,EAPmC,QAQnC3N,EARmC,aASnCkd,EATmC,cAUnCC,EAVmC,eAWnC/O,GACI,EACJ,MAAM,gBACJyP,EADI,iBAEJvC,EAFI,gBAGJwC,EAHI,aAIJvC,EAJI,eAKJC,IACE5Z,EAAAA,EAAAA,MAEEY,EAASwH,QAAQ8D,GAAeL,GAEhC2B,EAAoB1R,IAAWe,EAAAA,GAAAA,YAC/B4Q,EAAe3R,IAAWe,EAAAA,GAAAA,aAG1B+P,EAAQxO,GAAUyO,EAAAA,EAAAA,IAAgBzO,QAAW8C,EAC7CuH,EAAQrK,GAAU0O,EAAAA,EAAAA,IAAgB1O,QAAW8C,EAC7C6L,EAAe3O,GAAU4O,EAAAA,EAAAA,IAAuB5O,QAAW8C,EAC3D+L,EAAe7O,GAAU8O,EAAAA,EAAAA,IAAuB9O,QAAW8C,EAC3DiM,KAAkB/O,IAAUgP,EAAAA,EAAAA,IAAuBhP,GACnDiP,KAAkBjP,IAAUkP,EAAAA,EAAAA,IAAuBlP,GACnDmB,GAAU6I,QAAQK,GAASwE,GAAgBI,KAC3C,MAAElG,IAAUsB,GAASwE,GAAgB,GACrCM,GAAUnF,SAAS7I,KAAYqN,GAASG,GAAgBI,KACxDzN,GAAW0I,QAAQ8D,GAGnBiQ,GAAkBpP,GAAgBE,EAAepB,OAAY3K,EAE7Dkb,IAAa1b,EAAAA,EAAAA,KAAQ,IAClByb,GACH,CAACA,KACDE,EAAAA,EAAAA,IAAuBf,GAAgB,GAAIC,GAAiB,GAAI/N,IACnE,CAAC2O,GAAiBb,EAAcC,EAAe/N,IAE5C8O,GAA4BzQ,EAAYuQ,GAAWG,QAAQ1Q,IAAc,EACzE2Q,GAAwC,IAA9BF,KAAkE,IAA/BA,GAC7CG,GAASH,KAA8BF,GAAWzd,OAAS,IAAoC,IAA/B2d,GAGhEI,IAAe1X,EAAAA,EAAAA,MACf2X,IAAehC,EAAAA,EAAAA,GAAgC1O,IACjDrL,GAAY+b,IAAgBA,KAAiB1Q,GAAayQ,GAAavX,UACzEuX,GAAavX,QAAUmX,IAEzB,MAAMM,GAAiBpQ,GAAkB,IAAM3E,EAAAA,GAAe,WAAa,OACrEgV,GAAqC,IAAnBrQ,EAAuB,aAAe,OACxDkB,GAAsC,IAAnBlB,GAGlBsQ,GAAgBC,KAAqBxa,EAAAA,EAAAA,KAAS,IAC9C/C,GAAUwd,KAAeza,EAAAA,EAAAA,KAAkB,IAC3C0U,GAAW4D,KAAgBtY,EAAAA,EAAAA,IAAiB,IAC5C2P,GAAU+K,KAAe1a,EAAAA,EAAAA,IAAS,CACvCiO,EAAG,EACHC,EAAG,IAIL,SAAS9C,GAAaC,GACpB,GAAIlO,SAAkCwB,IAAtB6K,EAAiC,CAC/C,MAAM,OAAE8B,GAAW3B,EACnB,OAAO2B,GAAUA,EAAO9B,GACnB,QAAO8B,EAAO9B,GAAmBvO,aAClCsQ,EAAAA,EAAAA,IAAkB5B,EAAc0B,EAAS,MAAQ,UAGvD,OAAOxP,IAAWgC,EAAAA,EAAAA,IAAoBhC,EAASwP,EAAS,aAAe,iBAGzE,MAAMG,IAAmBC,EAAAA,EAAAA,GACvB5P,IAAYoP,GAAqBC,KAAiBrN,EAAAA,EAAAA,IAAoBhC,EAAS,kBAC/E8C,EACA+M,EAAAA,GAAAA,aACA/M,EACAwM,IAAoBqC,IAEhB7B,GAAmBP,KACnBQ,IAAiBH,EAAAA,EAAAA,GACrBE,QACAhN,EACA+M,EAAAA,GAAAA,aACA/M,EACAwM,IAAoBqC,KAEdzQ,UAAW8O,KAAqBjO,EAAAA,EAAAA,GACtCwN,IAAa,QACbzM,EACA9C,IAAWiQ,EAAAA,EAAAA,IAAsBjQ,EAAS,mBAC1C8C,EACAwM,IAAoBqC,IAGhBzB,GAAgB1B,GAASnE,GAAUmE,GAASnE,GAAQ8F,aAAUrN,EACpE,IAAIsN,IAAkBjP,KAAY+O,IAAgBF,KAAsBD,IAAkBJ,GAC1F,MAAMU,IAAeC,EAAAA,EAAAA,IAAaF,IAAiBpQ,IAAWuQ,EAAAA,EAAAA,IAA4BvQ,IACrFoQ,IAAiB1S,IAAWe,EAAAA,GAAAA,eAC/B2R,GAAgBC,IAGlB,MAAMhP,GAAWrB,GACb8e,EAAAA,EAAAA,IAAmB9e,GACnBsB,GACG,SAAQwM,EAAa1O,MAAMuO,aAC5B7K,EAEN,IAAI4N,GACA1Q,EACE+O,IAAmBE,GACrByB,IAAaC,EAAAA,EAAAA,IAAmB3Q,GAAU4Q,UACjCpC,GAASG,EAClB+B,IAAaG,EAAAA,EAAAA,IAAwBrC,GAASG,IACrCtE,GAASwE,KAClB6B,IAAaI,EAAAA,EAAAA,IAAoBzG,GAASwE,IAG5C6B,GAAaK,EAAAA,IAGf3M,EAAAA,EAAAA,KAAU,KACHnB,EAAAA,IAILrF,SAASuJ,KAAKrJ,UAAUihB,OAAO,uBAAwBvc,KACtD,CAACA,IAEJ,MAAMmQ,IAAcC,EAAAA,EAAAA,MACpBxO,EAAAA,EAAAA,KAAU,KACR,MAAM4a,EAAMpa,OAAOqa,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAIna,iBACbma,EAAIna,iBAAiB,SAAU8N,IACK,mBAApBqM,EAAIG,aACpBH,EAAIG,YAAYxM,IAGX,KACkC,mBAA5BqM,EAAIla,oBACbka,EAAIla,oBAAoB,SAAU6N,IACK,mBAAvBqM,EAAII,gBACpBJ,EAAII,eAAezM,OAGtB,CAACA,KAEJ,MAAM0M,IAAc9C,EAAAA,EAAAA,GAAoCvc,GAClDsf,IAAa/C,EAAAA,EAAAA,GAAY7e,GACzB6hB,IAAkBhD,EAAAA,EAAAA,GAA2CzO,GAC7D0R,IAAoBjD,EAAAA,EAAAA,GAAYnM,IAChCc,GAAYlR,GAAUmR,EAAAA,EAAAA,GAAkBnR,QAAW8C,EACnDsO,GAAYpH,QAAQkH,KAE1B9M,EAAAA,EAAAA,KAAU,KACJkL,IAAoB9M,IAAW6c,KAAgBE,MACjDE,EAAAA,EAAAA,IAA4B9N,GAAqB+N,EAAAA,IbxOhD,SACLtO,EACA1T,EACA0S,EACAM,EACAvP,EACAnB,GAEA,MAAQM,QAASqf,GAAc5f,EAASrC,EAAQsC,GAChD,IAAK2f,EACH,OAGF,MAAQrY,MAAOsY,GAAgBC,EAAAA,EAAAA,OAE7BvY,MAAOwY,EAAgBvb,OAAQwb,IAC7BC,EAAAA,EAAAA,IAAkC5O,EAAWjQ,IACzCmG,MAAO2Y,EAAS1b,OAAQ2b,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiBrP,EAAWpJ,MAAOoJ,EAAWnM,QAE1D6b,GAAUR,EAAcK,GAAW,EACnCI,EAyPR,SAAsBjP,GACpB,MAAM4N,EAAMpa,OAAOqa,WAAWC,EAAAA,IAC9B,IAAIoB,EAAe,MAKnB,OAJIlP,IAAc3H,EAAAA,KAChB6W,GAAgBtB,EAAI1G,QAAU,KAAQ,OAGjCgI,EAAe7b,EAAAA,GAhQR8b,CAAanP,IAAc2O,EAAkBG,GAAY,EAEvE,IACEvI,IAAK6I,EAASjZ,KAAMkZ,EAAUnZ,MAAOoZ,EAAWnc,OAAQoc,GACtDhB,EAAUnY,wBAEd,GAAI,CACF/I,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,GAAS,CAClB,MAAMkjB,EAiMV,SAAiBC,EAAmBC,EAAoBnJ,EAAapQ,EAAcD,EAAe/C,GAChG,GAAIsc,IAAcC,EAAY,CAC5B,MAAMne,EAAOY,KAAKqE,IAAIN,EAAO/C,IAAWsc,EAAYC,GACpDvZ,IAAS5E,EAAO2E,GAAS,EACzBqQ,IAAQhV,EAAO4B,GAAU,EACzB+C,EAAQ3E,EACR4B,EAAS5B,OACJ,GAAIke,EAAYC,EAAY,CACjC,MAAMC,EAAWzZ,EAEjBC,KADAD,EAAQ/C,GAAUsc,EAAYC,IACbC,GAAY,OACxB,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYzc,EAElBoT,KADApT,EAAS+C,GAASwZ,EAAaD,IACdG,GAAa,EAGhC,MAAO,CACLrJ,IAAAA,EAAKpQ,KAAAA,EAAMD,MAAAA,EAAO/C,OAAAA,GAnNA0c,CAAQhB,EAASC,EAAUM,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAUjJ,IACpB8I,EAAWG,EAAUrZ,KACrBmZ,EAAYE,EAAUtZ,MACtBqZ,EAAaC,EAAUrc,OAGzB,MAAM2c,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE1BviB,EAAQH,EAAY4S,GAAiBuP,GAC3ClgB,EAAY9B,EAAO,CACjBga,IAAM,GAAE0I,MACR9Y,KAAO,GAAE6Y,MACT9Y,MAAQ,GAAE2Y,MACV1b,OAAS,GAAE2b,MACXvF,UAAY,eAAcuG,QAAqBC,iBAA8BC,MAAeC,OAE9F7gB,EAAW7C,EAAOD,GAElBE,SAASuJ,KAAKrJ,UAAUC,IAAI,mBAE5BujB,uBAAsB,KACpB1jB,SAASuJ,KAAK3I,YAAYb,GAE1B2jB,uBAAsB,KACpB3jB,EAAMmC,MAAM6a,UAAY,GAyS9B,SAAoBhd,GACjBA,EAAM8C,WAA2BX,MAAMY,UAAY,UACpD/C,EAAMG,UAAUsJ,OAAO,kBAAmB,UA1StCma,CAAW5jB,GAEXsJ,YAAW,KACTqa,uBAAsB,KAChB1jB,SAASuJ,KAAKqa,SAAS7jB,IACzBC,SAASuJ,KAAKsa,YAAY9jB,GAE5BC,SAASuJ,KAAKrJ,UAAUsJ,OAAO,wBAvEd,IAyEGsY,EAAAA,UakKxBgC,CAAetQ,GAAW1T,EAAS0S,GAAgBM,GAAYvP,GAASnB,IAGtEsP,KAAqB9M,IAAW6c,IAAeE,OACjDE,EAAAA,EAAAA,IAA4B9N,GAAqB+N,EAAAA,IbjKhD,SAAwBhiB,EAA2B0S,EAAuBpQ,GAC/E,MAAM,UAAElB,EAAWwB,QAASqhB,GAAY5hB,EAASrC,EAAQsC,GACzD,IAAK2hB,EACH,OAGF,MAAMhC,EAAY/hB,SAASgkB,eAAe,eAAgBjjB,cACxD,kEAEF,IAAKghB,IAAcgC,EACjB,OAGF,MACEhK,IAAK6I,EAASjZ,KAAMkZ,EAAUnZ,MAAOoZ,EAAWnc,OAAQoc,GACtDhB,EAAUnY,yBAEZmQ,IAAKkK,EAAWta,KAAM6Y,EAAQ9Y,MAAO2Y,EAAS1b,OAAQ2b,GACpDyB,EAAQna,wBAEZ,IAAI6Y,EAAQwB,EACZ,IAuJF,SAA6BC,GAC3B,GAAyB,SAArBA,EAAGhiB,MAAMiiB,QACX,OAAO,EAGT,MAAMC,EAAOF,EAAGta,yBACRjD,OAAQ0d,GAAiBpC,EAAAA,EAAAA,MAEjC,OAAQmC,EAAKrK,KAAOsK,GAAmBD,EAAKrK,IAAMqK,EAAKzd,QAAW,EA/J7D2d,CAAoBpjB,GAAY,CACnC,MAAQyF,OAAQ0d,GAAiBpC,EAAAA,EAAAA,MACjCQ,EAAQwB,EAAYrB,GAAWN,EAAW+B,EAG5C,MAAMf,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GACxE,IAAIkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE9B,MAAMiC,EACJ,CAAC1jB,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAAS3B,KACnEmB,EAA2BC,EAAW6iB,IAE1C,CAACljB,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAAS3B,KACjEmB,EAA2BC,EAAW6iB,GAGxC,CACFljB,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,KACL0jB,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMgB,EAAgBxkB,SAASykB,uBAAuB,SAAS,GAEzD1kB,EAAQykB,GAAiB5kB,EAAY4S,GAAiBuR,EAASjkB,GAChE0kB,GACH3iB,EAAY9B,EAAO,CACjBga,IAAM,GAAE0I,MACR9Y,KAAO,GAAE6Y,MACT9Y,MAAQ,GAAE2Y,MACV1b,OAAS,GAAE2b,MACXvF,UAAY,eAAcuG,QAAqBC,iBAA8BC,MAAeC,OAIhGC,uBAAsB,KACpB,GAAIc,EAAe,CACjB,MAAM,IACJzK,EADI,KAEJpQ,EAFI,MAGJD,EAHI,OAIJ/C,GACE6d,EAAc5a,wBAIlB/H,EAAY9B,EAAO,CACjB2kB,WAAY,OACZ3K,IAAM,GAAE0I,MACR9Y,KAAO,GAAE6Y,MACTmC,gBAAiB,WACjB5H,UAAY,eAAcpT,EAAO6Y,QAAazI,EAAM0I,iBARvC/Y,EAAQ2Y,MACR1b,EAAS2b,KAQtB5Y,MAAQ,GAAE2Y,MACV1b,OAAS,GAAE2b,QAGftiB,SAASuJ,KAAKrJ,UAAUC,IAAI,mBACvBqkB,GAAexkB,SAASuJ,KAAK3I,YAAYb,GAE9C2jB,uBAAsB,KAChBc,IACFA,EAActiB,MAAMwiB,WAAa,IAGnC3kB,EAAMmC,MAAM6a,UAAY,GAEpBwH,IACFxkB,EAAMmC,MAAM0iB,QAAU,KAGxBhiB,EAAW7C,EAAOD,GAElBuJ,YAAW,KACTqa,uBAAsB,KAChB1jB,SAASuJ,KAAKqa,SAAS7jB,IACzBC,SAASuJ,KAAKsa,YAAY9jB,GAE5BC,SAASuJ,KAAKrJ,UAAUsJ,OAAO,wBAzLd,IA2LGsY,EAAAA,UaqDxB+C,CAAenD,GAAaE,GAAoBH,SAAevc,MAEhE,CACDwM,GAAkB9M,EAAQ9E,EAAQ4hB,GAAYtf,EAASqf,GAAaE,GACpEnP,GAAeoP,GAAmB9O,GAAYvP,GAASiQ,MAGzDhN,EAAAA,EAAAA,KAAU,KACR,IAAIse,EAUJ,OARIthB,GACFud,IAAkB,GAElB+D,EAAQ9d,OAAOqC,YAAW,KACxB0X,IAAkB,KACjBhN,IAGE,KACD+Q,GACF9d,OAAOsC,aAAawb,MAGvB,CAACthB,KAEJ,MAAMuhB,GAAY,KAChB/D,IAAY,GACZnC,GAAa,GACboC,GAAY,CACVzM,EAAG,EACHC,EAAG,KAIDuQ,IAAmB1gB,EAAAA,EAAAA,KAAY,KACnC0c,IAAaxd,IACbqb,GAAcrb,GAAiB,EAAN,KACrBA,IACFyd,GAAY,CACVzM,EAAG,EACHC,EAAG,MAGN,CAACjR,KAEEyhB,IAAkB3gB,EAAAA,EAAAA,KAAY,SAAC4gB,GAAwC,IAAzBC,EAAyB,wDAC3EtG,GAAaqG,GACC,IAAVA,GAAeC,GACjBJ,OAED,IAEGK,IAAQ9gB,EAAAA,EAAAA,KAAY,KACxBoZ,IACAqH,OACC,CAACrH,IAEE2H,IAAoB/gB,EAAAA,EAAAA,KAAY,KACpC8gB,KAEI/f,EAAAA,GACFgE,YAAW,KACTuU,GAAe,EAAO,CAAEE,gBAAgB,IACxCH,EAAa,CAAEhO,OAAAA,EAAQC,SAAAA,EAAUC,UAAAA,MAChCkE,IAEH4J,EAAa,CAAEhO,OAAAA,EAAQC,SAAAA,EAAUC,UAAAA,MAElC,CAACuV,GAAOzV,EAAQC,EAAU+N,EAAcC,EAAgB/N,IAErDyV,IAAgBhhB,EAAAA,EAAAA,KAAY,KAChC4b,EAAgB,CACdqF,WAAY5V,EACZyQ,WAAY,CAACvQ,KAEfkV,OACC,CAAC7E,EAAiBvQ,EAAQE,IAEvBsE,IAAgB7P,EAAAA,EAAAA,KAAa9C,GAAgBye,EAAgB,CACjEtQ,OAAAA,EACAC,SAAAA,EACAC,UAAWrO,EACX1B,OAAAA,GACC,CACD0lB,uBAAuB,KACrB,CAAC7V,EAAQsQ,EAAiBngB,EAAQ8P,KAEtCpJ,EAAAA,EAAAA,KAAU,IAAO5B,GAAS6gB,EAAAA,EAAAA,IAAsB,KAC1CjiB,GACFuhB,KAEAK,aAEClgB,GAAY,CAACkgB,GAAOxgB,EAAQpB,MAEjCgD,EAAAA,EAAAA,KAAU,KACJjD,KAAY4H,KACdua,EAAAA,EAAAA,QAED,CAACva,GAAO5H,MAGXiD,EAAAA,EAAAA,KAAU,KACR,GAAK5B,EAML,OAFAqd,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAACrd,IAEJ,MAAMsP,IAAe5P,EAAAA,EAAAA,KAAY,CAACqhB,EAAiBhP,KACjD,IAAKgP,EAAQ,OACb,MAAMC,EAAQxF,GAAWG,QAAQoF,GACjC,OAAoB,IAAfhP,GAAoBiP,EAAQ,GAAqB,IAAdjP,GAAmBiP,EAAQxF,GAAWzd,OAAS,EAC9Eyd,GAAWwF,EAAQjP,QAD5B,IAIC,CAACyJ,KAEEjG,GAAgBjG,GAAarE,EAAW,GACxCuK,GAAoBlG,GAAarE,GAAY,GAE7CgW,IAAYvhB,EAAAA,EAAAA,KAAY,CAACkQ,EAAWC,KACxCwM,GAAY,CACVzM,EAAAA,EACAC,EAAAA,MAED,IAEGlQ,IAAOC,EAAAA,EAAAA,KAoEb,OAlEAshB,EAAAA,EAAAA,IAAelhB,EAAQ8Y,EAAkBuC,EAAiB,CACxDtQ,OAAAA,EACAC,SAAAA,EACAC,UAAAA,EACA/P,OAAAA,EACAgQ,cAAeI,GAAeA,EAAY1O,MAG5CgF,EAAAA,EAAAA,KAAU,KACR,GAAK5B,EAoBL,OAFA5E,SAASiH,iBAAiB,UAAW8e,GAAe,GAE7C,KACL/lB,SAASkH,oBAAoB,UAAW6e,GAAe,IAjBzD,SAASA,EAAc1e,GACrB,OAAQA,EAAEqH,KACR,IAAK,OACL,IAAK,YACHyF,GAAciG,IACd,MAEF,IAAK,QACL,IAAK,aACHjG,GAAcgG,QAUnB,CAACvV,EAAQuV,GAAeC,GAAmBjG,MAE9C3N,EAAAA,EAAAA,KAAU,KACR,GAAIhD,IAAYqI,EAAAA,GAAc,OAC9B,MAAM/J,EAAU9B,SAASe,cAA8B,6BACvD,IAAKe,EACH,OAGF,MAAMkkB,EAAqB7a,KAAUW,EAAAA,GAErC,OAAO1B,EAAAA,EAAAA,IAActI,EAAS,CAE5BuV,wBAA0B,8EAA6E2O,EAAwC,GAAnB,kBAC5H7gB,QAASigB,OAEV,CAACA,GAAOja,GAAO3H,GAAUqM,IAmB1B,mBAACoW,EAAA,EAAD,CACEzkB,GAAG,cACHyD,UAAWzB,GAAW,SAAW,GACjCoB,OAAQA,GAER,0BAAKK,UAAU,oBAAoBsC,IAAKhD,GAAK2hB,MAAQ,WAAQhhB,GAC1DG,EAAAA,IACC,mBAACR,EAAA,EAAD,CACEI,UAAU,qBACVH,OAAK,EACLC,KAAK,UACLC,MAAM,oBACNI,UAAWb,GAAK,SAChBY,QAASigB,IAET,wBAAGngB,UAAU,gBAGjB,mBAACsZ,EAAA,EAAD,CAAY4H,UAAWzF,GAAavX,QAAUid,KAAMvF,IAlCjDnd,GACL,mBAAC,GAAD,CACEgL,IAAKwB,EAAa1O,GAClBmO,OAAQO,EAAa1O,GACrBkC,UAAQ,IAGV,mBAAC,GAAD,CACEgL,IAAKmB,EACLF,OAAQA,EACRE,UAAWA,KA2BX,mBAAC,EAAD,CACEvM,UAAW8O,IAAoBD,GAC/B5O,QAASA,GACTC,SAAUA,GACVpB,QAASA,EACTqB,SAAUA,GACVE,mBAAoByhB,GACpBxhB,UAAW0hB,GACXzhB,aAAcmhB,GACdthB,SAAUA,MAGd,mBAAC,GAAD,CACEqX,QAAS+F,GACT9F,OAAQxX,GACR0X,UAAWhF,GAAS1B,EACpB2G,UAAWjF,GAASzB,EACpBwG,UAAWA,GACXG,MAAOyK,IAEP,mBAAC,GAAD,CACEM,UAAW7F,GACX8F,KAAMxF,KAEJrQ,GACA,mBAAC,GAAD,CACEV,UAAWA,EACXqE,aAAcA,GACdvE,OAAQA,EACR4B,QAASA,GACTpG,MAAOA,GACPyE,SAAUA,EACVE,cAAeI,GAAeA,EAAY1O,GAC1CuO,kBAAmBA,EACnBjQ,OAAQA,EACR8E,OAAQA,EACR4O,UAAWA,GACXhQ,SAAUA,GACV+M,SAAUA,EACVhN,QAASA,GACTiN,eAAgBA,EAChBhF,QAAS4Z,GACTjR,cAAeA,GACf1D,cAAe4U,SAKrB7E,KAAY3U,EAAAA,IACZ,6BACEmT,KAAK,SACL/Z,UAAY,mBAAkB1B,KAAY4H,IAAS,WACnD,aAAY5G,GAAK,oBACjBgD,IAAKhD,GAAK2hB,MAAQ,WAAQhhB,EAC1BC,QAAS,IAAMgP,GAAciG,OAG/BqG,KAAW5U,EAAAA,IACX,6BACEmT,KAAK,SACL/Z,UAAY,mBAAkB1B,KAAY4H,IAAS,WACnD,aAAY5G,GAAK,QACjBgD,IAAKhD,GAAK2hB,MAAQ,WAAQhhB,EAC1BC,QAAS,IAAMgP,GAAcgG,MAGjC,mBAAC,GAAD,CACEqE,QAAShb,GACTib,aAAcwG,U,uIC9ftB,MAiGA,IAAeliB,EAAAA,EAAAA,KAjGwB,IAYjC,IAZkC,OACtC6B,EADsC,cAEtCyhB,EAFsC,cAGtCC,EAHsC,UAItCC,EAJsC,OAKtCC,EALsC,kBAMtCC,EANsC,SAOtCC,EAPsC,eAQtCC,EARsC,mBAStCC,EATsC,QAUtCpb,EAVsC,oBAWtCqb,GACI,EACJ,MAAMtiB,GAAOC,EAAAA,EAAAA,MACNsiB,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBN,EAAUJ,EAAela,QAAQoa,IAE5ES,GAAc3iB,EAAAA,EAAAA,KAAY,KAC9BqiB,EAAe,MACd,CAACA,KACJO,EAAAA,GAAAA,GAAoBX,EAAW3hB,EAAQqiB,GAGvC,MAAM5S,GAAerL,EAAAA,EAAAA,IAAuB,MACtCme,GAAqB7iB,EAAAA,EAAAA,KAAa+C,IACtCsf,EAAetf,EAAEgH,cAAc6G,SAC9B,CAACyR,IACEZ,GAAgBqB,EAAAA,GAAAA,GAA0B/S,EAAczP,GAASghB,IACjEkB,GAAeA,EAAYnkB,OAAS,GACtCikB,EAAmBE,GAAuB,IAAXlB,EAAe,EAAIA,MAEnD,oBAAoB,GAEjByB,EACJ,0BAAKpiB,UAAU,eAAesC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACtD,mBAACL,EAAA,EAAD,CACEC,OAAK,EACLE,MAAM,cACND,KAAK,UACLK,UAAWb,EAAK,SAChBY,QAASqG,GAET,wBAAGvG,UAAU,gBAEf,mBAACqiB,GAAA,EAAD,CACE5c,IAAK6b,EACLrR,MAAOsR,EACPvH,SAAUkI,EACVI,UAAWxB,EACXyB,YAAaf,KAKbgB,EAAiBnB,EAAe/F,QAAQuG,EAAa,IAE3D,OACE,mBAACY,GAAA,EAAD,CACE9iB,OAAQA,EACRK,UAAU,mBACV0iB,OAAQN,EACR7b,QAASA,EACTqb,oBAAqBA,GAEpBC,MAAAA,GAAAA,EAAankB,OACZ,mBAACilB,GAAA,EAAD,CACEld,IAAK2J,EACLpP,UAAU,4BACV4iB,MAAOf,EACPgB,WAAYf,EACZgB,yBAAuB,EACvBC,UAAW1B,EAAe3jB,OAASslB,EAAAA,GACnCV,UAAWxB,GAEVe,EAAYoB,KAAI,CAAC1mB,EAAI2mB,IACpB,mBAACC,GAAA,EAAD,CACE1Z,IAAKlN,EACLyD,UAAU,4CACV/C,MAAQ,SAAQulB,EAAiBU,GAAKF,EAAAA,QACtC9iB,QAAS,IAAMyhB,EAAmBplB,KAEjCgc,EAAAA,EAAAA,IAAShc,GACR,mBAAC6mB,GAAA,EAAD,CAAiBC,OAAQ9mB,IAAO6kB,EAAgB9hB,EAAK,0BAAuBW,EAAWqjB,OAAQ/mB,IAE/F,mBAACgnB,GAAA,EAAD,CAAe7Y,OAAQnO,QAK7BslB,IAAgBA,EAAYnkB,OAC9B,wBAAGsC,UAAU,cAAcV,EAAK,+BAEhC,mBAACkkB,GAAA,EAAD,UCfR,IAAe1lB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MACEylB,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJzC,GACEpjB,EAEJ,MAAO,CACL2lB,UAAAA,EACAG,cAAeF,EAAQG,OACvBC,gBAAiBJ,EAAQK,SACzBC,UAAWL,EAAiBE,OAC5BI,WAAU,UAAEnmB,EAAOomB,mBAAT,aAAE,EAAoBC,QAChCjD,cAAAA,KAjBcrjB,EAhF6B,IAQ3C,IAR4C,UAChD4lB,EADgD,cAEhDG,EAFgD,gBAGhDE,EAHgD,UAIhDE,EAJgD,WAKhDC,EALgD,cAMhD/C,EANgD,OAOhDzhB,GACI,EACJ,MAAM,iBACJ2kB,EADI,gBAEJC,IACExlB,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNgiB,EAAQiD,IAAaljB,EAAAA,EAAAA,IAAS,IAE/BggB,GAAYvd,EAAAA,EAAAA,IAAyB,OAEpCwV,EAASkL,EAAaC,IAAiBC,EAAAA,GAAAA,MAC9CpjB,EAAAA,EAAAA,KAAU,KACJ5B,GACF8kB,MAED,CAAC9kB,EAAQ8kB,IAEZ,MAAMG,GAAoBnlB,EAAAA,EAAAA,KAAQ,KAChC,IAAKE,EACH,OAGF,IAAIklB,EAAcX,GAAa,GAC3B9C,IACFyD,GAAcC,EAAAA,GAAAA,IAAO,CAAC1D,KAAkByD,KAG1C,MAAME,EAAU,IACVjB,GAAiB,MACjBE,GAAmB,IACvBzC,QAAQhlB,IACR,MAAM2c,EAAOyK,EAAUpnB,GAEvB,OAAO2c,IAAQ8L,EAAAA,EAAAA,IAAiB9L,EAAM+L,EAAAA,OAIlCC,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAEpC,OAAO2B,EAAAA,EAAAA,KAAYP,EAAAA,GAAAA,IAAO,KACrBQ,EAAAA,EAAAA,IAAkBhmB,EAAMylB,EAASpB,EAAWpC,EAAQH,MACnD+C,GAAaoB,EAAAA,EAAAA,IAAkBpB,EAAYe,EAAW3D,GAAU,KAClEoC,OAAW1jB,EAAW4kB,KACzB,CAACf,EAAeE,EAAiBL,EAAWQ,EAAY/C,EAAeG,EAAQ5hB,EAAQL,EAAM4kB,IAE1FsB,GAAmBnmB,EAAAA,EAAAA,KAAaikB,IACpCgB,EAAiB,CAAE/nB,GAAI+mB,MACtB,CAACgB,IAEEmB,GAA6BC,EAAAA,GAAAA,GAAiBd,GAAmB,GAEvE,GAAKjlB,GAAW4Z,EAIhB,OACE,mBAAC,GAAD,CACE6H,cAAeA,EACfzhB,OAAQA,EACR0hB,cAAeoE,EACfnE,UAAWA,EACXE,kBAAmBliB,EAAK,aACxBiiB,OAAQA,EACRG,eAAgB8C,EAChB7C,mBAAoB6D,EACpBjf,QAASge,EACT3C,oBAAqB8C,Q,eC2D3B,SAASiB,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,WAMX,UAAehoB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB+nB,EAAAA,GAAAA,IAAK/nB,EAAQ,CAAC,aADpBD,EA5JY,IAAiB,IAAhB,QAAEioB,GAAc,EAC/C,MAAM,cACJC,EADI,yBAEJC,EAFI,YAGJC,EAHI,iBAIJC,IACErnB,EAAAA,EAAAA,OACGsnB,EAAaC,EAAWC,IAAc5B,EAAAA,GAAAA,KAEvCrlB,GAAOC,EAAAA,EAAAA,KAoHSinB,IAAAA,EA1CQC,EAyBTb,EA3FrB,IANArkB,EAAAA,EAAAA,KAAU,KACJykB,EAAQtoB,OAAS,GACnB4oB,MAED,CAACN,EAASM,IAERN,EAAQtoB,OAwHb,OACE,0BAAKnB,GAAG,WACL4K,QAAQ6e,EAAQtoB,UAbf,SADgB8oB,EAcuBR,EAAQA,EAAQtoB,OAAS,IAxGhDgpB,CAAAA,IACpB,MAAM,KACJC,EADI,MACEC,EADF,MACSC,EADT,kBACgBC,EADhB,UACmCC,EADnC,MAC8Cpb,EAD9C,gBACqDqb,GACvDN,EAYEO,EACF3nB,EADqBynB,EAChB,cACA,UADeD,EAAmB,KAGrCI,EAAuB5nB,EAAZynB,EAAiB,cAAsB,aAClDI,EACF7nB,EADsBynB,EACjB,sCAA8C,qCAEvD,OACE,mBAACtE,GAAA,EAAD,CACE9iB,OAAQ0mB,EACR9f,QAASggB,EACTvmB,UAAU,QACV0iB,OAAQ0E,EAAmBR,EAAOjb,GAClCiW,oBAAqBqE,QAEEhmB,IAAtB6mB,GAAmC,wBAAG9mB,UAAU,cAAcinB,GAC9DJ,GAAS,wBAAG7mB,UAAU,gBAAemZ,EAAAA,GAAAA,GAAW0N,EAAO,CAAC,QACxDG,GACC,wBAAGhnB,UAAU,cAEPV,EADHynB,EACQ,iDACA,iDAGb,mBAACnnB,EAAA,EAAD,CAAQynB,QAAM,EAACrnB,UAAU,wBAAwBE,QAnC7B,KACtBgmB,EAAyB,CACvBS,KAAAA,IAEFP,EAAiB,CACfjpB,QAAqBmC,EAAZynB,EAAiB,sCAA8C,uCAE1ER,MA6BKS,EAAkBG,EAAoBD,GAEzC,mBAACtnB,EAAA,EAAD,CAAQynB,QAAM,EAACrnB,UAAU,wBAAwBE,QAASqmB,GAAajnB,EAAK,aAiDvEgoB,CAAad,GAGlB,gBAAiBA,GA/COC,EAgDED,EAvC5B,mBAAC/D,GAAA,EAAD,CACE9iB,OAAQ0mB,EACR9f,QAASggB,EACTvmB,UAAU,UACV4mB,MAAOtnB,EAAK,4BACZsiB,oBAAqBqE,GAEpB3mB,EAAK,mCACN,8BACE,mBAACM,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAjBjC,KACpBimB,EAAY,CACVoB,SAASxB,EAAAA,GAAAA,IAAKU,EAAgB,CAAC,YAAa,WAAY,kBAE1DF,MAa8EjnB,EAAK,OAC/E,mBAACM,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASqmB,GAAajnB,EAAK,eAM/DsmB,EA0BAY,EAxBjB,mBAAC/D,GAAA,EAAD,CACE9iB,OAAQ0mB,EACR9f,QAASggB,EACT3E,oBAAqBqE,EACrBjmB,UAAU,QACV4mB,MAAOjB,GAAeC,IAErBA,EAAME,aAAc0B,EAAAA,GAAAA,IAAqB5B,IAASzM,EAAAA,GAAAA,GAAWyM,EAAMzoB,QAAU,CAAC,QAAS,OACxF,8BACE,mBAACyC,EAAA,EAAD,CAAQynB,QAAM,EAACnnB,QAASqmB,GAAajnB,EAAK,YAlGlD,SAAS8nB,EAAmBR,EAAejb,GACzC,OACE,0BAAK3L,UAAU,gBACZ2L,GAAS,mBAACqN,GAAA,EAAD,CAAQlZ,KAAK,QAAQ6L,MAAOA,IACtC,0BAAK3L,UAAU,gBACZmZ,EAAAA,GAAAA,GAAWyN,IAEd,mBAAChnB,EAAA,EAAD,CAAQC,OAAK,EAACE,MAAM,cAAcD,KAAK,UAAUK,UAAWb,EAAK,SAAUY,QAASqmB,GAClF,wBAAGvmB,UAAU,sB,eCtCvB,MAmBA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB+nB,EAAAA,GAAAA,IAAK/nB,EAAQ,CAAC,mBADpBD,EAnBkB,IAAuB,IAAtB,cAAE0pB,GAAoB,EAC3D,MAAM,oBAAEC,IAAwB3oB,EAAAA,EAAAA,MAEhC,GAAK0oB,EAAc/pB,OAInB,OACE,0BAAKnB,GAAG,iBACLkrB,EAAcxE,KAAI,QAAC,QAAE9lB,EAAF,QAAWwqB,GAAZ,SACjB,mBAACC,GAAA,EAAD,CACEzqB,SAASgc,EAAAA,GAAAA,GAAWhc,EAAS,CAAC,QAAS,KAAM,QAAS,oBACtD0qB,UAAW,IAAMH,EAAoB,CAAEC,QAAAA,c,0BCZjD,MA4BA,IAAe7pB,EAAAA,EAAAA,KA5BqB,IAAa,IAAZ,IAAEmI,GAAU,EAC/C,MAAM,oBAAE6hB,IAAwB/oB,EAAAA,EAAAA,MAE1BO,GAAOC,EAAAA,EAAAA,KAEPwoB,GAAa1oB,EAAAA,EAAAA,KAAY,KAC7B0C,OAAOimB,MAAKC,EAAAA,GAAAA,GAAehiB,IAC3B6hB,EAAoB,CAAE7hB,SAAKhG,MAC1B,CAAC6nB,EAAqB7hB,IAEnBiiB,GAAgB7oB,EAAAA,EAAAA,KAAY,KAChCyoB,EAAoB,CAAE7hB,SAAKhG,MAC1B,CAAC6nB,IAEEK,GAAezC,EAAAA,GAAAA,GAAiBzf,GAEtC,OACE,mBAACmiB,GAAA,EAAD,CACEzoB,OAAQwH,QAAQlB,GAChBM,QAAS2hB,EACTtB,MAAOtnB,EAAK,gBACZ+O,WAAW8K,EAAAA,GAAAA,GAAW7Z,EAAK,gBAAiB6oB,GAAe,CAAC,UAC5DE,aAAc/oB,EAAK,gBACnBgpB,eAAgBP,OCtBhBQ,GAAgB,aAkBhBC,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBAkUF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAI1X,KAAKqX,EAAMC,EAAOC,GACpCI,EAAeH,IAAWI,EAAAA,EAAAA,IAAYJ,GACtCK,EAAeJ,IAAWG,EAAAA,EAAAA,IAAYH,GAE5C,SAAII,GAAgBH,EAAcG,OAEvBF,GAAgBD,EAAcC,GAO3C,SAASG,GAAgBlZ,GACvB,OAAOmZ,OAAOnZ,GAAOoZ,SAAS,EAAG,KAGnC,SAASC,GAAUZ,EAAcC,EAAeC,GAC9C,MAAQ,GAAEF,KAAQC,EAAQ,KAAKC,IAcjC,UAAe9qB,EAAAA,EAAAA,KAhWqB,IAa9B,IAb+B,WACnCyrB,EADmC,MAEnCC,EAFmC,MAGnCC,EAHmC,aAInCC,EAJmC,WAKnCC,EALmC,OAMnChqB,EANmC,eAOnCiqB,EAPmC,kBAQnCC,EARmC,kBASnCC,EATmC,QAUnCvjB,EAVmC,SAWnCwjB,EAXmC,oBAYnCC,GACI,EACJ,MAAM1qB,GAAOC,EAAAA,EAAAA,KACP+R,EAAM,IAAID,KAEVwX,GAAUppB,EAAAA,EAAAA,KAAQ,IAClBiqB,IAAiBF,EAAc,IAAInY,KAChC,IAAIA,KAAK3Q,KAAKqE,IAAIykB,GA9CP,OA+CjB,CAACE,EAAcF,IACZV,GAAUrpB,EAAAA,EAAAA,KAAQ,IAClBkqB,IAAeF,EAAc,IAAIpY,KAC9B,IAAIA,KAAK3Q,KAAKsE,IAAIykB,GAASlB,GAAeA,MAChD,CAACoB,EAAYF,IAEVQ,GAAqBxqB,EAAAA,EAAAA,KAAQ,IAAO8pB,EAAa,IAAIlY,KAAKkY,GAAc,IAAIlY,MAAS,CAACkY,IACtFW,GAAaxQ,EAAAA,EAAAA,GAAY/Z,IACxBwqB,EAAoBC,EAAwBC,IAA4B1F,EAAAA,GAAAA,IAAQ,IAEhF2F,EAAcC,IAAmBjpB,EAAAA,EAAAA,IAAe2oB,IAChDO,EAAqBC,IAA0BnpB,EAAAA,EAAAA,IACpD,IAAI+P,KAAKiZ,EAAaI,cAAeJ,EAAaK,WAAY,KAEzDC,EAAeC,IAAoBvpB,EAAAA,EAAAA,IACxC6nB,GAAgBc,EAAmBa,cAE9BC,EAAiBC,IAAsB1pB,EAAAA,EAAAA,IAC5C6nB,GAAgBc,EAAmBgB,eAG/BlC,EAAcO,GAAUgB,EAAaI,cAAeJ,EAAaK,WAAYL,EAAaY,WAC1FC,EAAcX,EAAoBE,cAClCU,EAAeZ,EAAoBG,YAEzCppB,EAAAA,EAAAA,KAAU,MACH2oB,GAAcvqB,IACjB4qB,EAAgBN,GAChBQ,EAAuB,IAAIpZ,KAAK4Y,EAAmBS,cAAeT,EAAmBU,WAAY,IAC7Ff,IACFiB,EAAiB1B,GAAgBc,EAAmBa,aACpDE,EAAmB7B,GAAgBc,EAAmBgB,mBAGzD,CAAChB,EAAoBtqB,EAAQuqB,EAAYN,KAE5CroB,EAAAA,EAAAA,KAAU,KACJmoB,IAAiBS,GAAsBG,EAAae,UAAYxC,EAAQwC,YAC1Ed,EAAgB1B,GAChBgC,EAAiB1B,GAAgBN,EAAQiC,aACzCE,EAAmB7B,GAAgBN,EAAQoC,kBAE5C,CAACvB,EAAcS,EAAoBtB,EAASyB,KAE/C/oB,EAAAA,EAAAA,KAAU,KACJooB,IAAeQ,GAAsBG,EAAae,UAAYvC,EAAQuC,YACxEd,EAAgBzB,GAChB+B,EAAiB1B,GAAgBL,EAAQgC,aACzCE,EAAmB7B,GAAgBL,EAAQmC,kBAE5C,CAACvB,EAAcC,EAAYQ,EAAoBrB,EAASD,EAASyB,KAEpE/oB,EAAAA,EAAAA,KAAU,KACR,GAAIgoB,EAAY,CACd,MAAM+B,EAAkB,IAAIja,KAAKkY,GACjCgB,EAAgBe,GAChBT,EAAiB1B,GAAgBmC,EAAgBR,aACjDE,EAAmB7B,GAAgBmC,EAAgBL,kBAEpD,CAAC1B,IAEJ,MAAMgC,EAA0B5B,GAAcwB,GAAe7Z,EAAIoZ,eAAiBU,GAAgB9Z,EAAIqZ,YAChG7B,GAAWqC,GAAerC,EAAQ4B,eAAiBU,GAAgBtC,EAAQ6B,WAC3Ea,EAAyB9B,GAAgByB,GAAe7Z,EAAIoZ,eAAiBU,GAAgB9Z,EAAIqZ,YAEjG,cAAEc,EAAF,iBAAiBC,EAAjB,cAAmCC,IAAkBlsB,EAAAA,EAAAA,KAAQ,IA0MrE,SAA2BipB,EAAcC,GACvC,MAAM8C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BtS,EAAO,IAAIhI,KACjBgI,EAAKuS,QAAQ,GACbvS,EAAKwS,SAASlD,GACdtP,EAAKyS,YAAYpD,GACjB,MAAMqD,EAAW1S,EAAK2S,SAChBC,EAAuB,IAAI5a,KAAKqX,EAAMC,EAAO,GAAGuC,UAEtD,IAAK,IAAIhI,EAAI,EAAGA,EAAI6I,EAAU7I,IAC5BuI,EAAcS,KAAKD,EAAuBF,EAAW7I,EAAI,GAG3D,KAAO7J,EAAKsR,aAAehC,GAAO,CAChC,MAAMwD,EAAW9S,EAAK6R,UACtBQ,EAAiBQ,KAAKC,GACtB9S,EAAKuS,QAAQO,EAAW,GAG1B,MAAMC,GAAoBV,EAAiBhuB,OAAS+tB,EAAc/tB,QAAU,EAC5E,GAAI0uB,EAAmB,EACrB,IAAK,IAAIlJ,EAAI,EAAGA,GAAK,EAAIkJ,EAAkBlJ,IACzCyI,EAAcO,KAAKhJ,GAIvB,MAAO,CAAEuI,cAAAA,EAAeC,iBAAAA,EAAkBC,cAAAA,GAtOxCU,CAAkBlB,EAAaC,IAC9B,CAACA,EAAcD,IAEZmB,GAAc7sB,EAAAA,EAAAA,KAAQ,IACnBoqB,GA2PX,SAA2BvqB,EAAc+Z,GACvC,MAAMuP,GAAM2D,EAAAA,EAAAA,IAAmBlT,EAAM/Z,EAAKktB,MAG1C,OAAI5D,KAFU2D,EAAAA,EAAAA,IAAmB,IAAIlb,KAAQ/R,EAAKktB,MAGzCltB,EAAK,0CAA0CmtB,EAAAA,EAAAA,IAAWntB,EAAM+Z,IAGlE/Z,EAAK,sCAAuC,CAACspB,GAAK6D,EAAAA,EAAAA,IAAWntB,EAAM+Z,KAnQ5CqT,CAAkBptB,EAAMgrB,IACnD,CAAChrB,EAAMgrB,EAAcT,IAmClB8C,GAAoBttB,EAAAA,EAAAA,KAAa+C,IACrC,MAAM6N,EAAQ7N,EAAE8G,OAAO+G,MAAM2c,QAAQ,UAAW,IAChD,IAAK3c,EAAMvS,OAGT,OAFAmtB,EAAiB,SACjBzoB,EAAE8G,OAAO+G,MAAQ,IAInB,MAAM4c,EAAQnsB,KAAKqE,IAAI,EAAGrE,KAAKsE,IAAIiV,OAAOhK,GAAQ,KAE5CoJ,EAAO,IAAIhI,KAAKiZ,EAAae,WACnChS,EAAKyT,SAASD,GACdtC,EAAgBlR,GAEhB,MAAM0T,EAAW5D,GAAgB0D,GACjChC,EAAiBkC,GACjB3qB,EAAE8G,OAAO+G,MAAQ8c,IAChB,CAACzC,IAEE0C,GAAsB3tB,EAAAA,EAAAA,KAAa+C,IACvC,MAAM6N,EAAQ7N,EAAE8G,OAAO+G,MAAM2c,QAAQ,UAAW,IAChD,IAAK3c,EAAMvS,OAGT,OAFAstB,EAAmB,SACnB5oB,EAAE8G,OAAO+G,MAAQ,IAInB,MAAMgd,EAAUvsB,KAAKqE,IAAI,EAAGrE,KAAKsE,IAAIiV,OAAOhK,GAAQ,KAE9CoJ,EAAO,IAAIhI,KAAKiZ,EAAae,WACnChS,EAAK6T,WAAWD,GAChB1C,EAAgBlR,GAEhB,MAAM8T,EAAahE,GAAgB8D,GACnCjC,EAAmBmC,GACnB/qB,EAAE8G,OAAO+G,MAAQkd,IAChB,CAAC7C,IA4BJ,OACE,mBAAC7H,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASA,EACTvG,UAAU,iBAEV,0BAAKA,UAAU,aACb,0BAAKA,UAAU,kBACb,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAASqG,GAET,wBAAGvG,UAAU,gBAGf,6BACGV,EAAM,YAAW8rB,EAAe,KAChC,IACAD,GAGH,mBAACvrB,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACN8Z,SAAU2R,EACVtrB,QAAUsrB,OAA2CvrB,EA7H/D,WACEwqB,GAAwB2C,IACtB,MAAMC,EAAW,IAAIhc,KAAK+b,GAG1B,OAFAC,EAASxB,SAASwB,EAAS1C,WAAa,GAEjC0C,OA0HD,wBAAGrtB,UAAU,mBAGf,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACN8Z,SAAU0R,EACVrrB,QAAUqrB,OAA2CtrB,EA9H/D,WACEwqB,GAAwB2C,IACtB,MAAMC,EAAW,IAAIhc,KAAK+b,GAG1B,OAFAC,EAASxB,SAASwB,EAAS1C,WAAa,GAEjC0C,OA2HD,wBAAGrtB,UAAU,iBAKnB,0BAAKA,UAAU,oBACb,0BAAKA,UAAU,iBACZwoB,GAAgBvF,KAAK2F,GACpB,0BAAK5oB,UAAU,4BACb,+BAAOV,EAAKspB,OAGf6C,EAAcxI,KAAKkJ,GAClB,0BAAKnsB,UAAU,uBAAsB,+BAAOmsB,MAE7CT,EAAiBzI,KAAKkJ,GACrB,0BACEmB,KAAK,SACLC,SAAU,EACVrtB,QAAS,KAAMstB,OA1IDnU,EA0IkB8S,OAzI1C5B,GAAiB6C,IACf,MAAMC,EAAW,IAAIhc,KAAK+b,GAK1B,OAJAC,EAASzB,QAAQvS,GACjBgU,EAASxB,SAAST,GAClBiC,EAASvB,YAAYX,GAEdkC,KAPX,IAA0BhU,GA2IdrZ,WAAWmC,EAAAA,EAAAA,GACT,aACAsmB,GACE0C,EAAaC,EAAce,EAAUtD,EAASC,GAE5C,WACGqD,EAAW,YAAc,GAChCpD,IAAgBO,GAAU6B,EAAaC,EAAce,IAAa,aAGnEhlB,QAAQglB,IACP,+BAAOA,MAIZR,EAAc1I,KAAKkJ,GAClB,0BAAKnsB,UAAU,uBAAsB,+BAAOmsB,QAKjDvC,GAzGD,0BAAK5pB,UAAU,cACb,4BACE+Z,KAAK,OACL/Z,UAAU,eACVytB,UAAU,UACVxd,MAAO2a,EACP5Q,SAAU2S,EACVe,QAAStD,EACTuD,OAAQtD,IARZ,IAWE,4BACEtQ,KAAK,OACL/Z,UAAU,eACVytB,UAAU,UACVxd,MAAO8a,EACP/Q,SAAUgT,EACVU,QAAStD,EACTuD,OAAQtD,KAyFZ,0BAAKrqB,UAAU,UACb,mBAACJ,EAAA,EAAD,CAAQM,QAxJd,WACE6pB,EAASO,KAwJFgC,GAEFxC,GACC,mBAAClqB,EAAA,EAAD,CAAQM,QAAS8pB,EAAqB3C,QAAM,GACzCyC,QC3Rb,IAAehsB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CAAEurB,WAAYvrB,EAAO4vB,6BAFZ7vB,EAxB+B,IAE7C,IAF8C,OAClD4B,EADkD,WAC1C4pB,GACJ,EACJ,MAAM,qBAAEsE,EAAF,qBAAwBC,IAAyB/uB,EAAAA,EAAAA,MAEjDgvB,GAAmB1uB,EAAAA,EAAAA,KAAaga,IACpCwU,EAAqB,CAAEG,UAAW3U,EAAK4U,UAAY,MACnDH,MACC,CAACA,EAAsBD,IAEpBvuB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC,GAAD,CACEI,OAAQA,EACR4pB,WAAYA,EACZI,YAAU,EACVE,kBAAmBvqB,EAAK,cACxBiH,QAASunB,EACT/D,SAAUgE,QC4EhB,IAAejwB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAiD,IAAxC,QAAEb,EAAF,WAAW+wB,GAA6B,EAC/C,MAAM,SAAEvjB,IAAawjB,EAAAA,EAAAA,IAAyBnwB,IAAW,IACnD,gBAAEowB,GAAqBzjB,IAAY0jB,EAAAA,EAAAA,IAA4BrwB,EAAQb,EAASwN,IAAc,GAC9FuO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQb,EAAQuN,QAQxC,MAAO,CACL0jB,iBAAkBF,GAAcE,EAChCE,YATkBpV,IAAQX,EAAAA,EAAAA,IAASW,EAAK3c,KACtCgyB,EAAAA,EAAAA,KAAuBrjB,EAAAA,EAAAA,IAAWlN,GAAQwwB,EAAAA,EAAAA,IAAqBtV,UAC/DjZ,EAQFwuB,6BANmCvV,IAAQwV,EAAAA,EAAAA,IAAiBxV,KAAUkV,EAOtEO,iBANuBzV,IAAQ0V,EAAAA,EAAAA,IAAiB1V,MAVlCnb,EAtEkC,IAUhD,IAViD,OACrD4B,EADqD,WAErDuuB,EAFqD,QAGrD/wB,EAHqD,MAIrD0xB,EAJqD,gBAKrDT,EALqD,YAMrDE,EANqD,6BAOrDG,EAPqD,iBAQrDE,EARqD,QASrDpoB,GACI,EACJ,MAAM,eACJuoB,EADI,wBAEJC,IACEhwB,EAAAA,EAAAA,MAEEiwB,GAA4B3vB,EAAAA,EAAAA,KAAY,KAC5C,MAAM8b,EAAa0T,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAAShM,KAAI,QAAC,GAAE1mB,GAAH,SAAYA,KAC/B,CAACY,EAAQZ,IACbuyB,EAAe,CAAE3T,WAAAA,EAAY+T,oBAAoB,IACjD3oB,MACC,CAACuoB,EAAgB3xB,EAAQZ,GAAIgK,EAASsoB,IAEnCM,GAA6B9vB,EAAAA,EAAAA,KAAY,KAC7C,MAAM8b,EAAa0T,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAAShM,KAAI,QAAC,GAAE1mB,GAAH,SAAYA,KAC/B,CAACY,EAAQZ,IACT2xB,EACFa,EAAwB,CAAE5T,WAAAA,IAE1B2T,EAAe,CACb3T,WAAAA,EACA+T,oBAAoB,IAGxB3oB,MACC,CAACsoB,EAAO1xB,EAAQZ,GAAI2xB,EAAY3nB,EAASwoB,EAAyBD,IAE/DxvB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACkjB,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASA,EACT6oB,QAASzvB,IAAWyuB,EAAkBe,OAA6BlvB,EACnED,UAAU,SACV4mB,MAAOtnB,EAAK,8BAEZ,4BAAIA,EAAK,kCACRmvB,GACC,4BAAInvB,EAAK,8BAA+B,EAAG,MAE5CqvB,GACC,4BAAIrvB,EAAK,+BAAgC,EAAG,MAE7C8uB,GACC,mBAACxuB,EAAA,EAAD,CAAQG,MAAM,SAASC,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAAS8uB,GACtEV,IAAenV,EAAAA,GAAAA,GAAW7Z,EAAK,iCAAkCgvB,KAChEA,GAAehvB,EAAK,2CAG1B,mBAACM,EAAA,EAAD,CAAQG,MAAM,SAASC,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASivB,GACtE7vB,EAAK8uB,EAAkB,gCAAkC,WAE5D,mBAACxuB,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASqG,GAAUjH,EAAK,gBCN/E,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAM2kB,GAAgB9W,EAAAA,EAAAA,IAAS7N,GACzB4kB,GAAiBC,EAAAA,EAAAA,IAAqBvxB,EAAQ0M,GAC9CwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAC1Bqc,EAAY5f,QAAQ+R,KAASsW,EAAAA,EAAAA,IAActW,GAC3CuW,EAAUtoB,QAAQ+R,KAASwV,EAAAA,EAAAA,IAAiBxV,GAC5CwW,EAAevoB,QAAQ+R,KAAS0V,EAAAA,EAAAA,IAAiB1V,GAMvD,MAAO,CACLmW,cAAAA,EACAC,eAAAA,EACAvI,UAAAA,EACA0I,QAAAA,EACAC,aAAAA,EACAC,aAXoBN,IAAkBC,GAAmBI,GAAgBD,EAYzEnB,YAXkBpV,IAAQX,EAAAA,EAAAA,IAASW,EAAK3c,KACtCgyB,EAAAA,EAAAA,KAAuBrjB,EAAAA,EAAAA,IAAWlN,GAAQwwB,EAAAA,EAAAA,IAAqBtV,UAC/DjZ,KAXYlC,EAhE+B,IAU7C,IAV8C,OAClD4B,EADkD,UAElDiL,EAFkD,OAGlDF,EAHkD,UAIlDqc,EAJkD,QAKlD0I,EALkD,aAMlDC,EANkD,aAOlDC,EAPkD,YAQlDrB,EARkD,QASlD/nB,GACI,EACJ,MAAM,WAAEqpB,IAAe7wB,EAAAA,EAAAA,MAEjB8wB,GAAyBxwB,EAAAA,EAAAA,KAAY,KACzCuwB,EAAW,CACTllB,OAAAA,EAAQE,UAAAA,EAAWklB,SAAS,IAE9BvpB,MACC,CAACqpB,EAAYllB,EAAQE,EAAWrE,IAE7BwpB,GAAmB1wB,EAAAA,EAAAA,KAAY,KACnCuwB,EAAW,CACTllB,OAAAA,EAAQE,UAAAA,EAAWklB,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAEhE1pB,MACC,CAACmE,EAAQE,EAAWrE,EAASqpB,IAE1BtwB,GAAOC,EAAAA,EAAAA,KAcb,OACE,mBAACkjB,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASA,EACTvG,UAAU,MACV4mB,MAAOtnB,EAAK,yBAEZ,4BAjBOA,EADLynB,EACU,yBAGV0I,GAAWC,EACD,kBAGF,wBAWV,mBAAC9vB,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAAS6vB,GACvDzwB,EAAK,cAEPqwB,GACC,mBAAC/vB,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAAS2vB,GACvDvB,GACGnV,EAAAA,GAAAA,GAAW7Z,EAAK,8BAA+BgvB,IAC/ChvB,EAAK,qDAGb,mBAACM,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASqG,GAAUjH,EAAK,gBCvD/E,IAAexB,EAAAA,EAAAA,KAxB6B,IAKtC,IALuC,OAC3C6B,EAD2C,oBAE3CuwB,EAAsB,EAFqB,QAG3C3pB,EAH2C,QAI3C4pB,GACI,EACJ,MAAM7wB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACkjB,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASA,EACTvG,UAAU,YACV4mB,MAAOtnB,EAAK,+BAEZ,4BAAIA,EAAK,oCAAqC4wB,EAAqB,MACnE,mBAACtwB,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASiwB,GACvD7wB,EAAK,gBAER,mBAACM,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASqG,GAAUjH,EAAK,e,yBC9B/E,MC0GA,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAwC,IAA/B,WAAEkwB,GAA6B,EACtC,MAAQ/S,WAAYiV,GAAuBpyB,EAAOqyB,kBAAoB,IAChE,gBAAEjC,IAAoBkC,EAAAA,EAAAA,IAAgCtyB,GACtDkb,GAAOqX,EAAAA,EAAAA,IAAkBvyB,GAQ/B,MAAO,CACLoyB,mBAAAA,EACAhC,iBAAkBF,GAAcE,EAChCE,YAVkBpV,IAAQX,EAAAA,EAAAA,IAASW,EAAK3c,KACtCgyB,EAAAA,EAAAA,KAAuBrjB,EAAAA,EAAAA,IAAWlN,GAAQwwB,EAAAA,EAAAA,IAAqBtV,UAC/DjZ,EASFwuB,6BAPmCvV,IAAQwV,EAAAA,EAAAA,IAAiBxV,KAAUkV,EAQtEO,iBAPuBzV,IAAQ0V,EAAAA,EAAAA,IAAiB1V,MAVlCnb,EA5E0C,IASxD,IATyD,OAC7D4B,EAD6D,WAE7DuuB,EAF6D,mBAG7DkC,EAH6D,gBAI7DhC,EAJ6D,YAK7DE,EAL6D,6BAM7DG,EAN6D,iBAO7DE,EAP6D,QAQ7DpoB,GACI,EACJ,MAAM,eACJuoB,EADI,wBAEJC,EAFI,sBAGJyB,IACEzxB,EAAAA,EAAAA,MAEEmrB,GAAaxQ,EAAAA,EAAAA,GAAY/Z,GAEzBqvB,GAA4B3vB,EAAAA,EAAAA,KAAY,KAC5CkH,IACAuoB,EAAe,CAAE3T,WAAYiV,EAAoBlB,oBAAoB,MACpE,CAACJ,EAAgBsB,EAAoB7pB,IAElC4oB,GAA6B9vB,EAAAA,EAAAA,KAAY,KACzC6uB,EACFa,EAAwB,CAAE5T,WAAYiV,IAEtCtB,EAAe,CAAE3T,WAAYiV,EAAoBlB,oBAAoB,IAGvE3oB,MACC,CAAC2nB,EAAY3nB,EAASwoB,EAAyBqB,EAAoBtB,IAEhExvB,GAAOC,EAAAA,EAAAA,KASb,IANAgC,EAAAA,EAAAA,KAAU,MACH5B,GAAUuqB,GACbsG,MAED,CAACA,EAAuB7wB,EAAQuqB,IAE9BkG,EAIL,OACE,mBAAC3N,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASA,EACT6oB,QAAShB,OAAkBnuB,EAAYkvB,EACvCnvB,UAAU,SACV4mB,MAAOtnB,EAAK,oCAEZ,4BAAIA,EAAK,gCACRmvB,GACC,2GAEDE,GACC,gFAEDP,GACC,mBAACxuB,EAAA,EAAD,CAAQG,MAAM,SAASC,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAAS8uB,GACtEV,GACGnV,EAAAA,GAAAA,GAAW7Z,EAAK,6BAA8BgvB,IAC9ChvB,EAAK,2CAGb,mBAACM,EAAA,EAAD,CAAQG,MAAM,SAASC,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASivB,GACtE7vB,EAAK8uB,EAAkB,gCAAkC,WAE5D,mBAACxuB,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASqG,GAAUjH,EAAK,gB,eCnF/E,MAuEA,IAAexB,EAAAA,EAAAA,KAvE0B,IAInC,IAJoC,OACxC6B,EADwC,WAExCwb,EAFwC,QAGxC5U,GACI,EACJ,MAAM,eACJkqB,EADI,sBAEJD,IACEzxB,EAAAA,EAAAA,OAEG2xB,EAAgBC,IAAqBrvB,EAAAA,EAAAA,IAA0B,SAC/DsvB,EAAaC,IAAkBvvB,EAAAA,EAAAA,IAAS,IAEzCwvB,EAAe,KACnBL,EAAe,CAAEtV,WAAAA,EAAY4V,OAAQL,EAAgBE,YAAAA,IACrDJ,IACAjqB,KAGIyqB,GAAqB3xB,EAAAA,EAAAA,KAAa4Q,IACtC0gB,EAAkB1gB,KACjB,IAEGghB,GAA0B5xB,EAAAA,EAAAA,KAAa+C,IAC3CyuB,EAAezuB,EAAE8G,OAAO+G,SACvB,IAEG3Q,GAAOC,EAAAA,EAAAA,KAEP2xB,EAA8D,CAClE,CAAEjhB,MAAO,OAAQkhB,MAAO7xB,EAAK,2BAC7B,CAAE2Q,MAAO,WAAYkhB,MAAO7xB,EAAK,+BACjC,CAAE2Q,MAAO,cAAekhB,MAAO7xB,EAAK,kCACpC,CAAE2Q,MAAO,aAAckhB,MAAO7xB,EAAK,kCACnC,CAAE2Q,MAAO,YAAakhB,MAAO7xB,EAAK,+BAClC,CAAE2Q,MAAO,eAAgBkhB,MAAO,iBAChC,CAAElhB,MAAO,kBAAmBkhB,MAAO,oBACnC,CAAElhB,MAAO,QAASkhB,MAAO7xB,EAAK,6BAGhC,GAAK6b,EAIL,OACE,mBAACsH,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASA,EACT6oB,QAASzvB,EAASmxB,OAAe7wB,EACjCD,UAAU,SACV4mB,MAAOtnB,EAAK,6BAEZ,mBAAC8xB,GAAA,EAAD,CACEjQ,KAAK,iBACLkQ,QAASH,EACTlX,SAAUgX,EACVM,SAAUZ,IAEZ,mBAACrO,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,iCACZ2Q,MAAO2gB,EACP5W,SAAUiX,IAEZ,mBAACrxB,EAAA,EAAD,CAAQG,MAAM,SAASC,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAAS4wB,GACtExxB,EAAK,sBAER,mBAACM,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASqG,GAAUjH,EAAK,eCgF/E,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ+b,KAAMwX,EAAR,OAAyB7mB,IAAWyjB,EAAAA,EAAAA,IAAyBnwB,IAAW,IACxE,UAAEwzB,IAAclB,EAAAA,EAAAA,IAAgCtyB,GAChDyzB,GAAYC,EAAAA,EAAAA,IAAgC1zB,GAC5C2zB,GAAcC,EAAAA,EAAAA,IAAkC5zB,IAC9Cmd,WAAYiV,GAAuBpyB,EAAOqyB,kBAAoB,GAChEwB,IAAsBnnB,IAASonB,EAAAA,EAAAA,IAA0B9zB,EAAQ0M,EAAQ0lB,GAE/E,MAAO,CACLlC,WAAgC,cAApBqD,EACZQ,uBAAuBC,EAAAA,EAAAA,IAA4Bh0B,GACnDi0B,kBAAmBT,EACnBU,kBAAmBT,EACnBU,oBAAqBR,EACrBvB,mBAAAA,EACAyB,oBAAAA,KAhBc9zB,EA3HoC,IAWlD,IAXmD,QACvDq0B,EADuD,SAEvD9mB,EAFuD,gBAGvDimB,EAHuD,WAIvDrD,EAJuD,sBAKvD6D,EALuD,kBAMvDE,EANuD,kBAOvDC,EAPuD,oBAQvDC,EARuD,oBASvDN,EATuD,mBAUvDzB,GACI,EACJ,MAAM,sBACJI,EADI,mCAEJ6B,EAFI,yBAGJC,EAHI,qBAIJC,IACExzB,EAAAA,EAAAA,OAEGyzB,EAAmBC,EAAiBC,IAAoB/N,EAAAA,GAAAA,MACxDgO,EAAmBC,EAAiBC,IAAoBlO,EAAAA,GAAAA,KH7DjC,EAACrZ,EAAmBinB,MAClDhxB,EAAAA,EAAAA,KAAU,KACR,SAASuxB,EAAW1wB,IACZ2wB,EAAAA,IAAa3wB,EAAE4wB,UAAcD,EAAAA,IAAa3wB,EAAE6wB,UAAoC,OAAvBC,EAAAA,GAAAA,GAAgB9wB,KAC7EA,EAAEsH,iBACF6oB,KAQJ,OAJIjnB,GACFvQ,SAASiH,iBAAiB,UAAW8wB,GAAY,GAG5C,KACL/3B,SAASkH,oBAAoB,UAAW6wB,GAAY,MAErD,CAACP,EAAsBjnB,KG+C1B6nB,CAAwBhsB,QAAQmE,GAAWinB,IAC3ChxB,EAAAA,EAAAA,KAAU,KACD+J,GAAaknB,GAAsBG,OAMtC1yB,GALAmzB,EAAAA,GAAAA,GAAyB,CACzBC,YAAaZ,EACba,SAAUb,EACVc,MAAO/C,KAGV,CAACllB,EAAUknB,EAAmBG,EAAmBF,EAAiBjC,IAErE,MAAMsC,GAAazzB,EAAAA,EAAAA,KAAY,KAC7BkzB,IACA/B,MACC,CAAC+B,EAAsB/B,IAEpBgD,GAAiBn0B,EAAAA,EAAAA,KAAY,KACjCizB,IACA9B,MACC,CAAC8B,EAA0B9B,IAExBiD,GAA4B/Z,EAAAA,EAAAA,GAAYqY,QAAyB9xB,GAAW,GAC5EyzB,EAAiCpoB,EAAWymB,EAAwB0B,EAEpEn0B,GAAOC,EAAAA,EAAAA,KAEPo0B,EAAyBr0B,EAAK,kCAAmCo0B,EAAgC,KAEjG1zB,GAAYmC,EAAAA,EAAAA,GAChB,uBACAiwB,GAAW,gBACX9mB,GAAY,SAGRsoB,EAAe,CACnBnzB,EAAc0wB,EAAejxB,EAA4B2Z,EAAoBga,IAG3E,0BACEvG,KAAK,SACLC,SAAU,EACVvtB,WAAWmC,EAAAA,EAAAA,GACT,OACA0X,GAAY,WACZga,GAAe,eAEjB3zB,QAAU2Z,OAAqB5Z,EAAVC,EACrB0mB,MAAOuK,GAEP,wBAAGnxB,UAAY,QAAOS,OAK5B,OACE,0BAAKT,UAAWA,GACd,0BAAKA,UAAU,8BACb,mBAACJ,EAAA,EAAD,CACEG,MAAM,cACNF,OAAK,EACLK,QAASswB,EACTrwB,UAAU,oBAEV,wBAAGH,UAAU,gBAEf,2BAAMA,UAAU,6BAA6B4mB,MAAO+M,GACjDA,GAGFxsB,QAAQ4qB,IACP,0BAAK/xB,UAAU,gCACQ,cAApBuxB,GACCqC,EACE,UAAWt0B,EAAK,4BAA6B+yB,EAAoCR,GAGpFK,GACC0B,EAAa,OAAQt0B,EAAK,+BAAgCszB,GAE3DT,GACCyB,EAAa,WAAYt0B,EAAK,sBAAuBk0B,EAAgB3B,GAEtE+B,EAAa,OAAQt0B,EAAK,mCAAoCwzB,EAAYjB,GAC1E+B,EAAa,SAAUt0B,EAAK,gCAAiCmzB,GAAkBR,GAAmB,KAIzG,mBAAC,GAAD,CACEtyB,OAAQ6yB,EACRtE,WAAYA,EACZ3nB,QAASmsB,IAEX,mBAAC,GAAD,CACE/yB,OAAQgzB,EACRpsB,QAASssB,EACT1X,WAAYiV,SC1FpB,IAAetyB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAM,OAAE0M,EAAF,UAAUE,GAAc5M,EAAO81B,aAAe,GACpD,OAAKppB,GAAWE,EAIT,CACLmpB,UAAS,WAAEhpB,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,UAApC,aAAE,EAA8CopB,eAJlD,KAJOj2B,EAlD2B,IAGzC,IAH0C,OAC9C4B,EAD8C,UAE9Co0B,GACI,EACJ,MAAM,SACJE,EADI,iBAEJC,IACEn1B,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,KAEP40B,GAAc90B,EAAAA,EAAAA,KAAaikB,IAC/B4Q,IAEA9vB,YAAW,KACT6vB,EAAS,CAAE13B,GAAI+mB,MAjBY,OAmB5B,CAAC4Q,EAAkBD,IAEhBG,GAAqB1O,EAAAA,GAAAA,GAAiBqO,GAAW,GAEvD,OACE,mBAACtR,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAAS2tB,EACTl0B,UAAU,SACV4mB,MAAQ,WAAUmN,MAAAA,OAAX,EAAWA,EAAWr2B,gBAE7B,0BAAK4E,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC5Bm0B,GAAsBA,EAAmBnR,KAAKK,GAC7C,mBAACH,GAAA,EAAD,CACE1Z,IAAK6Z,EACLtjB,UAAU,6CACVE,QAAS,IAAMi0B,EAAY7Q,IAE3B,mBAACF,GAAA,EAAD,CAAiBE,OAAQA,EAAQ+Q,kBAAgB,QAIvD,mBAACz0B,EAAA,EAAD,CACEI,UAAU,wBACVqnB,QAAM,EACNnnB,QAASg0B,GAER50B,EAAK,e,0BCtCd,MAiKA,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAE0M,EAAF,UAAUE,GAAc5M,EAAOs2B,cAAgB,GAC/Cn3B,EAAUuN,GAAUE,GAAYG,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,QAAa3K,EAErF,MAAO,CACLyK,OAAAA,EACAE,UAAAA,EACA2pB,UAAWp3B,MAAAA,OAAF,EAAEA,EAASo3B,UACpBC,SAAUr3B,MAAAA,OAAF,EAAEA,EAASq3B,SACnBR,cAAe72B,MAAAA,OAAF,EAAEA,EAAS62B,iBAVVj2B,EAtJgC,IAO9C,IAP+C,OACnD4B,EADmD,SAEnD60B,EAFmD,UAGnDD,EAHmD,OAInD7pB,EAJmD,UAKnDE,EALmD,cAMnDopB,GACI,EACJ,MAAM,aACJS,EADI,sBAEJC,EAFI,SAGJT,IACEl1B,EAAAA,EAAAA,MAGEmmB,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAE9BpkB,GAAOC,EAAAA,EAAAA,MACNo1B,EAAWC,EAAcC,IAAelQ,EAAAA,GAAAA,IAAQ,IAChDmQ,EAAWC,IAAgBzzB,EAAAA,EAAAA,SAA6BrB,GACzD+0B,EAAiBR,GAAYD,GAAaC,EAASS,OA/BnB,IAgCjCV,EAAUW,QAAQx3B,OAAS,EAC1By3B,GAAYpxB,EAAAA,EAAAA,OAElBxC,EAAAA,EAAAA,KAAU,KACJozB,IAAch1B,IAChBk1B,IACAE,OAAa90B,MAEd,CAAC00B,EAAWh1B,EAAQk1B,IAEvB,MAAMO,GAA0B/1B,EAAAA,EAAAA,KAAY,KACtC81B,EAAUjxB,SACZ+vB,EAAS,CAAE13B,GAAI44B,EAAUjxB,UAE3BwwB,MACC,CAACA,EAAuBT,IAErBoB,GAAch2B,EAAAA,EAAAA,KAAY,KAC9Bu1B,MACC,CAACA,IAEET,GAAc90B,EAAAA,EAAAA,KAAaikB,IAC/B6R,EAAUjxB,QAAUof,EACpB+R,MACC,CAACA,IAEEC,GAAiBj2B,EAAAA,EAAAA,KAAY,KACjCo1B,EAAa,CACX/pB,OAAAA,EACAE,UAAAA,MAED,CAACF,EAAQ+pB,EAAc7pB,IAEpB2qB,GAAe91B,EAAAA,EAAAA,KAAQ,IACpB+0B,MAAAA,GAAAA,EAAUD,WAAYzP,EAAAA,GAAAA,IAAO0P,EAASD,UAAUtR,KAAKuS,GAAMA,EAAEC,YAAa,IAChF,CAACjB,MAAAA,OAAD,EAACA,EAAUD,YAERlQ,GAAU5kB,EAAAA,EAAAA,KAAQ,IAClBq1B,EACKN,MAAAA,OAAP,EAAOA,EAAUD,UAAUhT,QAAQiU,GAAMA,EAAEC,WAAaX,IAAW7R,KAAKuS,GAAMA,EAAElS,UAE3EwB,EAAAA,GAAAA,KAAO0P,MAAAA,OAAA,EAAAA,EAAUD,UAAUtR,KAAKuS,GAAMA,EAAElS,SAAQoS,OAAO1B,GAAiB,MAAO,KACrF,CAACc,EAAWN,MAAAA,OAAZ,EAAYA,EAAUD,UAAWP,KAE7BnS,EAAaC,IAAWC,EAAAA,GAAAA,GAC7BuT,EAAgBjR,EAASmQ,QAAoCv0B,IAAxBu0B,EAASmB,YAOhD,OAJAp0B,EAAAA,EAAAA,KAAU,KACRugB,MAAAA,GAAAA,EAAU,CAAEpQ,UAAWkkB,EAAAA,GAAAA,cACtB,CAAC9T,IAGF,mBAACW,GAAA,EAAD,CACE9iB,OAAQA,IAAWg1B,EACnBpuB,QAAS8uB,EACTr1B,UAAU,0BACV4mB,MAAOtnB,EAAK,aACZsiB,oBAAqBwT,GAEpBJ,GACC,0BAAKh1B,UAAU,aACb,mBAACJ,EAAA,EAAD,CACEI,WAAWmC,EAAAA,EAAAA,IAAgB2yB,GAAa,UACxCh1B,KAAK,OACL6F,QAAM,EACNzF,QAAS,IAAM60B,OAAa90B,IAE5B,wBAAGD,UAAU,0BACZw0B,MAAAA,OAAA,EAAAA,EAAUS,SAASY,EAAAA,GAAAA,IAAqBrB,EAASS,QAEnDM,EAAatS,KAAKwS,IAAa,MAC9B,MAAMR,EAAQV,MAAAA,GAAH,UAAGA,EAAWW,QAAQY,MAAMN,GAAMA,EAAEC,WAAaA,WAAjD,aAAG,EAAyDR,MACvE,OACE,mBAACr1B,EAAA,EAAD,CACEI,WAAWmC,EAAAA,EAAAA,GAAe2yB,IAAcW,GAAY,UACpD31B,KAAK,OACL6F,QAAM,EACNzF,QAAS,IAAM60B,EAAaU,IAE5B,mBAACM,GAAA,EAAD,CAAqBN,SAAUA,EAAUz1B,UAAU,0BAClDi1B,IAASY,EAAAA,GAAAA,IAAqBZ,QAOzC,0BAAK3yB,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC5B4hB,MAAAA,GAAAA,EAAankB,OACZ,mBAACilB,GAAA,EAAD,CACE3iB,UAAU,6BACV4iB,MAAOf,EACPgB,WAAYf,GAEXD,MAAAA,OALH,EAKGA,EAAaoB,KACXK,IAAW,MACV,MAAMrK,EAAOiM,EAAU5B,GACjB0S,GAAWC,EAAAA,EAAAA,IAAgBhd,GAC3Bwc,EAAWjB,MAAAA,GAAH,UAAGA,EAAUD,UAAUuB,MAAMN,GAAMA,EAAElS,SAAWA,WAAhD,aAAG,EAAsDmS,SACvE,OACE,mBAACtS,GAAA,EAAD,CACE1Z,IAAK6Z,EACLtjB,UAAU,yCACVE,QAAS,IAAMi0B,EAAY7Q,IAE3B,mBAACtK,GAAA,EAAD,CAAQC,KAAMA,EAAMnZ,KAAK,WACzB,0BAAKE,UAAU,SACb,yBAAIsC,IAAI,QAAQ0zB,IAAY7c,EAAAA,GAAAA,GAAW6c,KAExCP,GAAY,mBAACM,GAAA,EAAD,CAAqB/1B,UAAU,sBAAsBy1B,SAAUA,SAMpF,mBAACjS,GAAA,EAAD,OAEN,mBAAC5jB,EAAA,EAAD,CACEI,UAAU,wBACVqnB,QAAM,EACNnnB,QAASw0B,GAERp1B,EAAK,e,0BCxJd,MAgGA,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoD,IAA3C,uBAAEk4B,GAAyC,EAClD,MAAMC,OAA2Dl2B,IAA1Ci2B,EAAuBC,iBACzCC,EAAAA,EAAAA,IAA0Bp4B,EAAQk4B,EAAuBC,gBAC9D,MAAO,CACLE,kBAAmBF,EAAiBA,EAAe55B,QAAK0D,EACxDq2B,sBAAuBH,GAAkBD,EAAuBC,gBAC7Dp5B,OAAOw5B,KAAKC,GAAAA,GAAyBh6B,SAAS05B,EAAuBC,gBACpED,EAAuBC,oBAAiBl2B,KAR9BlC,EA5FyC,IAIvD,IAJwD,kBAC5Ds4B,EAD4D,qBAE5DC,EAF4D,uBAG5DJ,GACI,EACJ,MAAM,2BAAEO,IAA+B13B,EAAAA,EAAAA,OAEhC23B,EAAUC,IAAehS,EAAAA,GAAAA,IAAQ,IACjCiS,EAAWC,IAAgBlS,EAAAA,GAAAA,IAAQ,GACpCmS,GAAa/yB,EAAAA,EAAAA,MAEbgzB,GAAO13B,EAAAA,EAAAA,KAAY,KACvBs3B,IACIG,EAAW5yB,SACbG,aAAayyB,EAAW5yB,SAE1BE,YAAW,KACTqyB,EAA2B,CAAEl6B,GAAI25B,EAAuB35B,OArB9B,OAuB3B,CAAC25B,EAAuB35B,GAAIo6B,EAAaF,IAEtCO,GAAwB33B,EAAAA,EAAAA,KAAa+C,IAAe,MACpD,UAAEA,EAAE8G,cAAJ,OAAC,EAA2B5M,QAAQ,mBACtCy6B,MAED,CAACA,KAEJx1B,EAAAA,EAAAA,KAAU,KACRxG,SAASiH,iBAAiB,aAAcg1B,GACxCj8B,SAASiH,iBAAiB,YAAag1B,GACvCj8B,SAASiH,iBAAiB,YAAag1B,GACvCj8B,SAASiH,iBAAiB,QAASg1B,GAE5B,KACLj8B,SAASkH,oBAAoB,aAAc+0B,GAC3Cj8B,SAASkH,oBAAoB,YAAa+0B,GAC1Cj8B,SAASkH,oBAAoB,YAAa+0B,GAC1Cj8B,SAASkH,oBAAoB,QAAS+0B,MAEvC,CAACA,KAEJ5vB,EAAAA,EAAAA,KAAgB,KACd,MAAM6vB,GAA6Bra,EAAAA,EAAAA,MAEnCka,EAAW5yB,QAAUE,YAAW,KAC9B2yB,IACAE,MAjDmB,OAmDpB,CAACF,IAEJ,MAAMG,GAAsBnqB,EAAAA,EAAAA,GAAU,UAASspB,KAAsBA,EAAmBrpB,EAAAA,GAAAA,SAEjFmqB,EAA0BC,IAA+B91B,EAAAA,EAAAA,MAShE,IARAC,EAAAA,EAAAA,KAAU,KACJ+0B,IACFe,EAAAA,GAAAA,GAAiBf,GAA8DgB,MAAMC,IACnFH,EAA4BG,QAG/B,CAACjB,KAECJ,EAAuBsB,UAC1B,OAGF,MAAM/nB,GAASymB,EAAuBsB,WAAa,GAnEjC,IAqElB,OACE,0BACEx3B,WAAWmC,EAAAA,EAAAA,GACT,4BACAu0B,GAAY,SACZE,GAAa,UACbV,EAAuBuB,YAAc,YAEvCx6B,MAAQ,YAAWwS,iBAAqBymB,EAAuB3mB,mBAAmB2mB,EAAuB1mB,QAEzG,mBAACkoB,GAAA,EAAD,CACEjuB,IAAM,UAAS4sB,IACf95B,GAAK,UAAS85B,IACdv2B,KAlFY,IAmFZ63B,cAAeR,GAA4BD,EAC3CU,KAAMhB,EACNiB,QAASC,EAAAA,GAAa,QAAM73B,EAC5BsgB,uBAAqB,EACrBwX,QAAM,EACNC,OAAQnB,S,oCCvHhB,MAwBA,GAvBEoB,IAGA,MAAMC,GAAYn0B,EAAAA,EAAAA,IAAuB,MAEnC+c,GAAgBzhB,EAAAA,EAAAA,KAAa+C,IACnB,UAAVA,EAAEqH,KACYyuB,EAAUh0B,UAAYnJ,SAASo9B,eAG/CF,MAED,CAACA,IAQJ,OANA12B,EAAAA,EAAAA,KAAU,KACRQ,OAAOC,iBAAiB,UAAW8e,GAAe,GAE3C,IAAM/e,OAAOE,oBAAoB,UAAW6e,GAAe,KACjE,CAACA,IAEGoX,G,wBCYT,MA2DA,IAAep6B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAC1B0tB,EAAoBlf,IAAQsV,EAAAA,EAAAA,IAAqBtV,GAOvD,MAAO,CACLA,KAAAA,EACAD,KARWmf,GAAoBltB,EAAAA,EAAAA,IAAWlN,EAAQo6B,QAAqBn4B,EASvEo4B,UAReC,EAAAA,EAAAA,IAAmBt6B,EAAQ0M,GAS1C6tB,QARcrf,GACZsf,EAAAA,EAAAA,IAAkBtf,GAAMuf,EAAAA,EAAAA,IAAqBz6B,IAAS06B,EAAAA,EAAAA,IAAuB16B,SAC7EiC,EAOF04B,gBAAiBxxB,QAAO,UAACnJ,EAAO46B,YAAYC,kBAApB,aAAC,EAA+Bn7B,WAf1CK,EA3DoC,IASlD,IATmD,OACvD2M,EADuD,aAEvDouB,EAFuD,QAGvD54B,EAHuD,KAIvDgZ,EAJuD,KAKvDD,EALuD,SAMvDof,EANuD,QAOvDE,EAPuD,gBAQvDI,GACI,EACJ,MAAOnG,EAAmBC,EAAiBC,IAAoB/N,EAAAA,GAAAA,MACxDoU,EAAuBC,EAAqBC,IAAwBtU,EAAAA,GAAAA,KAErEuU,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3CjgB,KAAAA,EACAD,KAAAA,EACAof,SAAAA,EACAE,QAAAA,EACAI,gBAAAA,EACAS,aAAc3G,EACd4G,uBAAwBL,IACvB,GAEG7E,EAAc,KAClBj0B,EAAQwK,IAGJwtB,EAAYoB,GAAmBnF,GAErC,GAAKjb,EAIL,OACE,mBAACiK,GAAA,EAAD,CACEnjB,UAAU,oCACVE,QAASi0B,EACT+E,eAAgBA,EAChBhB,UAAWA,IAEV3f,EAAAA,EAAAA,IAAS7N,GACR,mBAAC0Y,GAAA,EAAD,CAAiBE,OAAQ5Y,EAAQouB,aAAcA,EAAcS,WAAW,UAExE,mBAAChW,GAAA,EAAD,CAAe7Y,OAAQA,EAAQouB,aAAcA,EAAcS,WAAW,UAExE,mBAACC,GAAA,EAAD,CACE75B,OAAQ6yB,EACRjsB,QAASmsB,EACTxZ,KAAMA,IAER,mBAAC,KAAD,CACEvZ,OAAQo5B,EACRxyB,QAAS0yB,EACTvuB,OAAQA,S,eC3DhB,MAGM+uB,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAO,GA8EnD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQqmB,QAASsV,GAAe37B,EAAO47B,SACjC1U,EAAYlnB,EAAOonB,MAAM1B,MACzB,qBAAEmW,GAAyB77B,EAAO87B,aAExC,MAAO,CACLH,WAAAA,EACAzU,UAAAA,EACA2U,qBAAAA,KATc97B,EA5E8B,IAG5C,IAH6C,WACjD47B,EADiD,UACrCzU,EADqC,qBAC1B2U,EAD0B,QAEjDE,GACI,EACJ,MAAM,aACJC,EADI,gBACUC,EADV,SAC2BhG,EAD3B,uBAEJiG,EAFI,wBAEoBC,IACtBp7B,EAAAA,EAAAA,MAGEq7B,GAAcr2B,EAAAA,EAAAA,IAAuB,OAI3CxC,EAAAA,EAAAA,KAAU,KACRk4B,IAAa,KACXO,IAEAC,SAED,CAACD,EAAcC,KAElBI,EAAAA,GAAAA,GAAoBD,EAAYl2B,SAAUy1B,GAE1C,MAAMxF,GAAc90B,EAAAA,EAAAA,KAAa9C,IAC/B03B,EAAS,CAAE13B,GAAAA,EAAI+9B,sBAAsB,IACrCP,IACA31B,YAAW,KACT81B,EAAuB,CAAE39B,GAAAA,MAjCC,OAmC3B,CAAC03B,EAAUiG,EAAwBH,IAEhCz6B,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKS,UAAU,gCACZ25B,GACC,0BAAK35B,UAAU,oBAAoBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC3D,0BAAKwF,IAAK20B,EAAap6B,UAAU,0BAC9B25B,EAAW1W,KAAKK,GACf,0BAAKtjB,UAAU,gBAAgBE,QAAS,IAAMi0B,EAAY7Q,GAAShhB,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC3F,mBAAC+Y,GAAA,EAAD,CAAQC,KAAMiM,EAAU5B,KACxB,0BAAKtjB,UAAU,kBAAiBmZ,EAAAA,GAAAA,IAAWoV,EAAAA,EAAAA,IAAuBrJ,EAAU5B,KA9C/E,WAoDNuW,GACC,0BAAK75B,UAAU,uBACb,yBAAIA,UAAU,2CAA2CsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAChFX,EAAK,UAEN,mBAACM,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNI,UAAU,qBACVD,QAASi6B,EACTlZ,MAAO3hB,EAAK2hB,OAEZ,wBAAGjhB,UAAU,iBAGhB65B,EAAqB5W,KAAK1mB,GACzB,mBAAC,GAAD,CACEmO,OAAQnO,EACR2D,QAASi0B,Y,0BCuBvB,UAAer2B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAChC,IAAKwO,EACH,MAAO,GAGT,MAAMkf,GAAoB5J,EAAAA,EAAAA,IAAqBtV,GAE/C,MAAO,CACLA,KAAAA,EACAqhB,aAAcv8B,EAAOu8B,gBACjBnC,GAAqB,CAAEoC,iBAAiBtvB,EAAAA,EAAAA,IAAWlN,EAAQo6B,OAZjDr6B,EA9E2B,IAOzC,IAP0C,QAC9CZ,EAD8C,YAE9Cs9B,EAF8C,OAG9C/vB,EAH8C,KAI9CwO,EAJ8C,gBAK9CshB,EAL8C,aAM9CD,GACI,EACJ,MAAM,aAAE7hB,IAAiB3Z,EAAAA,EAAAA,MAEnB27B,GAAiBhtB,EAAAA,EAAAA,IAA4BvQ,GAC7Cw9B,GAAe5tB,EAAAA,EAAAA,IAAS5N,EAAAA,EAAAA,IAAoBhC,EAAS,UACrDy9B,EAAezzB,SAAQ0zB,EAAAA,EAAAA,IAAqB19B,IAE5Cg3B,GAAc90B,EAAAA,EAAAA,KAAY,KAC9BqZ,EAAa,CAAEhO,OAAAA,EAAQE,UAAWzN,EAAQZ,OACzC,CAACmO,EAAQgO,EAAcvb,EAAQZ,KAE5B+C,GAAOC,EAAAA,EAAAA,KAEP24B,EAAYoB,GAAmBnF,GAErC,GAAKjb,EAIL,OACE,mBAACiK,GAAA,EAAD,CACEnjB,UAAU,kCACV2F,QAASvF,EAAAA,GACTF,QAASi0B,EACT+D,UAAWA,GAEX,mBAAClf,GAAA,EAAD,CACEE,KAAMA,EACND,KAAMuhB,EACNM,gBAAiBN,MAAAA,OAAF,EAAEA,EAAiBO,OAClCR,aAAcA,IAEhB,0BAAKv6B,UAAU,QACb,0BAAKA,UAAU,YACb,0BAAKA,UAAU,SACb,yBAAIsC,IAAI,SAAQ6W,EAAAA,GAAAA,IAAW6hB,EAAAA,EAAAA,GAAa17B,EAAM4Z,EAAMshB,KACnDthB,EAAK+hB,YAAc,mBAACC,GAAA,EAAD,OAEtB,0BAAKl7B,UAAU,gBACb,mBAACm7B,GAAA,EAAD,CAAMn7B,UAAU,SACbo7B,EAAAA,EAAAA,IAAoB97B,EAAqB,IAAfnC,EAAQkc,SAKzC,0BAAKrZ,UAAU,YACb,0BAAKA,UAAU,UAAUsC,IAAI,QASvC,SACEhD,EAAcnC,EAAqBmQ,EAAkBmtB,EAAsBG,GAE3E,OAAKttB,EAKH,2BAAMtN,UAAU,iBACd,0BAAKxE,IAAK8R,EAASuB,IAAI,GAAG7O,UAAW46B,EAAe,aAAU36B,KAC7D4L,EAAAA,EAAAA,IAAgB1O,IAAY,wBAAG6C,UAAU,eACzCq7B,EAAAA,EAAAA,GAAqB/7B,EAAMnC,GAAS,EAAMs9B,KAPtCY,EAAAA,EAAAA,GAAqB/7B,EAAMnC,OAAS8C,EAAWw6B,GAZ7Ca,CAAch8B,EAAMnC,EAASw9B,GAAgBD,EAAgBD,EAAaG,WC5CvF,IAAe98B,EAAAA,EAAAA,KA5CmB,IAE5B,IAF6B,WACjCy9B,EADiC,SACrBtD,GACR,EACJ,MAAMuD,GAAc/7B,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgC87B,GAE9B,GADgBA,EAAWE,MAAM,0BACpB,CACX,MAAMpiB,EAAO,IAAIhI,KAAKkqB,GACtB,MAAO,CAAC,CAAEliB,KAAAA,EAAMpY,MAAMsrB,EAAAA,EAAAA,IAAmBlT,KAG3C,MAAMqiB,EAAa,GACbC,EAAc,IAAItqB,KAClB8Z,EAAcwQ,EAAYjR,cAC1BkR,EAAaD,EAAYtQ,UAAa,IAAIha,KAAM,GAAE8Z,KAAeoQ,KAAelQ,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAIjI,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAM7J,EAAO,IAAIhI,KAAM,GAAEuqB,EAAa1Y,KAAKqY,KAC3CG,EAAWxP,KAAK,CAAE7S,KAAAA,EAAMpY,MAAMsrB,EAAAA,EAAAA,IAAmBlT,KAGnD,OAAOqiB,EAtC2BG,CAAuBN,IAAa,CAACA,IACvE,OACE,8BAASv7B,UAAU,6CAChBw7B,EAAYvY,KAAI,IAAoB,IAAnB,KAAE5J,EAAF,KAAQpY,GAAW,EACnC,OACE,0BACEf,QAAS,IAAM+3B,EAAS5e,GACxBrZ,UAAU,YACVyJ,IAAKxI,GAEL,wBAAGjB,UAAU,kBACb,+BAAOiB,W,0BCwBnB,MAGMw4B,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAK,GA+NjD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAQ0lB,KAAMC,GAAc3lB,EAAOylB,OAE3BY,QAASyX,GAAoB99B,EAAOomB,aAAe,GAE3D,IAAK0X,EACH,MAAO,CACLnY,UAAAA,GAIJ,MAAM,cACJvC,EADI,SACW6N,EADX,aACqBsL,GACvBv8B,GACE,eACJ+9B,EADI,cACYC,EADZ,aAC2BC,EAD3B,cACyCnhB,GAC3C9c,EAAO87B,cACH/U,QAASmX,EAAe7X,QAAS8X,GAAkBH,GAAiB,IACpEjX,QAASqX,EAAc/X,QAASgY,GAAiBJ,GAAgB,IACjEK,SAAUC,GAA2BtN,EAG7C,MAAO,CACL7N,cAAAA,EACA0a,gBAAAA,EACAM,aAAAA,EACAC,aAAAA,EACAH,cAAAA,EACAC,cAAAA,EACAthB,SATeC,MAAAA,GAAH,UAAGA,EAAe7Z,YAAlB,aAAG,EAAqB4Z,SAUpC0hB,uBAAAA,EACA5Y,UAAAA,EACAoY,eAAAA,EACAxB,aAAAA,KAlCcx8B,EA7N2B,IAKzC,IAL0C,YAC9C08B,EAD8C,WACjCc,EADiC,gBACrBiB,EADqB,cACJpb,EADI,gBAE9C0a,EAF8C,aAE7BM,EAF6B,aAEfC,EAFe,cAEDH,EAFC,cAEcC,EAFd,SAG9CthB,EAH8C,uBAGpC0hB,EAHoC,UAGZ5Y,EAHY,eAGDoY,EAHC,aAGexB,EAHf,QAI9CR,EAJ8C,mBAIrC0C,GACL,EACJ,MAAM,SACJxI,EADI,uBACMiG,EADN,qBAC8BwC,EAD9B,sBACoDC,IACtD59B,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAENq9B,EAAqBC,IAA0Bv7B,EAAAA,EAAAA,KAAkB,IACjEw7B,EAAsBC,IAA2Bz7B,EAAAA,EAAAA,KAAkB,GAEpEg0B,GAAiBj2B,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAEqS,GAAkD,EAClF6oB,GAAgB7oB,IAAckkB,EAAAA,GAAAA,WAChC6D,IAAa,KACXiD,EAAqB,CACnB3iB,KAAM,OACNijB,MAAOvC,SAIZ,CAACF,EAAcmC,EAAsBjC,IAElCwC,GAAkB59B,EAAAA,EAAAA,KACrB9C,IACC03B,EAAS,CAAE13B,GAAAA,EAAI+9B,sBAAsB,IAEjC/9B,IAAO6kB,GACT8Y,EAAuB,CAAE39B,GAAAA,IAGtB6D,EAAAA,IACH25B,MAGJ,CAAC3Y,EAAe6S,EAAUiG,EAAwBH,IAG9CmD,GAAwB79B,EAAAA,EAAAA,KAAa9C,IACzCogC,EAAsB,CAAEpgC,GAAAA,MACvB,CAACogC,IAEEV,GAAex8B,EAAAA,EAAAA,KAAQ,KAC3B,IAAKg7B,GAAgBA,EAAY0C,WAAW,MAAQ1C,EAAY/8B,OAAS,EACvE,OAAO0/B,GAAAA,EAGT,MAAMC,EAAmB,IACnBjc,EAAgB,CAACA,GAAiB,MAClC0a,GAAmB,IAGnB5W,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAC9B4Z,GAAkB/X,EAAAA,EAAAA,IACtB8X,EAAkBnY,EAAWuV,EAAarZ,EAAe9hB,EAAK,kBAGhE,MAAO,KACF+lB,EAAAA,EAAAA,KAAYP,EAAAA,GAAAA,IAAO,IAChBwY,GAAmB,MACnBlB,GAAgB,MAChBC,GAAgB,KAClB1Y,OAAW1jB,EAAWmhB,EAAgB,CAACA,QAAiBnhB,MAE7D,CAACw6B,EAAarZ,EAAe0a,EAAiBx8B,EAAM88B,EAAcC,EAAc1Y,IAE7EqY,GAAgBv8B,EAAAA,EAAAA,KAAQ,KACvBg7B,GAAeA,EAAY/8B,OA3EO,IA2EyCw+B,IAAkBC,EACzFiB,GAAAA,GAGF/X,EAAAA,EAAAA,KACLP,EAAAA,GAAAA,IAAO,IAAIoX,KAAkBC,IAC7BxY,GACA,IAED,CAACA,EAAWuY,EAAeC,EAAe1B,IAEvC8C,GAAgB99B,EAAAA,EAAAA,KAAQ,KACtBg7B,GAAgBc,IAAgB1gB,GAAgC,IAApBA,EAASnd,OAIpDmd,EACJoI,KAAK1mB,IAAO,MACX,MAAOmO,EAAQE,GAAarO,EAAGihC,MAAM,KAErC,OAAOjB,MAAAA,GAAP,UAAOA,EAAyB7xB,UAAhC,aAAO,EAAkCgZ,KAAKzJ,OAAOrP,OAEtD2W,OAAmBpa,SACnBs2B,MAAK,CAACC,EAAGC,IAAMA,EAAEtkB,KAAOqkB,EAAErkB,OAVpB+jB,GAAAA,GAWR,CAACviB,EAAU0hB,EAAwB9B,EAAac,IAE7CqC,GAA2Bv+B,EAAAA,EAAAA,KAAY,KAC3Cw9B,GAAwBD,KACvB,CAACA,IAEEiB,GAA4Bx+B,EAAAA,EAAAA,KAAY,KAC5C09B,GAAyBD,KACxB,CAACA,IAmBEgB,EAAe/B,IAAmBA,EAAetY,QAAUsY,EAAe9M,WAC1EgN,EAAav+B,SAAWs+B,EAAct+B,SAAW6/B,EAAc7/B,OAErE,OAAK+8B,GAAgBc,EAKnB,mBAAC5Y,GAAA,EAAD,CACE3iB,UAAU,2BACV4iB,MAAO2a,EACP1a,WAAYyS,EAEZyI,sBAAoB,EACpBC,YAAU,GAETxB,GACC,0BAAKx8B,UAAU,4CACb,mBAAC,GAAD,CACEu7B,WAAYiB,EACZvE,SAAUwE,KAIfqB,GACC,mBAACG,GAAA,EAAD,CACEh9B,KAAM3B,EAAK,6BACXsxB,YAAatxB,EAAK,0CAGrB6H,QAAQ80B,EAAav+B,SACpB,0BAAKsC,UAAU,2CAA2CsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjFg8B,EAAahZ,KAAK1mB,GACjB,mBAAC2hC,GAAA,EAAD,CACEC,aAAc5hC,EACd2D,QAASg9B,EACTkB,SAAU7hC,OAKjB4K,QAAQ80B,EAAav+B,SACpB,0BAAKsC,UAAU,kBACb,yBAAIA,UAAU,kBAAkBsC,IAAKhD,EAAK2hB,MAAQ,YAAShhB,GACxDg8B,EAAav+B,OAzKK,GA0KjB,mBAACy9B,GAAA,EAAD,CAAMj7B,QAAS09B,GACZt+B,EAAKs9B,EAAsB,2BAA6B,6BAG5Dt9B,EAAK,oCAEP28B,EAAahZ,KAAI,CAAC1mB,EAAIokB,KACrB,GAAKic,KAAuBjc,GAjLT,GAqLnB,OACE,mBAAC,GAAD,CACEjW,OAAQnO,EACR2D,QAAS+8B,QAMlB91B,QAAQ60B,EAAct+B,SACrB,0BAAKsC,UAAU,kBACb,yBAAIA,UAAU,kBAAkBsC,IAAKhD,EAAK2hB,MAAQ,YAAShhB,GACxD+7B,EAAct+B,OAjMI,GAkMjB,mBAACy9B,GAAA,EAAD,CAAMj7B,QAAS29B,GACZv+B,EAAKw9B,EAAuB,2BAA6B,6BAG7Dx9B,EAAK,mCAEP08B,EAAc/Y,KAAI,CAAC1mB,EAAIokB,KACtB,GAAKmc,KAAwBnc,GAzMV,GA6MnB,OACE,mBAAC,GAAD,CACEjW,OAAQnO,EACRu8B,cAAY,EACZ54B,QAAS+8B,QAMlB91B,QAAQo2B,EAAc7/B,SACrB,0BAAKsC,UAAU,kBACb,yBAAIA,UAAU,kBAAkBsC,IAAKhD,EAAK2hB,MAAQ,YAAShhB,GAAYX,EAAK,mBAC3Ei+B,EAActa,KA9GvB,SAA4B9lB,GAC1B,MAAM8D,GAAOo6B,EAAAA,EAAAA,GAAqB/7B,EAAMnC,GAClC+b,EAAOyK,EAAUxmB,EAAQuN,QAE/B,GAAKzJ,GAASiY,EAId,OACE,mBAAC,GAAD,CACExO,OAAQvN,EAAQuN,OAChBvN,QAASA,EACTs9B,YAAaA,SASV,mBAAC,GAAD,CAAgBV,QAASA,QClJ9BN,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAK,GA0FjD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ0lB,KAAMC,GAAc3lB,EAAOylB,OAC7B,cAAErC,EAAe6N,UAAYqN,SAAUC,GAAvC,aAAiEhC,GAAiBv8B,GAClF,eAAE+9B,EAAF,cAAkBjhB,GAAkB9c,EAAO87B,cAE3C,SAAEjf,IAAcC,MAAAA,OAAD,EAACA,EAAe7Z,OAAS,GAE9C,MAAO,CACLmgB,cAAAA,EACAvG,SAAAA,EACA0hB,uBAAAA,EACA5Y,UAAAA,EACAoY,eAAAA,EACAxB,aAAAA,KAdcx8B,EAxFkC,IAUhD,IAViD,YACrD08B,EADqD,cAErDrZ,EAFqD,gBAGrDob,EAHqD,SAIrD3hB,EAJqD,uBAKrD0hB,EALqD,UAMrD5Y,EANqD,eAOrDoY,EAPqD,aAQrDxB,EARqD,mBASrDkC,GACI,EACJ,MAAM,qBAAEC,IAAyB39B,EAAAA,EAAAA,MAE3BO,GAAOC,EAAAA,EAAAA,KACP+1B,GAAiBj2B,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAEqS,GAAkD,EAClF6oB,GAAgB7oB,IAAckkB,EAAAA,GAAAA,WAChC6D,IAAa,KACXiD,EAAqB,CACnB3iB,KAAM,OACNijB,MAAOvC,EACP/vB,OAAQ0W,SAIb,CAACA,EAAemZ,EAAcmC,EAAsBjC,IAEjD8C,GAAgB99B,EAAAA,EAAAA,KAAQ,IACvBob,GAAgC,IAApBA,EAASnd,OAInBmd,EACJoI,KAAK1mB,IAAO,MACX,MAAOmO,EAAQE,GAAarO,EAAGihC,MAAM,KAErC,OAAOjB,MAAAA,GAAP,UAAOA,EAAyB7xB,UAAhC,aAAO,EAAkCgZ,KAAKzJ,OAAOrP,OAEtD2W,OAAmBpa,SACnBs2B,MAAK,CAACC,EAAGC,IAAMA,EAAEtkB,KAAOqkB,EAAErkB,OAVpB+jB,GAAAA,GAWR,CAACviB,EAAU0hB,IAmBRuB,EAAe/B,IAAmBA,EAAetY,QAAUsY,EAAe9M,WAAasO,EAAc7/B,OAE3G,OACE,0BAAKsC,UAAU,cACb,mBAAC2iB,GAAA,EAAD,CACE3iB,UAAU,yCACV4iB,MAAO2a,EACP1a,WAAYyS,EACZ0I,YAAU,GAETxB,GACC,0BAAKx8B,UAAU,4CACb,mBAAC,GAAD,CACEu7B,WAAYiB,EACZvE,SAAUwE,KAIfqB,GACC,mBAACG,GAAA,EAAD,CACEh9B,KAAM3B,EAAK,6BACXsxB,YAAatxB,EAAK,0CAGrBi+B,EAActa,KAzCrB,SAA4B9lB,GAC1B,MAAM8D,GAAOo6B,EAAAA,EAAAA,GAAqB/7B,EAAMnC,GAClC+b,EAAOyK,EAAUxmB,EAAQuN,QAE/B,GAAKzJ,GAASiY,EAId,OACE,mBAAC,GAAD,CACExO,OAAQvN,EAAQuN,OAChBvN,QAASA,EACTs9B,YAAaA,aCpEd,SAAS4D,GAAsBtkB,GACpC,MAAO,CAAC/b,EAAqBqN,KAAe,QAC1C,MAAQqY,KAAMC,GAAc3lB,EAAOylB,OAC3BC,KAAMwB,GAAclnB,EAAOonB,OAC7B,eACJ2W,EADI,cACYjhB,EADZ,OAC2BpQ,GAC7B1M,EAAO87B,aAKLwE,EAAuB,UAATvkB,EAAmBA,EAAQ1O,MAAAA,GAAAA,EAAOkzB,QAAU,QAAU,SAElEjC,SAAUC,GAA2Bv+B,EAAOixB,SAC9CpU,EAAWC,MAAAA,GAAH,UAAGA,EAAgBwjB,UAAnB,aAAG,EAA8BzjB,SAEzC2jB,EAAkBxgC,EAAOwgC,gBAAgBlC,SAE/C,MAAO,CACLmC,OAAOC,EAAAA,EAAAA,IAAY1gC,GACnB2gC,eAAwB1+B,IAAb4a,KACLkhB,GAAiB50B,QAAQ40B,EAAetY,OAASsY,EAAe9M,UACtEtL,UAAAA,EACAuB,UAAAA,EACAqX,uBAAAA,EACA1hB,SAAAA,EACA+jB,aAAcl0B,EACd8zB,gBAAAA,EACAK,gBAAiBn0B,EAAM,WAAGS,EAAAA,EAAAA,IAAWnN,EAAQ0M,UAAtB,aAAG,EAA4BvM,iBAAc8B,EACpEs6B,aAAcv8B,EAAOu8B,e,qCCxB3B,MAAMuE,GAAe,QAGfrF,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAK,GAqHjD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBsgC,GAAsBS,IADJ/gC,EAnH4B,IAQ1C,IAR2C,YAC/C08B,EAD+C,aAE/CmE,EAF+C,UAG/CD,EAH+C,uBAI/CpC,EAJ+C,SAK/C1hB,EAL+C,aAM/C0f,EAN+C,gBAO/CsE,GACI,EACJ,MAAM,qBACJnC,EADI,gBAEJ1hB,IACEjc,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,MAEtCzE,GAAOC,EAAAA,EAAAA,MAELw/B,QAASC,IAAgCC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS9vB,EACT+vB,WAzB0B,MA4BtB7J,GAAiBj2B,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAEqS,GAAkD,EAClF6oB,GAAgB7oB,IAAckkB,EAAAA,GAAAA,WAChC6D,IAAa,KACXiD,EAAqB,CACnB3iB,KAAM+kB,GACN9B,MAAOvC,EACP/vB,OAAQk0B,SAIb,CAACrE,EAAcmC,EAAsBjC,EAAamE,IAE/CrB,GAAgB99B,EAAAA,EAAAA,KAAQ,IACvBob,GAAa0hB,EAIX1hB,EAASoI,KAAK1mB,IAAO,MAC1B,MAAOmO,EAAQE,GAAarO,EAAGihC,MAAM,KAErC,iBAAOjB,EAAuB7xB,UAA9B,aAAO,EAAgCgZ,KAAKzJ,OAAOrP,OAClD2W,OAAOpa,SAPDi2B,GAAAA,GAQR,CAACb,EAAwB1hB,IAEtBukB,GAAoB//B,EAAAA,EAAAA,KAAY,CAACuL,EAAmBF,KACxDsQ,EAAgB,CACdtQ,OAAAA,EACAE,UAAAA,EACA/P,OAAQe,EAAAA,GAAAA,iBAET,CAACof,IA6BEqkB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BZ,EACpFa,EAAcH,GAAqBxkB,GAAYA,EAASnd,OAAS,IAAM+8B,EACvEgF,EAAgBJ,GAAqBxkB,GAAYA,EAASnd,OAAS,GAAK+8B,EAExEv4B,GAAaC,EAAAA,EAAAA,GACjB,+BACAs9B,GAAiB,aAGnB,OACE,0BAAKh6B,IAAK2J,EAAcpP,UAAU,cAChC,mBAAC2iB,GAAA,EAAD,CACE3iB,UAAWkC,EACX0gB,MAAO2a,EACPmC,aAAejF,EAAyB,YAAX,SAC7B5X,WAAYyS,EACZ0I,YAAU,IAERqB,GAAqB,mBAAC7b,GAAA,EAAD,MACtB6b,KAAuBxkB,GAAgC,IAApBA,EAASnd,SAC3C,mBAACugC,GAAA,EAAD,CACEh9B,KAAM3B,EAAK,6BACXsxB,YAAatxB,EAAK,0CAGrBkgC,GAlDH,0BAAKx/B,UAAU,aAAasC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACnDs9B,EAActa,KAAK9lB,GAClB,mBAACwiC,GAAA,EAAD,CACEl2B,IAAKtM,EAAQZ,GACbqjC,SAAS,eACTziC,QAASA,EACTgB,YAAa0gC,GAAmB1hC,EAAQgB,YACxC0hC,oBAAqBb,EACrB9+B,QAASk/B,OA2CZK,GAnCElC,EAActa,KAAK9lB,GACxB,mBAAC,GAAD,CACEsM,IAAKtM,EAAQZ,GACbmO,OAAQvN,EAAQuN,OAChBvN,QAASA,Y,wBCnFjB,MAAM2hC,GAAe,QAGfrF,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAK,GA2GjD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBsgC,GAAsBS,IADJ/gC,EAzG2B,IAUzC,IAV0C,YAC9C08B,EAD8C,aAE9CmE,EAF8C,UAG9CD,EAH8C,UAI9Chb,EAJ8C,UAK9CuB,EAL8C,uBAM9CqX,EAN8C,SAO9C1hB,EAP8C,aAQ9C0f,EAR8C,gBAS9CsE,GACI,EACJ,MAAM,qBACJnC,EADI,aAEJhkB,IACE3Z,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,MAEtCzE,GAAOC,EAAAA,EAAAA,MAELw/B,QAASC,IAAgCC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS9vB,EACT+vB,WA3B0B,MA8BtB7J,GAAiBj2B,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAEqS,GAAkD,EAClF6oB,GAAgB7oB,IAAckkB,EAAAA,GAAAA,WAChC6D,IAAa,KACXiD,EAAqB,CACnB3iB,KAAM+kB,GACN9B,MAAOvC,EACP/vB,OAAQk0B,SAIb,CAACrE,EAAcmC,EAAsBjC,EAAamE,IAE/CrB,GAAgB99B,EAAAA,EAAAA,KAAQ,IACvBob,GAAa0hB,EAIX1hB,EAASoI,KAAK1mB,IAAO,MAC1B,MAAOmO,EAAQE,GAAarO,EAAGihC,MAAM,KAErC,iBAAOjB,EAAuB7xB,UAA9B,aAAO,EAAgCgZ,KAAKzJ,OAAOrP,OAClD2W,OAAOpa,SAPDi2B,GAAAA,GAQR,CAACb,EAAwB1hB,IAEtBilB,GAAqBzgC,EAAAA,EAAAA,KAAY,CAACuL,EAAmBF,KACzDgO,EAAa,CAAEhO,OAAAA,EAAQE,UAAAA,MACtB,CAAC8N,IA8BE2mB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BZ,EAE1F,OACE,0BAAKl5B,IAAK2J,EAAcpP,UAAU,cAChC,mBAAC2iB,GAAA,EAAD,CACE3iB,UAAU,8CACV4iB,MAAO2a,EACP1a,WAAYyS,EACZ0I,YAAU,IAERqB,GAAqB,mBAAC7b,GAAA,EAAD,MACtB6b,KAAuBxkB,GAAgC,IAApBA,EAASnd,SAC3C,mBAACugC,GAAA,EAAD,CACEh9B,KAAM3B,EAAK,6BACXsxB,YAAatxB,EAAK,0CAGrB+/B,GAAqBxkB,GAAYA,EAASnd,OAAS,GA5CjD6/B,EAActa,KAAI,CAAC9lB,EAASwjB,KACjC,MAAMof,EAAkC,IAAVpf,IACzBqf,EAAAA,EAAAA,IAAY7iC,EAAQkc,SAAU2mB,EAAAA,EAAAA,IAAYzC,EAAc5c,EAAQ,GAAGtH,MACxE,OACE,0BACErZ,UAAU,sBACVsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,EAC1BwJ,IAAKtM,EAAQZ,IAEZwjC,GACC,wBAAG//B,UAAU,kBAAkBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,IACtDggC,EAAAA,EAAAA,IAAmB3gC,EAAM,IAAI+R,KAAoB,IAAflU,EAAQkc,QAG/C,mBAAC6mB,GAAA,EAAD,CACEz2B,IAAKtM,EAAQZ,GACbY,QAASA,EACT2b,aAAaqnB,EAAAA,GAAAA,GAAc7gC,EAAMnC,EAASwmB,EAAWuB,GACrD/mB,YAAa0gC,GAAmB1hC,EAAQgB,YACxC0hC,oBAAqBb,EACrBoB,eAAgBN,c,eC9E5B,MAAMhB,GAAe,YAGfrF,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAK,GA4GjD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBsgC,GAAsBS,IADJ/gC,EA1G2B,IAUzC,IAV0C,YAC9C08B,EAD8C,aAE9CmE,EAF8C,UAG9CD,EAH8C,UAI9Chb,EAJ8C,UAK9CuB,EAL8C,uBAM9CqX,EAN8C,SAO9C1hB,EAP8C,gBAQ9C2jB,EAR8C,aAS9CjE,GACI,EACJ,MAAM,qBACJmC,EADI,aAEJhkB,IACE3Z,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,MAEtCzE,GAAOC,EAAAA,EAAAA,MAELw/B,QAASC,IAAgCC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS9vB,EACT+vB,WA3B0B,MA8BtB7J,GAAiBj2B,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAEqS,GAAkD,EAClF6oB,GAAgB7oB,IAAckkB,EAAAA,GAAAA,WAChC6D,IAAa,KACXiD,EAAqB,CACnB3iB,KAAM+kB,GACN9B,MAAOvC,EACP/vB,OAAQk0B,SAIb,CAACrE,EAAcmC,EAAsBjC,EAAamE,IAE/CrB,GAAgB99B,EAAAA,EAAAA,KAAQ,IACvBob,GAAa0hB,EAIX1hB,EAASoI,KAAK1mB,IAAO,MAC1B,MAAOmO,EAAQE,GAAarO,EAAGihC,MAAM,KAC/BrgC,EAAO,UAAGo/B,EAAuB7xB,UAA1B,aAAG,EAAgCgZ,KAAKzJ,OAAOrP,IAE5D,OAAOzN,IAAW2Q,EAAAA,EAAAA,IAAmB3Q,GAAWA,OAAU8C,KACzDshB,OAAOpa,SARDi2B,GAAAA,GASR,CAACb,EAAwB1hB,IAEtBilB,GAAqBzgC,EAAAA,EAAAA,KAAY,CAACuL,EAAmBF,KACzDgO,EAAa,CAAEhO,OAAAA,EAAQE,UAAAA,MACtB,CAAC8N,IA8BE2mB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BZ,EAE1F,OACE,0BAAKl5B,IAAK2J,EAAcpP,UAAU,cAChC,mBAAC2iB,GAAA,EAAD,CACE3iB,UAAU,8CACV4iB,MAAO2a,EACP1a,WAAYyS,EACZ0I,YAAU,IAERqB,GAAqB,mBAAC7b,GAAA,EAAD,MACtB6b,KAAuBxkB,GAAgC,IAApBA,EAASnd,SAC3C,mBAACugC,GAAA,EAAD,CACEh9B,KAAM3B,EAAK,6BACXsxB,YAAatxB,EAAK,0CAGrB+/B,GAAqBxkB,GAAYA,EAASnd,OAAS,GA5CjD6/B,EAActa,KAAI,CAAC9lB,EAASwjB,KAAU,MAC3C,MAAMof,EAAkC,IAAVpf,IACzBqf,EAAAA,EAAAA,IAAY7iC,EAAQkc,SAAU2mB,EAAAA,EAAAA,IAAYzC,EAAc5c,EAAQ,GAAGtH,MACxE,OACE,0BACErZ,UAAU,sBACVyJ,IAAKtM,EAAQZ,IAEZwjC,GACC,wBAAG//B,UAAU,oBAAmBigC,EAAAA,EAAAA,IAAmB3gC,EAAM,IAAI+R,KAAoB,IAAflU,EAAQkc,QAE5E,mBAACgnB,GAAA,EAAD,CACEljC,QAASA,EACTmjC,UAAQ,EACRC,SAAUpjC,EAAQkc,KAClBmnB,SAAO,EACPloB,QAAQ6nB,EAAAA,GAAAA,GAAc7gC,EAAMnC,EAASwmB,EAAWuB,GAChDllB,UAAU,cACV/B,cAAa,UAAEugC,EAAgBrhC,EAAQuN,eAA1B,aAAE,EAAiClO,SAASW,EAAQZ,IACjEsjC,oBAAqBb,EACrByB,YAAaX,c,eCnFzB,MAAMrG,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAK,GA8GjD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClBsgC,GAAsB,SADJtgC,EA5G4B,IAY1C,IAZ2C,MAC/C0gC,EAD+C,QAE/CF,EAF+C,YAG/C9D,EAH+C,aAI/CmE,EAJ+C,UAK/CD,EAL+C,UAM/Chb,EAN+C,UAO/CuB,EAP+C,uBAQ/CqX,EAR+C,SAS/C1hB,EAT+C,aAU/C0f,EAV+C,gBAW/CiE,GACI,EACJ,MAAM,qBACJ9B,EADI,aAEJhkB,EAFI,gBAGJgoB,IACE3hC,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,KACP++B,EAAcC,EAAU,QAAU,QAClCjJ,GAAiBj2B,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAEqS,GAAkD,EAClF6oB,GAAgB7oB,IAAckkB,EAAAA,GAAAA,WAChC6D,IAAa,KACXiD,EAAqB,CACnB3iB,KAAMukB,EACNtB,MAAOvC,EACP/vB,OAAQk0B,SAIb,CAACN,EAAa/D,EAAcmC,EAAsBjC,EAAamE,IAE5DrB,GAAgB99B,EAAAA,EAAAA,KAAQ,IACvBob,GAAa0hB,EAIX1hB,EAASoI,KAAK1mB,IAAO,MAC1B,MAAOmO,EAAQE,GAAarO,EAAGihC,MAAM,KAErC,iBAAOjB,EAAuB7xB,UAA9B,aAAO,EAAgCgZ,KAAKzJ,OAAOrP,OAClD2W,OAAOpa,SAPDi2B,GAAAA,GAQR,CAACb,EAAwB1hB,IAEtBilB,GAAqBzgC,EAAAA,EAAAA,KAAY,CAACuL,EAAmBF,KACzDgO,EAAa,CAAEhO,OAAAA,EAAQE,UAAAA,MACtB,CAAC8N,IAEEioB,GAAkBthC,EAAAA,EAAAA,KAAY,CAACuL,EAAmBF,KACtDg2B,EAAgB,CAAEh2B,OAAAA,EAAQE,UAAAA,MACzB,CAAC81B,IAkCErB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BZ,EAE1F,OACE,0BAAK3+B,UAAU,cACb,mBAAC2iB,GAAA,EAAD,CACE3iB,UAAU,8CACV4iB,MAAO2a,EACP1a,WAAYyS,EACZ0I,YAAU,IAERqB,GAAqB,mBAAC7b,GAAA,EAAD,MACtB6b,KAAuBxkB,GAAgC,IAApBA,EAASnd,SAC3C,mBAACugC,GAAA,EAAD,CACEh9B,KAAM3B,EAAK,6BACXsxB,YAAatxB,EAAK,0CAGrB+/B,GAAqBxkB,GAAYA,EAASnd,OAAS,GAhDjD6/B,EAActa,KAAI,CAAC9lB,EAASwjB,KAAU,MAC3C,MAAMof,EAAkC,IAAVpf,IACzBqf,EAAAA,EAAAA,IAAY7iC,EAAQkc,SAAU2mB,EAAAA,EAAAA,IAAYzC,EAAc5c,EAAQ,GAAGtH,MACxE,OACE,0BACErZ,UAAU,sBACVyJ,IAAKtM,EAAQZ,IAEZwjC,GACC,wBAAG//B,UAAU,kBAAkBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,IACtDggC,EAAAA,EAAAA,IAAmB3gC,EAAM,IAAI+R,KAAoB,IAAflU,EAAQkc,QAG/C,mBAACunB,GAAA,EAAD,CACEn3B,IAAKtM,EAAQZ,GACbkiC,MAAOA,EACPthC,QAASA,EACTtC,OAAQgmC,EAAAA,GAAAA,OACR/nB,aAAaqnB,EAAAA,GAAAA,GAAc7gC,EAAMnC,EAASwmB,EAAWuB,GACrD7L,KAAMlc,EAAQkc,KACdkhB,aAAcA,EACdv6B,UAAU,cACVmK,OAAQw2B,EACRF,YAAaX,EACb7hC,cAAa,UAAEugC,EAAgBrhC,EAAQuN,eAA1B,aAAE,EAAiClO,SAASW,EAAQZ,gBCvEvEukC,GAAO,CACX,CAAE/mB,KAAMgnB,EAAAA,GAAAA,SAA8Bna,MAAO,uBAC7C,CAAE7M,KAAMgnB,EAAAA,GAAAA,MAA2Bna,MAAO,mBAC1C,CAAE7M,KAAMgnB,EAAAA,GAAAA,MAA2Bna,MAAO,mBAC1C,CAAE7M,KAAMgnB,EAAAA,GAAAA,MAA2Bna,MAAO,mBAC1C,CAAE7M,KAAMgnB,EAAAA,GAAAA,MAA2Bna,MAAO,mBAC1C,CAAE7M,KAAMgnB,EAAAA,GAAAA,MAA2Bna,MAAO,oBAGtCoa,GAAY,CAChB,CAAEjnB,KAAMgnB,EAAAA,GAAAA,SAA8Bna,MAAO,mBAC1Cka,GAAKG,MAAM,IAGVC,GAA0BnkC,OAAOw5B,KAAKwK,EAAAA,IAAqBrjC,OAAS,EA+F1E,IAAeI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEmjC,EAAF,OAAkBz2B,GAAW1M,EAAO87B,aAE1C,MAAO,CAAEqH,eAAAA,EAAgBz2B,OAAAA,KAJT3M,EA7F0B,IAOxC,IAPyC,YAC7C08B,EAD6C,WAE7Cc,EAF6C,SAG7CjwB,EAH6C,eAI7C61B,EAAiBJ,EAAAA,GAAAA,SAJ4B,OAK7Cr2B,EAL6C,QAM7CqvB,GACI,EACJ,MAAM,uBACJqH,EADI,oBAEJC,IACEtiC,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACN+hC,EAAWC,IAAgBjgC,EAAAA,EAAAA,IAAS6/B,GACrC3E,GAAkB/8B,EAAAA,EAAAA,KAAQ,KAAM+hC,EAAAA,EAAAA,IAAgB/G,IAAc,CAACA,IAE/DgH,GAAkBpiC,EAAAA,EAAAA,KAAashB,IACnC,MAAM+gB,EAAMZ,GAAKngB,GACjBygB,EAAuB,CAAEjwB,QAASuwB,EAAI3nB,OACtCwnB,EAAa5gB,KACZ,CAACygB,IAEEO,GAAyBtiC,EAAAA,EAAAA,KAAa4Q,IAC1CoxB,EAAoB,CAAEhoB,KAAMpJ,EAAMob,UAAY,QAC7C,CAACgW,KAEJxgB,EAAAA,EAAAA,IAAevV,EAAUyuB,OAAS95B,OAAWA,GAAW,GAGxD,MAAMmP,GAAerL,EAAAA,EAAAA,IAAuB,MACtC+c,GAAgBqB,EAAAA,GAAAA,GAA0B/S,EAAc9D,OAAUrL,EAAW,oBAAoB,GAEvG,OACE,0BAAKD,UAAU,aAAayF,IAAK2J,EAAckT,UAAWxB,GACxD,mBAAC8gB,GAAA,EAAD,CAASN,UAAWA,EAAWO,KAAMn3B,EAASs2B,GAAYF,GAAMgB,YAAaL,IAC7E,mBAACnoB,EAAA,EAAD,CACE6H,KAAM7hB,EAAK2hB,MAAQ,sBAAwB,kBAC3C8gB,YAAab,GACbhgB,UAAWigB,GAEV,MACC,OAAQA,GACN,KAAKJ,EAAAA,GAAAA,SACH,OAAIr2B,EAEA,mBAAC,GAAD,CACE+vB,YAAaA,EACb+B,gBAAiBA,EACjBzC,QAASA,EACT0C,mBAAoBkF,IAKxB,mBAAC,GAAD,CACElH,YAAaA,EACbc,WAAYA,EACZiB,gBAAiBA,EACjBzC,QAASA,EACT0C,mBAAoBkF,IAG1B,KAAKZ,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAActG,YAAaA,IACpC,KAAKsG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAatG,YAAaA,IACnC,KAAKsG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAatG,YAAaA,IACnC,KAAKsG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEt3B,IAAI,QACJgxB,YAAaA,IAGnB,KAAKsG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEt3B,IAAI,QACJ80B,SAAO,EACP9D,YAAaA,IAGnB,QACE,SA5CL,S,eC9ET,MAAMuH,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuD,CAC3DC,EACAC,KAEA,OAAQA,EAAOxoB,MACb,IAAK,qBACH,MAAO,IACFuoB,EACHL,gBAAiBM,EAAOC,SAG5B,IAAK,cACH,MAAO,IACFF,EACHJ,SAAUK,EAAOC,SAGrB,IAAK,UACH,MAAO,IACFF,EACHH,KAAMI,EAAOC,SAGjB,IAAK,WACH,MAAO,IACFF,EACHF,MAAOG,EAAOC,SAGlB,IAAK,QACH,OAAOR,GAET,QACE,OAAOM,ICoNb,IAAexkC,EAAAA,EAAAA,KAnPsB,IAM/B,IANgC,cACpC2kC,EADoC,eAEpCC,EAFoC,QAGpC3I,EAHoC,aAIpC4I,EAJoC,eAKpCC,GACI,EACJ,MAAM,QACJC,EADI,iBAEJC,IACE/jC,EAAAA,EAAAA,OAEGgkC,EAAqBC,IAA0B1hC,EAAAA,EAAAA,KAAS,IACxD2hC,EAA0BC,IAA+B5hC,EAAAA,EAAAA,KAAS,GAEnE6hC,GAA0B9jC,EAAAA,EAAAA,KAAY,KAC1C2jC,GAAuB,KACtB,IAEGI,GAA2B/jC,EAAAA,EAAAA,KAAY,KAC3C2jC,GAAuB,KACtB,IAEGK,GAA+BhkC,EAAAA,EAAAA,KAAY,KAC/C6jC,GAA4B,KAC3B,IAEGI,GAAgCjkC,EAAAA,EAAAA,KAAY,KAChD6jC,GAA4B,KAC3B,IAEGK,GAAuBlkC,EAAAA,EAAAA,KAAY,KACvC+jC,IACAP,MACC,CAACO,EAA0BP,IAExBW,GAA4BnkC,EAAAA,EAAAA,KAAY,KAC5CikC,IACAR,EAAiB,CAAEvmC,GAAImmC,IACvB3I,MACC,CAAC2I,EAAgBY,EAA+BR,EAAkB/I,IAE/D0J,GAAsEhkC,EAAAA,EAAAA,KAAQ,IAC3E,QAAC,UAAEC,EAAF,OAAaC,GAAd,SACL,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL8F,QAASvF,EAAAA,GACTN,KAAK,UACLC,MAAM,cACNC,UAAWL,EAAS,SAAW,GAC/BO,QAASR,EACTS,UAAU,gBAEV,wBAAGH,UAAU,iBAGhB,IAEGV,GAAOC,EAAAA,EAAAA,KAyJb,OACE,0BAAKS,UAAU,eACb,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAAS65B,EACT55B,UAAWb,EAAK,mBAEhB,wBAAGU,UAAU,qBAhKnB,WACE,OAAQyiC,GACN,KAAKiB,EAAAA,GAAAA,YACH,OAAO,6BAAKpkC,EAAK,6BACnB,KAAKokC,EAAAA,GAAAA,QACH,OAAO,6BAAKpkC,EAAK,YACnB,KAAKokC,EAAAA,GAAAA,cACH,OAAO,6BAAKpkC,EAAK,qBACnB,KAAKokC,EAAAA,GAAAA,cACH,OAAO,6BAAKpkC,EAAK,kBACnB,KAAKokC,EAAAA,GAAAA,YACH,OAAO,6BAAKpkC,EAAK,iBACnB,KAAKokC,EAAAA,GAAAA,QACH,OAAO,6BAAKpkC,EAAK,oBACnB,KAAKokC,EAAAA,GAAAA,SACH,OAAO,6BAAKpkC,EAAK,aAEnB,KAAKokC,EAAAA,GAAAA,sBACH,OAAO,6BAAKpkC,EAAK,mBACnB,KAAKokC,EAAAA,GAAAA,2BACH,OAAO,6BAAKpkC,EAAK,aAEnB,KAAKokC,EAAAA,GAAAA,mBACH,OAAO,6BAAKpkC,EAAK,iBACnB,KAAKokC,EAAAA,GAAAA,gBACH,OAAO,6BAAKpkC,EAAK,oBACnB,KAAKokC,EAAAA,GAAAA,oBACH,OAAO,6BAAKpkC,EAAK,yBACnB,KAAKokC,EAAAA,GAAAA,kBACH,OAAO,6BAAKpkC,EAAK,oBACnB,KAAKokC,EAAAA,GAAAA,kBACH,OAAO,6BAAKpkC,EAAK,2BACnB,KAAKokC,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO,6BAAKpkC,EAAK,oBACnB,KAAKokC,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO,6BAAKpkC,EAAK,mBAEnB,KAAKokC,EAAAA,GAAAA,sBACH,OAAO,6BAAKpkC,EAAK,kBACnB,KAAKokC,EAAAA,GAAAA,oBACH,OAAO,6BAAKpkC,EAAK,iBAEnB,KAAKokC,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO,6BAAKpkC,EAAK,wBACnB,KAAKokC,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO,6BAAKpkC,EAAK,+BACnB,KAAKokC,EAAAA,GAAAA,wBACH,OAAO,6BAAKpkC,EAAK,0BACnB,KAAKokC,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO,6BAAKpkC,EAAK,iBACnB,KAAKokC,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO,6BAAKpkC,EAAK,uBACnB,KAAKokC,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO,oDACT,KAAKA,EAAAA,GAAAA,qBACH,OAAO,6BAAKpkC,EAAK,mCACnB,KAAKokC,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO,6BAAKpkC,EAAK,+BAEnB,KAAKokC,EAAAA,GAAAA,QACH,OAAO,6BAAKpkC,EAAK,YACnB,KAAKokC,EAAAA,GAAAA,oBACH,OAAO,6BAAKpkC,EAAK,cACnB,KAAKokC,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,0BAAK1jC,UAAU,wBACb,6BAAKV,EAAK,eAETojC,GACC,mBAACriC,EAAA,EAAD,CACEL,UAAU,qBACVM,QAASmjC,EACTljC,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASozB,aAAW,EAAC3zB,QAASmjC,GAC1C/jC,EAAK,aAMlB,KAAKokC,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,0BAAK1jC,UAAU,wBACXyiC,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,iCACnB,6BAAKpkC,EAAK,kBAEV,6BAAKA,EAAK,kBAGd,mBAACM,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNC,UAAU,gBACVE,QAASyiC,EACTxiC,UAAWb,EAAK,sBAEhB,wBAAGU,UAAU,iBAKrB,QACE,OACE,0BAAKA,UAAU,wBACb,6BAAKV,EAAK,aAEV,mBAACM,EAAA,EAAD,CACEC,OAAK,EACL8F,QAASvF,EAAAA,GACTN,KAAK,UACLC,MAAM,cACNG,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,aAC9BvjC,UAAWb,EAAK,6BAEhB,wBAAGU,UAAU,eAEf,mBAACK,EAAA,EAAD,CACEL,UAAU,qBACVM,QAASmjC,EACTljC,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASP,QAASijC,GAA0B7jC,EAAK,mBAkBvEqkC,GACD,mBAACvb,GAAA,EAAD,CACEzoB,OAAQojC,EACRx8B,QAAS68B,EACTniC,KAAM3B,EAAK,mBACX+oB,aAAc/oB,EAAK,0BACnBgpB,eAAgBib,EAChBK,sBAAoB,IAEtB,mBAACxb,GAAA,EAAD,CACEzoB,OAAQsjC,EACR18B,QAAS+8B,EACTriC,KAAM3B,EAAK,qBACX+oB,aAAc/oB,EAAK,UACnBgpB,eAAgBkb,EAChBI,sBAAoB,Q,wBC3O5B,MA4EA,IAAe9lC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEojB,EAAF,aAAiBmZ,GAAiBv8B,EAExC,MAAO,CACL6lC,YAAaziB,GAAgBlW,EAAAA,EAAAA,IAAWlN,EAAQojB,QAAiBnhB,EACjEs6B,aAAAA,KANcx8B,EA5E4B,IAM1C,IAN2C,SAC/CuN,EAD+C,eAE/Cs3B,EAF+C,QAG/C7I,EAH+C,YAI/C8J,EAJ+C,aAK/CtJ,GACI,EACJ,MAAM,kBAAEuJ,IAAsB/kC,EAAAA,EAAAA,MAExBO,GAAOC,EAAAA,EAAAA,KACPwkC,EAAYF,MAAAA,OAAH,EAAGA,EAAatnC,GAU/B,OARAgF,EAAAA,EAAAA,KAAU,KACJwiC,GAAaxJ,GACfuJ,EAAkB,CAAEC,UAAAA,MAErB,CAACxJ,EAAcwJ,EAAWD,KAE7BjjB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,MAGhD,0BAAK1jC,UAAU,kCACb,0BAAKA,UAAU,sBACZ6jC,GACC,mBAACG,GAAA,EAAD,CACE1gB,OAAQugB,EAAYtnC,GACpB0nC,eAAa,IAGhBJ,GACC,mBAACK,GAAA,EAAD,CACE/F,aAAc0F,EAAYtnC,GAC1B0nC,eAAa,IAGjB,mBAAC9gB,GAAA,EAAD,CACE1iB,KAAK,WACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,UAE7BpkC,EAAK,2CAER,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,SACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,gBAE7BpkC,EAAK,kBAER,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,OACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,UAE7BpkC,EAAK,oBAER,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,OACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,cAE7BpkC,EAAK,iBAER,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,SACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,UAE7BpkC,EAAK,YAER,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,WACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,WAE7BpkC,EAAK,mB,yBC3EhB,MAEM6kC,GAAc,gBACdC,GAAoB,sBACpBC,GAAiB,oBAEjBC,IAA+B9yB,EAAAA,EAAAA,KAAUkoB,GAAOA,KAAM,KAAK,GAkFjE,IAAe57B,EAAAA,EAAAA,KA1E2B,IAOpC,IAPqC,gBACzCymC,EADyC,OAEzCC,EAFyC,UAGzC7F,EAHyC,oBAIzC8F,EAJyC,cAKzCC,EALyC,SAMzC1qB,GACI,EACJ,MAAO2qB,EAAUC,IAAetjC,EAAAA,EAAAA,IAASijC,GAAmB,IAEtDjlC,GAAOC,EAAAA,EAAAA,KACPslC,EAAaL,EAAS,SAAW,WACjCrT,EAAiB7xB,EAATklC,EAAc,oBAA4B,aAEjDM,EAAiBC,IAAiBtlC,EAAAA,EAAAA,KAAQ,IAC1CklC,EAASjnC,OAIVinC,EAASjnC,OAjCW,EAkCf,MAACuC,EAAY,GAAEkxB,kBAEpBwT,EAASjnC,OAnCW,GAoCf,MAACuC,EAAY,GAAEkxB,iBAEnBkT,GAAeW,KAAKL,QAIG1kC,IAAxBwkC,EACK,GAIF,CACLA,EAAsBnlC,EAAM,GAAEulC,aAAuB,iBAAc5kC,GAC3C,IAAxBwkC,EAAgCnlC,EAAM,GAAEulC,eAAqB5kC,GAVtD,MAACA,EAAY,GAAEkxB,iCAVf,IAsBR,CAACwT,EAAUF,EAAqBnlC,EAAMulC,EAAY1T,KAErD5vB,EAAAA,EAAAA,KAAU,KACRqjC,EAAYL,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMU,GAAuB5lC,EAAAA,EAAAA,KAAa+C,IACxC,MAAM8iC,EAAc9iC,EAAE8G,OAAO+G,MAAMk1B,OAAOvY,QAAQwX,GAAmB,IACrEQ,EAAYM,GACZ9iC,EAAE8G,OAAO+G,MAAS,GAAEu0B,EAASL,GAAc,KAAKe,IAEhD,MAAME,EAvDV,SAAyBT,GACvB,OAAOA,EAASjnC,QATU,GAUrBinC,EAASjnC,QATY,IAUrB2mC,GAAeW,KAAKL,GAoDPU,CAAgBH,GAE5BE,GACFd,IAA6B,KAC3BI,EAAc,CAAEC,SAAUO,OAI1BlrB,GACFA,IAASorB,GAAUF,KAEpB,CAACV,EAAQE,EAAe1qB,IAE3B,OACE,mBAACqI,GAAA,EAAD,CACEpS,MAAQ,GAAEu0B,EAASL,GAAc,KAAKQ,IACtC3qB,SAAUirB,EACV9T,MAAOA,EACPvL,MAAOmf,EACPO,QAASR,EACTS,SAAU5G,OC/DVlF,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAO,GAI7C8L,GAA2B,iCAC3BC,GAAqB,wCAiN3B,IAAe3nC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEojB,GAAkBpjB,GACpB,SAAE8C,EAAF,oBAAY2jC,GAAwBzmC,EAAO0nC,aAAe,GAC1D7B,EAAcziB,GAAgBlW,EAAAA,EAAAA,IAAWlN,EAAQojB,QAAiBnhB,EAExE,IAAK4jC,EACH,MAAO,CACL/iC,SAAAA,EACA2jC,oBAAAA,GAIJ,MACEkB,UAAWC,EACXC,SAAUC,EACVnB,SAAUJ,EAHN,SAIJwB,GACElC,GACImC,IAAKC,GAAeF,GAAY,GAGxC,MAAO,CACLG,mBAHwBr5B,EAAAA,EAAAA,IAAkBg3B,GAI1C+B,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACA1B,gBAAAA,EACAzjC,SAAAA,EACA2jC,oBAAAA,KA7Bc1mC,EA/MmC,IAWjD,IAXkD,SACtDuN,EADsD,eAEtDs3B,EAFsD,QAGtD7I,EAHsD,kBAItDmM,EAJsD,iBAKtDN,EALsD,gBAMtDE,EANsD,WAOtDG,EAPsD,gBAQtD1B,EARsD,SAStDzjC,EATsD,oBAUtD2jC,GACI,EACJ,MAAM,gBACJ0B,EADI,cAEJC,EAFI,cAGJ1B,IACE3lC,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAEN8mC,EAAmBC,IAAwBhlC,EAAAA,EAAAA,KAAS,IACpDilC,EAAwBC,IAA6BllC,EAAAA,EAAAA,KAAS,IAC9DskB,EAAO6gB,IAAYnlC,EAAAA,EAAAA,OAEnBqK,EAAO+6B,IAAYplC,EAAAA,EAAAA,OACnBqkC,EAAWgB,IAAgBrlC,EAAAA,EAAAA,IAASskC,GAAoB,KACxDC,EAAUe,IAAetlC,EAAAA,EAAAA,IAASwkC,GAAmB,KACrDE,EAAKa,IAAUvlC,EAAAA,EAAAA,IAAS2kC,GAAc,KACtCtB,EAAUC,IAAetjC,EAAAA,EAAAA,IAAyBijC,GAAmB,IAEtEuC,GAAuB/5B,EAAAA,EAAAA,GAASm5B,GAAmB,EAAOl5B,EAAAA,GAAAA,SAE1D2xB,EAAY79B,IAAaimC,EAAAA,GAAAA,WACzBC,GAA+B,IAAbrC,EAElBsC,GAAoBxnC,EAAAA,EAAAA,KAAQ,KAC5BunC,IAIG7/B,QAAQwE,IAAU46B,IAAkD,IAAxB9B,IAClD,CAAC94B,EAAO46B,EAAwBS,EAAiBvC,KAEpD5jB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,cAIlDniC,EAAAA,EAAAA,KAAU,KACRk4B,IAAa,KACX0M,SAED,CAACA,KAEJ5kC,EAAAA,EAAAA,KAAU,KACRmlC,OAASzmC,KACR,CAAC6mC,KAEJvlC,EAAAA,EAAAA,KAAU,KACRolC,EAAaf,GAAoB,IACjCgB,EAAYd,GAAmB,IAC/Be,EAAOZ,GAAc,MACpB,CAACL,EAAkBE,EAAiBG,KAEvC1kC,EAAAA,EAAAA,KAAU,KACRqjC,EAAYL,GAAmB,MAC9B,CAACA,KAEJhjC,EAAAA,EAAAA,KAAU,KACJT,IAAaimC,EAAAA,GAAAA,WACfP,GAA0B,GAC1BF,GAAqB,GACrBG,OAASxmC,MAEV,CAACa,IAEJ,MAAMomC,GAAoB7nC,EAAAA,EAAAA,KAAa8nC,IACrCT,EAASS,KACR,IAEGC,GAAwB/nC,EAAAA,EAAAA,KAAa+C,IACzCukC,EAAavkC,EAAE8G,OAAO+G,OACtBu2B,GAA0B,KACzB,IAEGa,GAAuBhoC,EAAAA,EAAAA,KAAa+C,IACxCwkC,EAAYxkC,EAAE8G,OAAO+G,OACrBu2B,GAA0B,KACzB,IAEGc,GAAkBjoC,EAAAA,EAAAA,KAAa+C,IACnCykC,EAAOzkC,EAAE8G,OAAO+G,OAChBu2B,GAA0B,KACzB,IAEGvB,GAAuB5lC,EAAAA,EAAAA,KAAa4Q,IACxC20B,EAAY30B,GACZq2B,GAAqB,KACpB,IAEGiB,GAAoBloC,EAAAA,EAAAA,KAAY,KACpC,MAAMmoC,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAC3BuC,EAAa1B,EAAIb,OAElBqC,EAAiB9pC,OAKlBgqC,EAAWhqC,OAlHI,GAmHjB+oC,EAAShB,IAIXW,EAAc,CACZz6B,MAAAA,KACI46B,GAA0B,CAC5BZ,UAAW6B,EACX3B,SAAU4B,EACVzB,IAAK0B,MAEHrB,GAAqB,CACvB1B,SAAAA,KAjBF8B,EAASjB,MAoBV,CACD75B,EACAg6B,EAAWE,EAAUG,EAAKO,EAC1B5B,EAAU0B,EACVD,IAGF,OACE,0BAAKpmC,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,yBACb,mBAAC2nC,GAAA,EAAD,CACEb,qBAAsBA,EACtB9sB,SAAUktB,EACVtgB,MAAM,0BACN/M,SAAU8kB,IAEZ,mBAACtc,GAAA,EAAD,CACEpS,MAAO01B,EACP3rB,SAAUotB,EACVjW,MAAO7xB,EAAK,aACZua,SAAU8kB,EACV/Y,MAAOA,IAAU4f,GAA2B5f,OAAQ3lB,IAEtD,mBAACoiB,GAAA,EAAD,CACEpS,MAAO41B,EACP7rB,SAAUqtB,EACVlW,MAAO7xB,EAAK,YACZua,SAAU8kB,IAEZ,mBAACtc,GAAA,EAAD,CACEpS,MAAO+1B,EACPhsB,SAAUstB,EACVnW,MAAO7xB,EAAK,WACZua,SAAU8kB,EACV/Y,MAAOA,IAAU6f,GAAqB7f,OAAQ3lB,IAGhD,wBAAGD,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,IAChEkZ,EAAAA,GAAAA,GAAW7Z,EAAK,0BAA2B,CAAC,KAAM,sBAIvD,0BAAKU,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,aAEhF,mBAACsoC,GAAD,CACErD,gBAAiBI,GAAY,GAC7BhG,UAAWA,EACX8F,oBAAqBA,EACrBC,cAAeA,EACf1qB,SAAUirB,IAGZ,wBAAGjlC,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,IAChEkZ,EAAAA,GAAAA,GAAW7Z,EAAK,gBAAiB,CAAC,KAAM,qBAE1CqlC,GACC,wBAAG3kC,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAChEX,EAAK,qBAAqB,8BAC3B,2BAAMU,UAAU,iBAAhB,gBAA8C2kC,MAMtD,mBAACkD,GAAA,EAAD,CACEtuB,QAAS0tB,EACT/mC,QAASqnC,EACT1tB,SAAU8kB,EACVx+B,UAAU,gBAETw+B,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,qB,0BCjNvB,MAsIA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ+nB,EAAAA,GAAAA,IAAK/nB,EAAOmc,SAASC,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,kBACA,oBACA,2BAjBcrc,EAtImC,IAmBjD,IAnBkD,SACtDuN,EADsD,eAEtDs3B,EAFsD,QAGtD7I,EAHsD,6BAItD+N,EAJsD,+BAKtDC,EALsD,yBAMtDC,EANsD,2BAOtDC,EAPsD,6BAQtDC,EARsD,+BAStDC,EATsD,yBAUtDC,EAVsD,2BAWtDC,EAXsD,4BAYtDC,EAZsD,8BAatDC,EAbsD,wBActDC,EAdsD,0BAetDC,EAfsD,gBAgBtDC,EAhBsD,kBAiBtDC,EAjBsD,sBAkBtDC,GACI,EACJ,MAAM,iBAAEC,IAAqB9pC,EAAAA,EAAAA,MAEvBO,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,SAElD,MAAMoF,GAAyBzpC,EAAAA,EAAAA,KAAa4Q,GACnC3Q,EAAK,4BAA6BA,EAAK,cAAe8pB,OAAO2f,EAAAA,GAAgC94B,IAAS,OAC5G,CAAC3Q,IAEE0pC,GAAuB3pC,EAAAA,EAAAA,KAAa4Q,IACxC44B,EAAiB,CAAED,sBAAuBG,EAAAA,GAAgC94B,OACzE,CAAC44B,IAmBJ,SAASI,EACPriB,EACAnd,EACAy/B,EACAC,EACAC,EACAC,GAEA,OACE,0BAAKrpC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAY2mB,GAE3E,mBAAC0iB,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,iCACZiqC,QAASL,EACTM,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAap/B,iBAAoBggC,MAEhF,mBAACH,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,qCACZiqC,QAASJ,EACTK,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAap/B,mBAAsBggC,MAElF,mBAACH,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,mCACZiqC,QAASH,EACTI,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAap/B,aAAgBggC,MAE5E,mBAACH,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,iCACZiqC,QAASF,EACTG,QAAUC,GAAcZ,EAAiB,CAAE,CAAE,cAAap/B,eAAkBggC,MAGrE,SAARhgC,GAlDP,WACE,MAAMwG,EAAQ84B,EAAAA,GAAAA,QAAwCH,GAEtD,OACE,0BAAK5oC,UAAU,QACb,mBAAC0pC,GAAA,EAAD,CACEvY,MAAO7xB,EAAK,2BACZ0F,IAAK,EACLD,IAAK,EACLkL,OAAkB,IAAXA,EAAeA,EAAQ,EAC9B05B,YAAab,EACb9uB,SAAUgvB,KAuCOY,IAKzB,OACE,0BAAK5pC,UAAU,kCACZipC,EACC3pC,EAAK,2BACL,QACAwoC,EACAC,EACAC,EACAC,GAEDgB,EACC3pC,EAAK,2BACL,QACA4oC,EACAC,EACAC,EACAC,GAEDY,EACC,sBACA,OACAX,EACAC,EACAC,EACAC,GAGF,0BAAKzoC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,kBAEhF,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,YACZiqC,QAASb,EACTc,QAAUC,GAAcZ,EAAiB,CAAEH,gBAAiBe,MAE9D,mBAACH,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,kCACZiqC,QAASZ,EACTa,QAAUC,GAAcZ,EAAiB,CAAEF,kBAAmBc,Y,eCjIxE,MAAMI,IAAiC/nC,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAO,GAqLrE,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE66B,WAAYiR,EACZpmB,KAAMqmB,EACNC,YAAaC,GACXjsC,EAAO46B,YAEX,MAAO,CACLkR,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,KAXclsC,EAjLmC,IASjD,IATkD,SACtDuN,EADsD,eAEtD4+B,EAFsD,aAGtDC,EAHsD,eAItDvH,EAJsD,QAKtD7I,EALsD,iBAMtD+P,EANsD,YAOtDC,EAPsD,uBAQtDE,GACI,EACJ,MAAM,2BACJG,EADI,cAEJC,EAFI,WAGJC,IACEvrC,EAAAA,EAAAA,OAEG44B,EAAe4S,IAAoBjpC,EAAAA,EAAAA,OACnCkpC,EAAmBC,IAAwBnpC,EAAAA,EAAAA,KAAS,GACrDopC,GAAsBrrC,EAAAA,EAAAA,KAAY,IAAMorC,GAAqB,IAAO,KAE1ElpC,EAAAA,EAAAA,KAAU,KACHo2B,IACHN,EAAAA,GAAAA,GAAiB,cAAcC,KAAKiT,KAErC,CAAC5S,KAIJp2B,EAAAA,EAAAA,KAAU,KACRsoC,IAA+B,KAC7BO,SAED,CAACA,IAEJ,MAAMO,GAAqBtrC,EAAAA,EAAAA,KAAY,KACjCtC,OAAOw5B,KAAKwT,GAAarsC,QArCL,GAsCtB4sC,EAAW,CACT/S,KAAM,CACJp6B,QAAS,0BACT2oB,aAAa,KAOnBokB,MACC,CAACH,EAAaO,EAAYJ,IAEvB5qC,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,SAElD,MAAMkH,GAAuBC,EAAAA,GAAAA,MACvBC,GAAcrrC,EAAAA,EAAAA,KAAQ,KAC1B,GAAKqqC,EAIL,OAAOA,EAAiB7mB,KAAK1mB,IAC3B,MAAMwuC,EAAShB,EAAYxtC,GAE3B,MAAO,CACLA,GAAIwuC,EAAOxuC,GACXqqB,MAAOmkB,EAAOnkB,MACdokB,UAAUC,EAAAA,EAAAA,IAAyB3rC,EAAMyrC,EAAQH,EAAqBG,EAAOxuC,WAGhF,CAACutC,EAAkBC,EAAazqC,EAAMsrC,IAEnCM,GAAoC7rC,EAAAA,EAAAA,KAAa0rC,IACjDhuC,OAAOw5B,KAAKwT,GAAarsC,QAzEL,GA0EtB4sC,EAAW,CACT/S,KAAM,CACJp6B,QAAS,0BACT2oB,aAAa,KAOnBukB,EAAc,CAAEU,OAAAA,MACf,CAAChB,EAAaM,EAAeC,IAEhC,OACE,0BAAKtqC,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZ23B,GACC,mBAACD,GAAA,EAAD,CACEn7B,GAAG,sBACHuD,KAAMqrC,EAAAA,GACNxT,cAAeA,EACfC,KAAM4S,EACNzS,QAAM,EACNC,OAAQ0S,KAKd,wBAAG1qC,UAAU,iCAAiCsC,IAAI,QAC/ChD,EAAK,wBAGR,mBAACM,EAAA,EAAD,CAEEI,UAAU,iBACVD,MAAM,UACND,KAAK,UACLsrC,MAAI,EACJC,OAAK,EACLnrC,QAASyqC,EACT1pB,MAAO3hB,EAAK2hB,OAEZ,wBAAGjhB,UAAU,aACZV,EAAK,qBAIV,0BAAKU,UAAU,sBACb,yBAAIA,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,YAEpFwrC,MAAAA,GAAAA,EAAaptC,OAASotC,EAAY7nB,KAAK8nB,GACtC,mBAAC5nB,GAAA,EAAD,CACEnjB,UAAU,eACVsrC,QAAM,EACNC,WAAS,EACTrrC,QAAS,IAAMiqC,EAAaJ,EAAYgB,EAAOxuC,MAE/C,2BAAMyD,UAAU,SAAS+qC,EAAOnkB,OAChC,2BAAM5mB,UAAU,YAAY+qC,EAAOC,aAElCF,IAAgBA,EAAYptC,OAC/B,wBAAGsC,UAAU,iCAAiCsC,IAAI,QAAlD,4BAGE,mBAACkhB,GAAA,EAAD,OAGJymB,GAA0B9iC,QAAQ8iC,EAAuBvsC,SACzD,0BAAKsC,UAAU,sBACb,yBAAIA,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjEX,EAAK,sBAGP2qC,EAAuBhnB,KAAK8nB,GAC3B,mBAAC5nB,GAAA,EAAD,CACEnjB,UAAU,OACVsrC,QAAM,EACNprC,QAAS,IAAMgrC,EAAkCH,IAEjD,0BAAK/qC,UAAU,qCACb,0BAAKA,UAAU,kBACb,2BAAMA,UAAU,SAAS+qC,EAAOnkB,OAChC,2BAAM5mB,UAAU,YAAY+qC,EAAOna,cAGrC,mBAAChxB,EAAA,EAAD,CACEI,UAAU,OACVD,MAAM,UACND,KAAK,OACLsrC,MAAI,EACJC,OAAK,EACLpqB,MAAO3hB,EAAK2hB,OAEX3hB,EAAK,kB,eC7LxB,MAyBA,GAzBqC,IAM/B,IANgC,MACpC21B,EADoC,SAEpCuW,EAFoC,eAGpCC,EAHoC,UAIpC9M,EAJoC,QAKpCz+B,GACI,EACJ,MAAMZ,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACK,EAAA,EAAD,CACEI,UAAU,iBACVD,MAAM,cACND,KAAK,UACLunB,QAAM,EACNsX,UAAWA,EACX1d,MAAO3hB,EAAK2hB,MACZ/gB,QAASA,GAET,wBAAGF,UAAU,cATf,QAUQi1B,EAVR,SAUqBA,EAAQ,EAAIwW,GAAmB,GAAED,KAAcA,ICclEE,GAAiB,0CACjBC,GAAiB,8BAwPvB,IAAe7tC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE4lB,GAAY5lB,EAAOylB,MAE3B,MAAO,CACLmoB,oBAAqBhoB,EAAQG,OAC7B8nB,sBAAuBjoB,EAAQK,YANjBlmB,EAtPmC,IAWjD,IAXkD,MACtDukC,EADsD,SAEtDwJ,EAFsD,mBAGtDC,EAHsD,mBAItDC,EAJsD,SAKtD1gC,EALsD,eAMtDs3B,EANsD,QAOtD7I,EAPsD,OAQtDkS,EARsD,oBAStDL,EATsD,sBAUtDC,GACI,EACJ,MAAM,eACJK,EADI,cAEJ7B,IACEtrC,EAAAA,EAAAA,OAEG44B,EAAe4S,IAAoBjpC,EAAAA,EAAAA,OACnCkpC,EAAmBC,IAAwBnpC,EAAAA,EAAAA,KAAS,GACrDopC,GAAsBrrC,EAAAA,EAAAA,KAAY,IAAMorC,GAAqB,IAAO,KAEnE0B,EAA6BC,IAAkC9qC,EAAAA,EAAAA,KAAS,IACxE+qC,EAA6BC,IAAkChrC,EAAAA,EAAAA,KAAS,IAG7EirC,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkBrK,EAAO,aAE3BiK,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkBrK,EAAO,aAE7B/gC,EAAAA,EAAAA,KAAU,KACHo2B,IACHN,EAAAA,GAAAA,GAAiB,cAAcC,KAAKiT,KAErC,CAAC5S,KAEJp2B,EAAAA,EAAAA,KAAU,KACR6qC,GAA+B,GAC/BE,GAA+B,KAC9B,CAAChK,EAAMwK,WAEV,MAAOC,EAAwBC,IAA0BvtC,EAAAA,EAAAA,KAAQ,KAC/D,MAAMwtC,EAAoB,IAAIC,IAAI,IAC5BtB,GAAuB,MACvBC,GAAyB,KAGzBsB,GAAwBC,EAAAA,GAAAA,IAAwBZ,EAAiBS,GACjEI,GAAwBD,EAAAA,GAAAA,IAAwBR,EAAiBK,GAEvE,MAAO,CACLd,EACIgB,EACAA,EAAsBlM,MAAM,EA7DV,EA6DmCyL,EAAkBhvC,QAC3E2uC,EACIgB,EACAA,EAAsBpM,MAAM,EAhEV,EAgEmC4L,EAAkBnvC,WAE5E,CACDkvC,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7BP,EAAqBC,IAGjBvsC,GAAOC,EAAAA,EAAAA,KA0Db,SAAS+tC,EAAYC,GACnB,MAAMd,EAA6B,aAATc,EAAsBb,EAAoBG,EAC9DW,EAA0B,aAATD,EAAsBR,EAAyBC,EAEhES,EAAsB,aAATF,EAAsBpB,EAA8BE,EAEjEqB,GADsB,aAATH,EAAsBf,EAAkBI,GACzBlvC,OAAS+uC,EAAkB/uC,OAAS8vC,EAAe9vC,OAC/EiwC,EAAwB,aAATJ,EACjB,IAAMnB,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACE,sCACGG,EAAkBxpB,KAAKxZ,GAnC9B,SAAwBA,EAAa8jC,GACnC,MAAMK,EAAoB,aAATL,EACbM,GAAAA,GAAAA,MAAyB,QAAGpkC,IAAKqkC,GAAR,SAAsBA,IAAYrkC,KAC3DskC,GAAAA,GAAAA,MAAyB,QAAGtkC,IAAKqkC,GAAR,SAAsBA,IAAYrkC,KAE/D,GAAKmkC,EAIL,OACE,mBAACzqB,GAAA,EAAD,CACE1Z,IAAKmkC,EAASnkC,IACdzJ,UAAU,kCACVS,KAAMmtC,EAASntC,KACf6qC,QAAM,EACN0C,UAAQ,GAEP1uC,EAAKsuC,EAAShnB,QAkBiBqnB,CAAexkC,EAAK8jC,KACnDC,EAAevqB,KAAK1mB,GACnB,mBAAC4mB,GAAA,EAAD,CACEnjB,UAAU,kCACVsrC,QAAM,EACN0C,UAAQ,IAEPz1B,EAAAA,EAAAA,IAAShc,GACR,mBAAC6mB,GAAA,EAAD,CAAiBmW,WAAW,QAAQjW,OAAQ/mB,IAE5C,mBAACgnB,GAAA,EAAD,CAAegW,WAAW,QAAQ7uB,OAAQnO,QAI7CkxC,GAAcC,EAAiB,GAChC,mBAAC,GAAD,CACEzY,MAAOyY,EACPlC,SAAS,OACTtrC,QAASytC,KAOnB,OA9FA9sB,EAAAA,EAAAA,IAAevV,EAAU2gC,EAAQrJ,EAA+B,SAAfN,EAAMiL,KACnD7J,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBA6FF,0BAAK1jC,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZ23B,GACC,mBAACD,GAAA,EAAD,CACEn7B,GAAG,sBACHuD,KAAMqrC,EAAAA,GACNxT,cAAeA,EACfC,KAAM4S,GAAqBphB,OAAOkZ,EAAMwK,UACxC/U,QAAM,EACNC,OAAQ0S,KAKE,WAAfpI,EAAMiL,MACL,wBAAGvtC,UAAU,iCAAiCsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACrEX,EAAK,sBAIV,mBAAC+iB,GAAA,EAAD,CACEriB,UAAU,OACVmxB,MAAO7xB,EAAK,kBACZ2Q,MAAOqyB,EAAMyI,OAAOnkB,MACpB5M,SArHV,SAAsBzH,GACpB,MAAM,cAAEnJ,GAAkBmJ,EAC1Bu5B,EAAS,CAAE/xB,KAAM,WAAYyoB,QAASp5B,EAAc6G,MAAMk1B,UAoHlDvf,MAAO0c,EAAM1c,OAAS0c,EAAM1c,QAAU8lB,GAAiBA,QAAiBzrC,KAI5E,0BAAKD,UAAU,gCACZsiC,EAAM1c,OAAS0c,EAAM1c,QAAU+lB,IAC9B,wBAAG3rC,UAAU,8CAA8CsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAClFX,EAAKgjC,EAAM1c,QAIhB,yBAAI5lB,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,kBAErF,mBAAC6jB,GAAA,EAAD,CACEnjB,UAAU,gDACVS,KAAK,MACLP,QAAS6rC,GAERzsC,EAAK,mBAGPguC,EAAY,aAGf,0BAAKttC,UAAU,gCACb,yBAAIA,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,kBAErF,mBAAC6jB,GAAA,EAAD,CACEnjB,UAAU,gDACVS,KAAK,MACLP,QAAS8rC,GAER1sC,EAAK,mBAGPguC,EAAY,cAIjB,mBAACzF,GAAA,EAAD,CACEtuB,QAASpS,QAAQm7B,EAAM4L,WACvBr0B,SAAUyoB,EAAM3D,UAChBz+B,QA3JN,WACE,MAAM,MAAE0mB,GAAU0b,EAAMyI,OAEnBnkB,EAKA4lB,EAAgB9uC,QAAWX,OAAOw5B,KAAKmW,GAAmBhvC,QAK/DouC,EAAS,CAAE/xB,KAAM,eAAgByoB,SAAS,IACvB,SAAfF,EAAMiL,KACRrB,EAAe,CAAE3vC,GAAI+lC,EAAMwK,SAAUqB,aAAc7L,EAAMyI,SAEzDV,EAAc,CAAEU,OAAQzI,EAAMyI,SAGhC3mC,YAAW,KACT21B,MA1GiB,MA8FjB+R,EAAS,CAAE/xB,KAAM,WAAYyoB,QAASmJ,KALtCG,EAAS,CAAE/xB,KAAM,WAAYyoB,QAASkJ,MAwJpCvrC,UAA0B,SAAfmiC,EAAMiL,KAAkB,eAAiB,iBAEnDjL,EAAM3D,UACL,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,qBC7EvB,IAAelC,EAAAA,EAAAA,KA5KkC,IAS3C,IAT4C,KAChDyvC,EADgD,QAEhDxoB,EAFgD,YAGhDqpB,EAHgD,kBAIhD3B,EAJgD,YAKhD4B,EALgD,oBAMhDC,EANgD,0BAOhDC,EAPgD,eAQhD7sB,GACI,EAEJ,MAAM/H,GAAW5V,EAAAA,EAAAA,IAAyB,MACpCyqC,EAAqB,aAATjB,EAAsBM,GAAAA,GAAsBE,GAAAA,GACxDU,EAAiBL,EAAY1wC,OAAS+uC,EAAkB/uC,OAhBzC,GAiBfgxC,EAAcN,EAAY1wC,QAlBhB,KAoBhB6D,EAAAA,EAAAA,KAAU,KACR6C,YAAW,KACTqa,uBAAsB,KACpB9E,EAASzV,QAASyqC,aAzBH,OA4BlB,IAEH,MAAMC,GAAkBvvC,EAAAA,EAAAA,KAAa9C,IACnC,MAAMsyC,EAAiB,IAAIT,GACvBS,EAAeryC,SAASD,GAC1BsyC,EAAeC,OAAOD,EAAevzB,QAAQ/e,GAAK,GAElDsyC,EAAe3iB,KAAK3vB,GAEtB+xC,EAAoBO,KACnB,CAACT,EAAaE,IAEXS,GAAsB1vC,EAAAA,EAAAA,KAAaoK,IACvC,MAAMulC,EAAuB,IAAIvC,GAC7BuC,EAAqBxyC,SAASiN,GAChCulC,EAAqBF,OAAOE,EAAqB1zB,QAAQ7R,GAAM,GAE/DulC,EAAqB9iB,KAAKziB,GAE5B8kC,EAA0BS,KACzB,CAACvC,EAAmB8B,IAEjBrsB,GAAqB7iB,EAAAA,EAAAA,KAAa+C,IACtC,MAAM,MAAE6N,GAAU7N,EAAEgH,cACpBsY,EAAezR,KACd,CAACyR,IAEEpiB,GAAOC,EAAAA,EAAAA,MAgENsiB,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB9hB,EAAW8kB,EAAS5d,QAAQknC,IAE7E,OACE,0BAAKruC,UAAU,qCACb,0BAAKA,UAAU,+BACZysC,EAAkBxpB,KAnEzB,SAAgCxZ,GAC9B,MAAMwlC,EAAeT,EAAU1Y,MAAK,QAAGrsB,IAAKqkC,GAAR,SAAsBrkC,IAAQqkC,KAClE,GAAKmB,EAIL,OACE,mBAAC/Q,GAAA,EAAD,CACEz9B,KAAMwuC,EAAaxuC,KACnBmmB,MAAOtnB,EAAK2vC,EAAaroB,OACzBsoB,YAAaT,EACbU,UAAQ,EACRjvC,QAAS6uC,EACT3Q,SAAU6Q,EAAaxlC,SAuDtB2kC,EAAYnrB,KAAI,CAAC1mB,EAAI2mB,IACpB,mBAACgb,GAAA,EAAD,CACEC,aAAc5hC,EACd2yC,YAAaT,GAAkBvrB,EAAIkrB,EAAY1wC,OA5H3B,EA6HpByxC,UAAQ,EACRjvC,QAAS0uC,EACTxQ,SAAU7hC,MAGZmyC,EAQA,wBAAG1uC,UAAU,oBAAoBsC,IAAI,QACjC,6CARJ,mBAAC+f,GAAA,EAAD,CACE5c,IAAKkU,EACL1J,MAAOo+B,EACPr0B,SAAUkI,EACVK,YAAajjB,EAAK,aAQxB,mBAACqjB,GAAA,EAAD,CACE3iB,UAAU,4BACV0/B,aAAa,aACb9c,MAAOf,EACPgB,WAAYf,KAETD,IAAgBA,EAAYnkB,QAAUmkB,EAAYrlB,SAASuoB,EAAQ,MACpE,sCACE,yBAAItb,IAAI,UAAUzJ,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC1EX,EAAK,oBAEPkvC,EAAUvrB,KAnFrB,SAAwBlJ,GACtB,OACE,mBAACoJ,GAAA,EAAD,CACE1Z,IAAKsQ,EAAKtQ,IACVzJ,UAAU,sDACVE,QAAS,IAAM6uC,EAAoBh1B,EAAKtQ,KACxC9D,QAAM,GAEN,wBAAG3F,UAAY,QAAO+Z,EAAKtZ,SAC3B,yBAAIT,UAAU,YAAYsC,IAAI,QAAQhD,EAAKya,EAAK6M,QAChD,mBAAC0iB,GAAA,EAAD,CACEnY,MAAM,GACNoY,QAASkD,EAAkBjwC,SAASud,EAAKtQ,KACzC5J,OAAK,QAuEH,0BAAK4J,IAAI,UAAUzJ,UAAU,wBAC7B,yBAAIyJ,IAAI,UAAUzJ,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC1EX,EAAK,iBAKXuiB,MAAAA,GAAAA,EAAankB,OACZmkB,EAAYoB,KAzEpB,SAAoB1mB,GAClB,MAAM6yC,EAAahB,EAAY5xC,SAASD,GAExC,OACE,mBAAC4mB,GAAA,EAAD,CACE1Z,IAAKlN,EACLyD,UAAU,iDACVE,QAAS,IAAM0uC,EAAgBryC,GAC/BoJ,QAAM,EACNkU,UAAWu1B,GAAcV,IAExBn2B,EAAAA,EAAAA,IAAShc,GACR,mBAAC6mB,GAAA,EAAD,CAAiBE,OAAQ/mB,IAEzB,mBAACgnB,GAAA,EAAD,CAAe7Y,OAAQnO,EAAI8yC,cAAY,IAEzC,mBAAC/F,GAAA,EAAD,CACEnY,MAAM,GACNoY,QAAS6F,EACTvvC,OAAK,QAuDHgiB,IAAgBA,EAAYnkB,OAC9B,wBAAGsC,UAAU,aAAayJ,IAAI,cAA9B,yBAEA,mBAAC+Z,GAAA,EAAD,CAAS/Z,IAAI,iBChFvB,IAAe3L,EAAAA,EAAAA,KAhGkC,IAO3C,IAP4C,KAChDyvC,EADgD,MAEhDjL,EAFgD,SAGhDwJ,EAHgD,SAIhDxgC,EAJgD,eAKhDs3B,EALgD,QAMhD7I,GACI,EACJ,MAAM,WAAEuV,GAAehN,GACjB,gBAAEiK,EAAF,kBAAmBE,IAAsBE,EAAAA,GAAAA,IAAkBrK,EAAOiL,GAAM,GAExEjuC,GAAOC,EAAAA,EAAAA,KAEPgwC,GAAsBC,EAAAA,GAAAA,IAA8BC,EAAAA,IACpDC,GAA2BF,EAAAA,GAAAA,IAA8BG,EAAAA,IAEzDC,GAAenwC,EAAAA,EAAAA,KAAQ,KAE3B,MAAMkkB,GAAYwB,EAAAA,EAAAA,MAAY1B,MAAMC,KAE9BqB,EAAU,IAAIwqB,GAAuB,MAAOG,GAA4B,IAC9E,OAAO5qB,EAAAA,GAAAA,IAAO,IACTynB,MACAjnB,EAAAA,EAAAA,IAAkBhmB,EAAMylB,EAASpB,EAAW2rB,OAEhD,CAACC,EAAqBG,EAA0BnD,EAAiBjtC,EAAMgwC,IAEpEptB,GAAqB7iB,EAAAA,EAAAA,KAAawwC,IACtC/D,EAAS,CACP/xB,KAAM,gBACNyoB,QAASqN,MAEV,CAAC/D,IAEEgE,GAA0BzwC,EAAAA,EAAAA,KAAa0wC,IAEzCjE,EADW,aAATyB,EACO,CACPxzB,KAAM,oBACNyoB,QAAS,IAAKF,EAAM0N,eAAgBxD,gBAAiBuD,IAG9C,CACPh2B,KAAM,oBACNyoB,QAAS,IAAKF,EAAM2N,eAAgBrD,gBAAiBmD,OAGxD,CAACxC,EAAMjL,EAAOwJ,IAEXoE,GAAgC7wC,EAAAA,EAAAA,KAAak3B,IACjD,MAAM4Z,EAAsC,GAC5C5Z,EAAK6Z,SAAS3mC,IACZ0mC,EAAW1mC,IAAO,KAIlBqiC,EADW,aAATyB,EACO,CACPxzB,KAAM,oBACNyoB,QAAS,CACPgK,gBAAiBD,KACd4D,IAIE,CACPp2B,KAAM,oBACNyoB,QAAS,CACPoK,gBAAiBL,KACd4D,OAIR,CAAC5C,EAAMhB,EAAiBT,IAO3B,OALAjrB,EAAAA,EAAAA,IACEvV,EAAUyuB,EAAS6I,EACV,aAAT2K,EAAsB7J,EAAAA,GAAAA,qBAAuCA,EAAAA,GAAAA,sBAG1DkM,EAKH,mBAAC,GAAD,CACErC,KAAMA,EACNxoB,QAAS6qB,EACTxB,YAAa7B,EACbE,kBAAmBA,EACnB4B,YAAaiB,EACbhB,oBAAqBwB,EACrBvB,0BAA2B2B,EAC3BxuB,eAAgBQ,IAZX,mBAACsB,GAAA,EAAD,SCwCX,IAAe1lB,EAAAA,EAAAA,KA9HuB,IAQhC,IARiC,cACrC2kC,EADqC,YAErC4N,EAFqC,MAGrC/N,EAHqC,SAIrCwJ,EAJqC,SAKrCxgC,EALqC,eAMrCs3B,EANqC,QAOrC7I,GACI,EACJ,MAAMuW,GAAcjxC,EAAAA,EAAAA,KAAY,KAE5BojC,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBt/B,YAAW,KACT0nC,EAAS,CAAE/xB,KAAM,YA5BG,KAiCtB0oB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB3J,IARqB,WAAfuI,EAAMiL,KACR3K,EAAec,EAAAA,GAAAA,qBAEfd,EAAec,EAAAA,GAAAA,qBAMlB,CACDpB,EAAMiL,KAAMzB,EACZrJ,EAAe1I,EAAS6I,IAGpB+H,GAAqBtrC,EAAAA,EAAAA,KAAY,KACrCysC,EAAS,CAAE/xB,KAAM,UACjB6oB,EAAec,EAAAA,GAAAA,uBACd,CAACd,EAAgBkJ,IAEdyE,GAAmBlxC,EAAAA,EAAAA,KAAa0rC,IACpCe,EAAS,CAAE/xB,KAAM,aAAcyoB,QAASuI,IACxCnI,EAAec,EAAAA,GAAAA,qBACd,CAACoI,EAAUlJ,IAER4N,GAAyBnxC,EAAAA,EAAAA,KAAY,KACzCysC,EAAS,CAAE/xB,KAAM,uBACjB6oB,EAAeH,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAeqJ,EAAUlJ,IAEvB6N,GAAyBpxC,EAAAA,EAAAA,KAAY,KACzCysC,EAAS,CAAE/xB,KAAM,uBACjB6oB,EAAeH,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAeqJ,EAAUlJ,IAE7B,OAAQH,GACN,KAAKiB,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEwG,eAAgBS,EAChBR,aAAcoG,EACd3N,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAGf,KAAK2J,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACEpB,MAAOA,EACPwJ,SAAUA,EACVC,mBAAoByE,EACpBxE,mBAAoByE,EACpB1W,QAASuW,EACT1N,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXpE,OAAQlS,IAGd,KAAK2J,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE6J,KAAK,WACLjL,MAAOA,EACPwJ,SAAUA,EACV/R,QAASuW,EACT1N,eAAgBA,EAChBt3B,SAAUA,IAGhB,KAAKo4B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE6J,KAAK,WACLjL,MAAOA,EACPwJ,SAAUA,EACV/R,QAASuW,EACT1N,eAAgBA,EAChBt3B,SAAUA,IAIhB,QACE,W,wBC/HN,MAmCA,IAAexN,EAAAA,EAAAA,KAnC+B,IAIxC,IAJyC,KAC7CgC,EAAO4wC,EAAAA,GADsC,WAE7CC,EAF6C,oBAG7C9Q,GACI,EAEJ,MAAMp6B,GAAM1B,EAAAA,EAAAA,IAAuB,MAE7B6sC,GAAiBC,EAAAA,GAAAA,IAAkBprC,EAAKo6B,GAExCiR,EAAa,aAAYH,EAAWp0C,KACpCw0C,GAAahkC,EAAAA,EAAAA,GAAS+jC,GAAYF,EAAgB5jC,EAAAA,GAAAA,QAClDzE,GAAuByoC,EAAAA,GAAAA,GAAmBD,GAE1CE,GAAexxC,EAAAA,EAAAA,KAAQ,KAC3B,IAAIsxC,EAEJ,OAAOG,EAAAA,GAAAA,IAAgBP,EAAW/pB,MAAO,KACxC,CAACmqB,EAAYJ,EAAW/pB,QAE3B,OACE,0BAAKnhB,IAAKA,EAAKzF,UAAU,qBACtBixC,EACAF,GACC,mBAACrZ,GAAA,EAAD,CACEn7B,GAAIu0C,EACJhxC,KAAMA,EACN63B,cAAeoZ,EACf/wC,UAAWuI,QCLrB,IAAezK,EAAAA,EAAAA,KA1BuB,IAAyC,IAAxC,WAAE6yC,EAAF,oBAAc9Q,GAA0B,EAE7E,MAAMp6B,GAAM1B,EAAAA,EAAAA,IAAuB,MAE7B6sC,GAAiBC,EAAAA,GAAAA,IAAkBprC,EAAKo6B,GAExCxhC,GAAY0O,EAAAA,EAAAA,GAAS4jC,EAAWQ,cAAiB,aAAYR,EAAWp0C,MAAOq0C,GAC/EroC,GAAuByoC,EAAAA,GAAAA,GAAmB3yC,GAC1CC,EAAUqyC,EAAWS,SAErBH,GAAexxC,EAAAA,EAAAA,KAAQ,KAC3B,GAAKnB,IAAY+yC,EAAAA,KAAuBhzC,EAAW,OAAO6yC,EAAAA,GAAAA,IAAgBP,EAAW/pB,MAAO,KAC3F,CAACtoB,EAASD,EAAWsyC,EAAW/pB,QAEnC,OACE,0BAAKnhB,IAAKA,EAAKzF,UAAU,qBACtBixC,EACA3yC,EACC,4BAAO9C,IAAK6C,EAAW2B,UAAWuI,EAAsB0B,MAAI,EAACF,UAAQ,IAErE,0BAAKvO,IAAK6C,EAAW2B,UAAWuI,EAAsBsG,IAAI,S,eCdlE,MAmEA,IAAe/Q,EAAAA,EAAAA,KAnE0B,IAInC,UAJoC,WACxC6yC,EADwC,oBAExC9Q,EAFwC,QAGxC3/B,GACI,EACJ,MAAMZ,GAAOC,EAAAA,EAAAA,KAEb,IAAKoxC,IAAeA,EAAWW,SAC7B,OAGF,MAAMC,EAAY,UAAGZ,EAAWW,gBAAd,aAAG,EAAsB,GAE3C,OAAIX,EAAWQ,eAAiBI,EAE5B,mBAACpuB,GAAA,EAAD,CACEmoB,QAAM,EACNtrC,UAAU,qBACVguC,UAAWuD,EACXrxC,QAAS,IAAMqxC,GAAgBrxC,EAAQqxC,IAEvC,mBAAC3xC,EAAA,EAAD,CACEO,UAAWwwC,EAAW/pB,MACtB7mB,MAAM,cACNkhB,MAAO3hB,EAAK2hB,OAEX0vB,EAAWa,SACV,mBAAC,GAAD,CACE1xC,KAAM2xC,EAAAA,GACNd,WAAYA,EACZ9Q,oBAAqBA,IAGvB,mBAAC,GAAD,CACE8Q,WAAYA,EACZ9Q,oBAAqBA,KAI3B,0BAAK7/B,UAAU,uBACb,0BAAKA,UAAU,SAAS2wC,EAAW/pB,OACnC,0BAAK5mB,UAAU,YAAYV,EAAK,2BAA4BqxC,EAAW1b,MAAO,QAMlF,mBAAC9R,GAAA,EAAD,CACEmoB,QAAM,EACNtrC,UAAU,qBACVE,QAAS,IAAMA,EAAQqxC,IAEvB,mBAACG,GAAA,EAAD,CACEC,QAASJ,EACTzxC,KAAM2xC,EAAAA,GACN7qB,MAAO+pB,EAAW/pB,MAClBiZ,oBAAqBA,IAEvB,0BAAK7/B,UAAU,uBACb,0BAAKA,UAAU,SAAS2wC,EAAW/pB,OACnC,0BAAK5mB,UAAU,YAAYV,EAAK,2BAA4BqxC,EAAW1b,MAAO,W,eCvCxF,MAAM2c,GAA0B,CAC9B,mBACA,gBACA,iBAGIC,GAAsC,CAAC,CAC3C1gB,MAAO,UACPlhB,MAAO,OACN,CACDkhB,MAAO,UACPlhB,MAAO,QAsLT,IAAenS,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAO,KACF+nB,EAAAA,GAAAA,IAAK/nB,EAAOmc,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,wBACA,qBACA,qBACA,qBACA,eAEF03B,cAAe9zC,EAAOszC,SAASS,MAAMC,OACrCC,gBAAiBj0C,EAAOszC,SAASY,SACjCC,gBAAe,UAAEn0C,EAAOo0C,iBAAT,aAAE,EAAkBD,mBAfrBp0C,EAnL+B,IAa7C,IAb8C,SAClDuN,EADkD,eAElDs3B,EAFkD,QAGlD7I,EAHkD,cAIlD+X,EAJkD,gBAKlDG,EALkD,gBAMlDE,EANkD,gBAOlDE,EAPkD,eAQlD9mC,EARkD,oBASlD+mC,EATkD,sBAUlDC,EAVkD,mBAWlDC,EAXkD,WAYlDC,GACI,EACJ,MAAM,iBACJ5J,IACE9pC,EAAAA,EAAAA,MAGE2zC,GAAqB3uC,EAAAA,EAAAA,IAAuB,OAC1Cg7B,QAAS4T,IAAiC1T,EAAAA,GAAAA,IAAwB,CAAEC,QAASwT,KAC9ErsB,EAAaC,EAAWC,IAAc5B,EAAAA,GAAAA,MACtCgtB,EAASiB,IAActxC,EAAAA,EAAAA,MAExBhC,GAAOC,EAAAA,EAAAA,KAEPszC,EAAyBjsC,EAAAA,QAO3B3G,EAP0C,CAC5C,CAAEgQ,MAAO,QAASkhB,MAAO7xB,EAAK,2BAA4BwzC,SAAU,6BACpE,CACE7iC,MAAO,aACPkhB,MAAO7xB,EAAKyzB,EAAAA,GAAY,6BAA+B,+BACvD+f,SAAU,sBAIRC,GAA6B1zC,EAAAA,EAAAA,KAAa2zC,IAC9CpB,GAAwBxB,SAAQ,CAAC6C,EAAG/vB,KAClCnoB,SAASuJ,KAAKrJ,UAAUihB,OAAQ,mBAAkBgH,IAAK8vB,IAAa9vB,MAGtE2lB,EAAiB,CAAEt9B,eAAgBynC,MAClC,CAACnK,IAEEqK,GAA8B7zC,EAAAA,EAAAA,KAAa8zC,IAC/Cp4C,SAASq4C,gBAAgBn2C,MAAMo2C,YAC7B,uBAAyB,GAAE3yC,KAAKqE,IAAIouC,EAAStsC,EAAAA,GAAS,GAAK,SAE7D9L,SAASq4C,gBAAgBn2C,MAAMo2C,YAAY,wBAA0B,GAAE3yC,KAAKoC,MAAgB,OAAVqwC,QAClFp4C,SAASq4C,gBAAgBn2C,MAAMo2C,YAAY,sBAAwB,GAAEF,OACrEp4C,SAASq4C,gBAAgBE,aAAa,yBAA0BH,EAAQp7B,YAExE8wB,EAAiB,CAAEwJ,gBAAiBc,MACnC,CAACtK,IAEE0K,GAAyBl0C,EAAAA,EAAAA,KAAam0C,IAC1C3K,EAAiB,CAAE4J,WAAYe,IAC/B3K,EAAiB,CAAE4K,0BAA0B,KAE7CC,EAAAA,GAAAA,IAAcF,KACb,CAAC3K,IAEE8K,GAAwBt0C,EAAAA,EAAAA,KAAa4Q,IACzC2iC,EAAW3iC,GACXqW,MACC,CAACA,IAEEstB,EAAc9B,GAAiBA,EAAc7uB,KAAK1mB,IAAe,MACrE,QAAO01C,MAAAA,GAAA,UAAAA,EAAkB11C,UAAlB,UAAuBs3C,gBAAgB5B,EAAgB11C,MAC7DglB,OAAsBpa,SAIzB,OAFA0Z,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,SAGhD,0BAAK1jC,UAAU,kCACb,0BAAKA,UAAU,sBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,aAEhF,mBAACoqC,GAAA,EAAD,CACEvY,MAAO7xB,EAAK,YACZ0F,IAAK,GACLD,IAAK,GACLkL,MAAOoiC,EACPr4B,SAAUk5B,IAGZ,mBAAC/vB,GAAA,EAAD,CACE1iB,KAAK,QACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,wBAE7BpkC,EAAK,oBAIV,0BAAKU,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAA/D,eAGA,mBAACmxB,GAAA,EAAD,CACEjQ,KAAK,aACLkQ,QAASwgB,GACTvgB,SAAUmhB,EACVz4B,SAAUu5B,KAId,0BAAKvzC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAA/D,mBAGA,wBAAGD,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAnE,yCAIA,mBAACypC,GAAA,EAAD,CACErY,QAASugB,GACT3hC,MAAO1E,EACPyO,SAAU+4B,KAIbF,GACC,0BAAK7yC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,uBAEhF,mBAAC8xB,GAAA,EAAD,CACEjQ,KAAK,yBACLkQ,QAASwhB,EACT74B,SAAW/J,GAAU44B,EAAiB,CAAEyJ,oBAAqBriC,IAC7DqhB,SAAUghB,KAKhB,0BAAKtyC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,qBAE/E6yC,GACC,mBAAChvB,GAAA,EAAD,CACEnjB,UAAU,0BACVE,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,gBAE9B,mBAAC3N,GAAA,EAAD,CAAqBN,SAAU0c,IAC/B,0BAAKnyC,UAAU,SAASV,EAAK,sBAIjC,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,mBACZiqC,QAASgJ,EACT/I,QAAUC,GAAcZ,EAAiB,CAAE0J,sBAAuB9I,MAEpE,mBAACH,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,wBACZiqC,QAASiJ,EACThJ,QAAUC,GAAcZ,EAAiB,CAAE2J,mBAAoB/I,MAGjE,0BAAKzpC,UAAU,OAAOyF,IAAKitC,GACxBkB,GAAeA,EAAY3wB,KAAK0tB,GAC/B,mBAAC,GAAD,CACElnC,IAAKknC,EAAWp0C,GAChBo0C,WAAYA,EACZ9Q,oBAAqB8S,EACrBzyC,QAASyzC,OAIdhC,GACC,mBAAC,KAAD,CACEhyC,OAAQ0mB,EACRytB,YAAanC,EACbprC,QAASggB,UCrOrB,IAAIwtB,GAEG,SAASC,KAAsF,IAAhEC,EAAgE,uDAAvD,IAAKC,EAAkD,uCAApBC,EAAoB,wDAC/FJ,KACHA,GAAeh5C,SAASC,cAAc,SACtC+4C,GAAaT,aAAa,OAAQ,SAGpCS,GAAaT,aAAa,SAAUW,GAEhCE,EACFJ,GAAaK,gBAAgB,YAE7BL,GAAaT,aAAa,WAAY,YAIxCS,GAAaM,SAAW,KACxBN,GAAa9jC,MAAQ,GACrB8jC,GAAaM,SAAWH,EAExBH,GAAaO,Q,eCPR,SAASC,GAAQC,GACtB,MAAO,CACLC,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,KAS7B,SAASC,GAAQH,GACtB,MAAMI,EAAKJ,EAAM,GAAGz8B,SAAS,IACvB88B,EAAKL,EAAM,GAAGz8B,SAAS,IACvB+8B,EAAKN,EAAM,GAAGz8B,SAAS,IAC7B,OAAqB,GAAb68B,EAAGl3C,OAAc,IAAMk3C,EAAKA,IAAoB,GAAbC,EAAGn3C,OAAc,IAAMm3C,EAAKA,IAAoB,GAAbC,EAAGp3C,OAAc,IAAMo3C,EAAKA,GAcrG,SAASC,GAAT,GAAgF,IAA9DC,EAAGC,EAAGtX,GAAwD,EACrFqX,GAAK,IACLC,GAAK,IACLtX,GAAK,IAEL,IACI3qB,EAAYkiC,EADZnwC,EAAMrE,KAAKqE,IAAIiwC,EAAGC,EAAGtX,GAAI34B,EAAMtE,KAAKsE,IAAIgwC,EAAGC,EAAGtX,GACvBwX,EAAYpwC,EAEnCqoB,EAAIroB,EAAMC,EAGd,GAFAkwC,EAAW,GAAPnwC,EAAW,EAAIqoB,EAAIroB,EAEnBA,GAAOC,EACTgO,EAAI,MACC,CACL,OAAQjO,GACN,KAAKiwC,EACHhiC,GAAKiiC,EAAItX,GAAKvQ,GAAK6nB,EAAItX,EAAI,EAAI,GAC/B,MACF,KAAKsX,EACHjiC,GAAK2qB,EAAIqX,GAAK5nB,EAAI,EAClB,MACF,KAAKuQ,EACH3qB,GAAKgiC,EAAIC,GAAK7nB,EAAI,EAItBpa,GAAK,EAGP,MAAO,CAACA,EAAGkiC,EAAGC,GAcT,SAASC,GAAT,GAAgF,IACjFJ,EAAYC,EAAYtX,GADL3qB,EAAGkiC,EAAGC,GAAwD,EAGjFjyB,EAAIxiB,KAAKoC,MAAU,EAAJkQ,GACfqiC,EAAQ,EAAJriC,EAAQkQ,EACZoyB,EAAIH,GAAK,EAAID,GACbK,EAAIJ,GAAK,EAAIE,EAAIH,GACjBM,EAAIL,GAAK,GAAK,EAAIE,GAAKH,GAE3B,OAAQhyB,EAAI,GACV,KAAK,EACH8xB,EAAIG,EACJF,EAAIO,EACJ7X,EAAI2X,EACJ,MACF,KAAK,EACHN,EAAIO,EACJN,EAAIE,EACJxX,EAAI2X,EACJ,MACF,KAAK,EACHN,EAAIM,EACJL,EAAIE,EACJxX,EAAI6X,EACJ,MACF,KAAK,EACHR,EAAIM,EACJL,EAAIM,EACJ5X,EAAIwX,EACJ,MACF,KAAK,EACHH,EAAIQ,EACJP,EAAIK,EACJ3X,EAAIwX,EACJ,MACF,KAAK,EACHH,EAAIG,EACJF,EAAIK,EACJ3X,EAAI4X,EAIR,MAAO,CACL70C,KAAKb,MAAU,IAAJm1C,GACXt0C,KAAKb,MAAU,IAAJo1C,GACXv0C,KAAKb,MAAU,IAAJ89B,IAuDR,SAAS8X,GAAgBC,GAC9B,IAAKC,EAAKC,EAAY3lC,GAAS8kC,GAAQW,GAOvC,OALAE,EAAal1C,KAAKsE,IAAI,EAAG4wC,EAAa,IAAO,IAAO,EAAIA,IACxD3lC,EAAQA,EAAQ,GACZvP,KAAKqE,IAAI,EAAW,IAARkL,GACZvP,KAAKqE,IAAI,EAAGrE,KAAKsE,IAAI,EAAG,EAAY,IAARiL,IAExB,QAAa,IAAN0lC,MAA2B,IAAbC,OAA8B,IAAR3lC,U,0BCzKrD,MAiFA,IAAenS,EAAAA,EAAAA,KAjFqB,IAK9B,UAL+B,UACnC+3C,EADmC,MAEnCpX,EAFmC,WAGnC2Q,EAHmC,QAInClvC,GACI,EACJ,MAAM,KAAE41C,EAAF,SAAQ/6C,GAAa86C,EACrBE,EAAkB,YAAWh7C,EAASwB,KACtC8Q,EAAetS,EAASmS,eACxBA,GAAiBH,EAAAA,EAAAA,GAAU,GAAEgpC,YAC7BC,GAAWC,EAAAA,GAAAA,GAAa,UAACl7C,EAASm7C,iBAAV,aAAC,EAAoBC,QAAShvC,QAAQ+F,IAAiB,IAC/E,qBAAE3E,IAAyBE,EAAAA,EAAAA,GAC/BtB,QAAQ+F,GAAkBG,QAC1BpN,OACAA,EACA,SAEKm2C,EAAeC,IAAoB/0C,EAAAA,EAAAA,KAAS,IAEjDjD,UAAWi4C,EADP,aACkBt3C,IACpBE,EAAAA,EAAAA,GAAyB62C,GAAiBK,GACxCG,GAAiD,KAA/B78B,EAAAA,EAAAA,GAAY08B,IAC5B/tC,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,EAAAA,GACpF2tC,IAAkBE,GAAcR,IAASU,EAAAA,QAC1Cv2C,EACAs2C,EACA,QAGIE,GAAc1yC,EAAAA,EAAAA,MACpB0yC,EAAYvyC,QAAUu6B,EAEtB,MAAMiY,GAAer3C,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAMs3C,QAAaC,EAAAA,GAAAA,IAAUN,SACvBO,GAASC,KAAKC,EAAAA,GAAsBN,EAAYvyC,QAAUyyC,GAChEz2C,EAAQ41C,IAHV,KAKC,CAACQ,EAAWp2C,EAAS41C,KAExBv0C,EAAAA,EAAAA,KAAU,KACJ+0C,GACFI,MAED,CAACJ,EAAWI,IAEf,MAAMviB,GAAc90B,EAAAA,EAAAA,KAAY,KAC1Bi3C,EACFI,IAEAL,GAAkBW,IAAeA,MAElC,CAACV,EAAWI,IAET12C,GAAYmC,EAAAA,EAAAA,GAChB,gBACAitC,GAAc,YAGhB,OACE,0BAAKpvC,UAAWA,EAAWE,QAASi0B,GAClC,0BAAKn0B,UAAU,eACb,6BACEyF,IAAKuwC,EACLh2C,UAAU,cAEZ,0BACExE,IAAK0R,GAAkBG,EACvBrN,WAAWmC,EAAAA,EAAAA,GAAe,aAAcoG,GACxCsG,IAAI,KAELvG,GACC,0BAAKtI,WAAWmC,EAAAA,EAAAA,GAAe,oBAAqBqG,IAClD,mBAAC3H,EAAA,EAAD,CAAiBC,SAAU9B,EAAckB,QAASi0B,UC9DxDsF,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAO,GA6HnD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMygC,GAAQC,EAAAA,EAAAA,IAAY1gC,IACpB,WAAEi5C,EAAF,UAAcC,GAAcl5C,EAAOmc,SAASg9B,OAAO1Y,IAAU,IAC7D,iBAAE2Y,GAAqBp5C,EAAOmc,SAEpC,MAAO,CACL88B,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACA3Y,MAAAA,KAVc1gC,EA3HyC,IAQvD,IARwD,SAC5DuN,EAD4D,eAE5Ds3B,EAF4D,QAG5D7I,EAH4D,WAI5Dkd,EAJ4D,UAK5DC,EAL4D,iBAM5DE,EAN4D,MAO5D3Y,GACI,EACJ,MAAM,eACJ4Y,EADI,gBAEJC,EAFI,iBAGJC,IACEx4C,EAAAA,EAAAA,MAEEy4C,GAAWzzC,EAAAA,EAAAA,MACjByzC,EAAStzC,QAAUu6B,GAGnBl9B,EAAAA,EAAAA,KAAU,KACRk4B,IAAa,KACX4d,SAED,CAACA,IAEJ,MAAMI,GAAmBp4C,EAAAA,EAAAA,KAAa+C,IACpC,MAAM,MAAEs1C,GAAUt1C,EAAE8G,OAEhBwuC,GAASA,EAAMh6C,OAAS,GAC1B45C,EAAgBI,EAAM,MAEvB,CAACJ,IAEEK,GAAwBt4C,EAAAA,EAAAA,KAAY,KACxC20C,GAtCoB,aAsCmByD,GAAkB,KACxD,CAACA,IAEEG,GAAiBv4C,EAAAA,EAAAA,KAAY,KACjCujC,EAAec,EAAAA,GAAAA,8BACd,CAACd,IAEEiV,GAAuBx4C,EAAAA,EAAAA,KAAY,KACvCk4C,EAAiB,CACf9Y,MAAAA,EACAwY,gBAAYh3C,EACZ63C,qBAAiB73C,EACjBi3C,WAAW,EACXa,aAAwB,SAAVtZ,EAAmBuZ,EAAAA,GAA2BC,EAAAA,MAE7D,CAACV,EAAkB9Y,IAEhByZ,GAAwB74C,EAAAA,EAAAA,KAAay2C,IACzCyB,EAAiB,CAAE9Y,MAAO+Y,EAAStzC,QAAS+yC,WAAYnB,IACxD,MAAMqC,EAAmBf,GAAoBA,EAAiBthB,MAAM+f,GAAcA,EAAUC,OAASA,IACjGqC,MAAAA,GAAAA,EAAkBp9C,SAASm7C,WF2C5BkC,eAA+BnyC,GAEpC,MACMoyC,EAAuC,CAAC,EAAG,EAAG,GACpD,IAAI9gB,EACA9yB,EACA/C,EAEAhE,EADAwlB,GAAK,EAELo1B,EAAgC,CAAC,EAAG,EAAG,GACvCrjB,EAAQ,EAEZ,MAAMsjB,EAASx9C,SAASC,cAAc,UAChCw9C,EAAUD,EAAOE,YAAcF,EAAOE,WAAW,MACvD,IAAKD,EACH,OAAOH,EAGT,MAAM/gC,QAAcohC,EAAAA,GAAAA,IAAazyC,GACjCvE,EAAS4V,EAAMqhC,eAAiBrhC,EAAM3a,cAAgB2a,EAAM5V,OAC5D+C,EAAQ6S,EAAMshC,cAAgBthC,EAAMuhC,aAAevhC,EAAM7S,MACzD8zC,EAAO72C,OAASA,EAChB62C,EAAO9zC,MAAQA,EAEf+zC,EAAQM,UAAUxhC,EAAO,EAAG,GAE5B,IACEigB,EAAOihB,EAAQO,aAAa,EAAG,EAAGt0C,EAAO/C,GACzC,MAAOU,GACP,OAAOi2C,EAMT,IAHA36C,EAAS65B,EAAKA,KAAK75B,QAGXwlB,GAAK81B,IAAiBt7C,KAC1Bu3B,EACFqjB,EAAI,IAAM/gB,EAAKA,KAAKrU,GACpBo1B,EAAI,IAAM/gB,EAAKA,KAAKrU,EAAI,GACxBo1B,EAAI,IAAM/gB,EAAKA,KAAKrU,EAAI,GAO1B,OAJAo1B,EAAI,GAAK53C,KAAKoC,MAAMw1C,EAAI,GAAKrjB,GAC7BqjB,EAAI,GAAK53C,KAAKoC,MAAMw1C,EAAI,GAAKrjB,GAC7BqjB,EAAI,GAAK53C,KAAKoC,MAAMw1C,EAAI,GAAKrjB,GAEtBqjB,EExFHW,CAAgBd,EAAiBp9C,SAASm7C,UAAUC,SACjD7e,MAAMv3B,IACL,MAAMg4C,EAAetC,GAAgB11C,GAC/B21C,EAAY,IAAGf,GAAQ50C,KAC7Bw3C,EAAiB,CAAE9Y,MAAO+Y,EAAStzC,QAAS4zC,gBAAiBpC,EAAUqC,aAAAA,SAG5E,CAACX,EAAkBG,IAEhB2B,GAA4B75C,EAAAA,EAAAA,KAAa+C,IAC7Cm1C,EAAiB,CAAE9Y,MAAO+Y,EAAStzC,QAASgzC,UAAW90C,EAAE8G,OAAOqgC,YAC/D,CAACgO,IAEEj4C,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,uBAElD,MAAMyV,GAAc/B,MAAAA,OAAA,EAAAA,EAAmB,KAAMA,EAAiB,GAAGtB,OAASU,EAAAA,GAE1E,OACE,0BAAKx2C,UAAU,4DACb,0BAAKA,UAAU,sBACb,mBAACmjB,GAAA,EAAD,CACE1iB,KAAK,aACLT,UAAU,OACV6Z,SAAUs/B,EACVj5C,QAASy3C,GAERr4C,EAAK,gBAGR,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,WACLT,UAAU,OACVE,QAAS03C,GAERt4C,EAAK,aAGR,mBAAC6jB,GAAA,EAAD,CAAU1iB,KAAK,WAAWP,QAAS23C,GAChCv4C,EAAK,yBAGR,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,qBACZiqC,QAASpiC,QAAQ+vC,GACjBl9B,SAAUk/B,KAIb9B,EACC,0BAAKp3C,UAAU,uBACZo3C,EAAiBn0B,KAAK4yB,GACrB,mBAAC,GAAD,CACEA,UAAWA,EACXpX,MAAOA,EACP2Q,WAAY6H,IAAepB,EAAUC,KACrC51C,QAASg4C,OAKf,mBAAC10B,GAAA,EAAD,WC/GF41B,GAAcrE,GAAQR,GAAQ,WAC9B8E,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WA0MzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACb/4C,KAAKb,MAAO05C,EAAI,IAAOC,EAAME,UAAUj1C,MAAQ,IAC/C/D,KAAKb,OAAO,EAAI05C,EAAI,KAAOC,EAAME,UAAUh4C,OAAS,KAEtDi4C,YAAaj5C,KAAKb,MAAM05C,EAAI,IAAMC,EAAMI,QAAQn1C,MAAQ,KAI5D,SAASo1C,GAAT,EAEEL,GAC0B,IAF1B,cAAEC,EAAF,YAAiBE,GAES,EAC1B,MAAO,CACLA,GAAeH,EAAMI,QAAQn1C,MAAQ,GACrCg1C,EAAc,IAAMD,EAAME,UAAUj1C,MAAQ,GAC5C,EAAIg1C,EAAc,IAAMD,EAAME,UAAUh4C,OAAS,IA8ErD,UAAe5D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMygC,GAAQC,EAAAA,EAAAA,IAAY1gC,IACpB,gBAAE85C,GAAoB95C,EAAOmc,SAASg9B,OAAO1Y,IAAU,GAC7D,MAAO,CACLqZ,gBAAAA,EACArZ,MAAAA,KANc1gC,EAtSyC,IAMvD,IANwD,SAC5DuN,EAD4D,eAE5Ds3B,EAF4D,QAG5D7I,EAH4D,MAI5D0E,EAJ4D,gBAK5DqZ,GACI,EACJ,MAAM,iBAAEP,IAAqBx4C,EAAAA,EAAAA,MAEvBy4C,GAAWzzC,EAAAA,EAAAA,MACjByzC,EAAStzC,QAAUu6B,EAEnB,MAAMrvB,GAAerL,EAAAA,EAAAA,IAAuB,MAEtC+1C,GAAiB/1C,EAAAA,EAAAA,IAAuB,MAExCg2C,GAAeh2C,EAAAA,EAAAA,IAAuB,MACtCi2C,GAAgBj2C,EAAAA,EAAAA,KAAO,IAEtBw1C,EAAKU,IAAU34C,EAAAA,EAAAA,IA8KxB,SAAuBw2C,GACrB,OAAOA,GAAmBA,EAAgB3a,WAAW,KACjD4X,GAAQR,GAAQuD,EAAgBlrB,QAAQ,IAAK,MAC7CwsB,GAjL2Bc,CAAcpC,IAEvCqC,GAASp2C,EAAAA,EAAAA,IAAOw1C,IACtBh4C,EAAAA,EAAAA,KAAU,KACR44C,EAAOj2C,QAAUq1C,IAChB,CAACA,IAEJ,MAAOljC,EAAY+jC,EAAgBC,IAAoB11B,EAAAA,GAAAA,MAChD21B,EAAUC,IAAej5C,EAAAA,EAAAA,IAAS,KAClCk5C,EAAUC,IAAen5C,EAAAA,EAAAA,IAAS,IAEnCo5C,GAAW32C,EAAAA,EAAAA,MACX42C,GAAc52C,EAAAA,EAAAA,OAGpBxC,EAAAA,EAAAA,KAAU,KAER,MAAMm4C,EAAY,CAChBkB,WAAYd,EAAe51C,QAAS02C,eACjC70B,EAAAA,GAAAA,IAAK+zB,EAAe51C,QAASS,wBAAyB,CAAC,MAAO,QAAS,YAEtEi1C,EAAU,CACdgB,WAAYb,EAAa71C,QAAS02C,eAC/B70B,EAAAA,GAAAA,IAAKg0B,EAAa71C,QAASS,wBAAyB,CAAC,WAK1D,SAASk2C,EAAgBz4C,GACvB,MAAMq3C,EAAgB,CACpB/4C,KAAKsE,IAAItE,KAAKqE,IAAI,EAAG3C,EAAEuO,MAAS+oC,EAAUkB,YAAalB,EAAUj1C,MAAQ,GACzE/D,KAAKsE,IAAItE,KAAKqE,IAAI,EAAG3C,EAAEsO,MAASgpC,EAAU5kC,IAAM1F,EAAalL,QAASxH,WAAYg9C,EAAUh4C,OAAS,KAGjG,YAAEi4C,GAAgBL,GAAca,EAAOj2C,QAASw2C,EAASx2C,SAK/D,OAHA+1C,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASx2C,UAC9Dk2C,KAEO,EAYT,SAASU,EAAc14C,GACrB,MAAM,cAAEq3C,GAAkBH,GAAca,EAAOj2C,QAASw2C,EAASx2C,SAC3Dy1C,EAAcj5C,KAAKsE,IAAItE,KAAKqE,IAAI,EAAG3C,EAAEuO,MAASipC,EAAQgB,YAAahB,EAAQn1C,MAAQ,GAKzF,OAHAw1C,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASx2C,UAC9Dk2C,KAEO,EAhCTM,EAASx2C,QAAU,CAAEw1C,UAAAA,EAAWE,QAAAA,IAgBhCz0C,EAAAA,EAAAA,IAAc20C,EAAe51C,QAAU,CACrCkB,UAAWy1C,EACXv1C,OAAQu1C,EACRx1C,UAAWg1C,EACXn6C,QAASm6C,EACTU,wBAAyB,kCACzBC,YAAY,KAad71C,EAAAA,EAAAA,IAAc40C,EAAa71C,QAAU,CACnCkB,UAAW01C,EACXx1C,OAAQw1C,EACRz1C,UAAWg1C,EACXn6C,QAASm6C,EACTU,wBAAyB,kCACzBC,YAAY,MAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAtB,YAA0BE,EAAc,GAAMe,EAASx2C,QAAUo1C,GAAcC,EAAKmB,EAASx2C,SAAW,GACxG+2C,EAAMtG,GAAQS,GAAQmE,IACtB5D,EAAM4D,EAAI,GACV2B,EAASvG,GAAQS,GAAQ,CAACO,EAAK,EAAG,MAGxCp0C,EAAAA,EAAAA,KAAU,KACR,MAAM+2C,EAAMlD,GAAQmE,GACdx5C,EAAS,IAAG40C,GAAQ2D,KAK1B,GAHAiC,EAAYjC,EAAI/tC,KAAK,OACrBkwC,EAAY16C,IAEPi6C,EAAc91C,QAAS,CAC1B,MAAM6zC,EAAetC,GAAgB6C,GACrCf,EAAiB,CACf9Y,MAAO+Y,EAAStzC,QAChB+yC,gBAAYh3C,EACZ63C,gBAAiB/3C,EACjBg4C,aAAAA,IAGJiC,EAAc91C,SAAU,IACvB,CAACq1C,EAAKhC,KAGTh2C,EAAAA,EAAAA,KAAU,MAwGZ,SACEg3C,EACA5C,EACAgF,EACAD,GAEA,IAAIS,EACAnoC,EACAooC,EAECT,EAAYz2C,SAAYw2C,EAASx2C,SAWpCi3C,EAAIT,EAASx2C,QAAQw1C,UAAUj1C,MAC/BuO,EAAI0nC,EAASx2C,QAAQw1C,UAAUh4C,OAC/B05C,EAAMT,EAAYz2C,UAXlBi3C,EAAI5C,EAAOM,YACX7lC,EAAIulC,EAAO57C,aACXy+C,EAAM7C,EAAOE,WAAW,MAExBF,EAAO9zC,MAAQ02C,EACf5C,EAAO72C,OAASsR,EAEhB2nC,EAAYz2C,QAAUk3C,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBH,EAAGnoC,GAClCuoC,EAASF,EAAQ9jB,KACjBikB,EAAMpG,GAAQ,CAACO,EAAK,EAAG,IAE7B,IAAIh1B,EAAQ,EAEZ,IAAK,IAAInR,EAAI,EAAGA,EAAIwD,EAAGxD,IAAK,CAC1B,MAAMisC,EAAO,EAAIjsC,GAAKwD,EAAI,GACpB0oC,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAIlsC,EAAI,EAAGA,EAAI4rC,EAAG5rC,IAAK,CAC1B,MAAMqsC,EAAOrsC,GAAK4rC,EAAI,GACtBI,EAAO56B,KAAW+6B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAO56B,KAAW+6B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAO56B,KAAW+6B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAO56B,KAAW,KAItBy6B,EAAKS,aAAaR,EAAS,EAAG,GApJ5BS,CAAUhC,EAAe51C,QAAStG,WAAiC+3C,EAAKgF,EAAaD,KACpF,CAAC/E,KAGJp0C,EAAAA,EAAAA,KAAU,MAmJZ,SAAiBg3C,GACf,MAAM4C,EAAI5C,EAAOM,YAEjBN,EAAO9zC,MAAQ02C,EACf5C,EAAO72C,OAFG,EAGV,MAAM05C,EAAM7C,EAAOE,WAAW,MAExB4C,EAAUD,EAAIE,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQ9jB,KAEvB,IAAI5W,EAAQ,EAEZ,IAAK,IAAIpR,EAAI,EAAGA,EAAI4rC,EAAG5rC,IAAK,CAC1B,MACM+oC,EAAMlD,GAAQ,CADR7lC,GAAK4rC,EAAI,GACK,EAAG,IAE7BI,EAAO56B,KAAW23B,EAAI,GACtBiD,EAAO56B,KAAW23B,EAAI,GACtBiD,EAAO56B,KAAW23B,EAAI,GAEtBiD,EAAO56B,KAAW,IAGpBy6B,EAAIS,aAAaR,EAAS,EAAG,GAzK3BU,CAAQhC,EAAa71C,QAAStG,cAC7B,IAEH,MAAMo+C,GAAkB38C,EAAAA,EAAAA,KAAa+C,IACnC,MAAM65C,EAAW75C,EAAEgH,cAAc6G,MAAM2c,QAAQ,WAAY,IAAIqU,MAAM,EAAG,IAExE,GAAIgb,EAASxgB,MAAM,mCAAoC,CACrD,MAAM6c,EAAM2D,EAASze,MAAM,KAAKva,KAAKi5B,GAAYjiC,OAAOiiC,EAAQ/W,UAChE8U,EAAOlF,GAAQuD,IAGjBl2C,EAAEgH,cAAc6G,MAAQgsC,IACvB,IAEGE,GAAkB98C,EAAAA,EAAAA,KAAa+C,IACnC,MAAMg6C,EAAWh6C,EAAEgH,cAAc6G,MAAM2c,QAAQ,gBAAiB,IAAIqU,MAAM,EAAG,GAEzEmb,EAAS3gB,MAAM,uBACjBwe,EAAOlF,GAAQR,GAAQ6H,EAASxvB,QAAQ,IAAK,OAG/CxqB,EAAEgH,cAAc6G,MAAQmsC,IACvB,IAEGC,GAA6Bh9C,EAAAA,EAAAA,KAAa+C,IAC9C63C,EAAOlF,GAAQR,GAAQnyC,EAAEgH,cAAckzC,QAAQv8C,MAAO6sB,QAAQ,IAAK,SAClE,IAEG5sB,GAAYmC,EAAAA,EAAAA,GAChB,gEACAkU,GAAc,eAKhB,OAFAwK,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,4BAGhD,0BAAKj+B,IAAK2J,EAAcpP,UAAWA,GACjC,0BAAKA,UAAU,sBACb,0BAAKyF,IAAKq0C,EAAgB95C,UAAU,gBAClC,kCACA,0BACEA,UAAU,SACV/C,MAAQ,wBAAuBw8C,EAAc,SAASA,EAAc,6BAA6BwB,QAGrG,0BAAKx1C,IAAKs0C,EAAc/5C,UAAU,cAChC,kCACA,0BACEA,UAAU,SACV/C,MAAQ,yBAAwB08C,4BAAsCuB,QAG1E,0BAAKl7C,UAAU,SACb,mBAACqiB,GAAA,EAAD,CAAWpS,MAAOuqC,EAAUrpB,MAAM,MAAMnX,SAAUmiC,IAClD,mBAAC95B,GAAA,EAAD,CAAWpS,MAAOqqC,EAAUnpB,MAAM,MAAMnX,SAAUgiC,MAGtD,0BAAKh8C,UAAU,qBACZq5C,GAAkBp2B,KAAKljB,GACtB,0BACEC,UAAWD,IAAW,IAAGk7C,IAAQ,cAAWh7C,EAC5C,aAAYF,EACZ9C,MAAQ,qBAAoB8C,KAC5BG,QAASm8C,Y,eC1MrB,MAyLA,IAAev+C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLu+C,6BAA8Bp1C,QAAQnJ,EAAOmc,SAASC,MAAMmiC,8BAC5DC,8BAA+Br1C,QAAQnJ,EAAOmc,SAASC,MAAMoiC,+BAC7DC,sBAAuBt1C,QAAQnJ,EAAOmc,SAASC,MAAMqiC,uBACrDC,uBAAwBv1C,QAAQnJ,EAAOmc,SAASC,MAAMsiC,wBACtDC,0BAA2Bx1C,QAAQnJ,EAAOmc,SAASC,MAAMuiC,2BACzDC,2BAA4Bz1C,QAAQnJ,EAAOmc,SAASC,MAAMwiC,4BAC1DC,8BAA+B11C,QAAQnJ,EAAOmc,SAASC,MAAMyiC,+BAC7DC,oBAAqB9+C,EAAOmc,SAASC,MAAM0iC,oBAC3CC,qBAAsB/+C,EAAOmc,SAASC,MAAM2iC,qBAC5CC,wBAAyBh/C,EAAOmc,SAASC,MAAM4iC,2BAZjCj/C,EAzLqC,IAcnD,IAdoD,SACxDuN,EADwD,eAExDs3B,EAFwD,QAGxD7I,EAHwD,6BAIxDwiB,EAJwD,8BAKxDC,EALwD,sBAMxDC,EANwD,uBAOxDC,EAPwD,0BAQxDC,EARwD,2BASxDC,EATwD,8BAUxDC,EAVwD,qBAWxDE,EAXwD,oBAYxDD,EAZwD,wBAaxDE,GACI,EACJ,MAAM,yBACJC,EADI,gCAEJC,EAFI,2BAGJC,EAHI,8BAIJC,IACEr+C,EAAAA,EAAAA,OAEJwC,EAAAA,EAAAA,KAAU,KACR07C,MACC,CAACA,IAEJ,MAAMI,GAAejtC,EAAAA,EAAAA,GAAY,KAAK,GAEhCktC,GAAuBj+C,EAAAA,EAAAA,KAAY,CACvC+C,EACAm7C,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBhB,IACc,UAAbgB,EAAuBd,EAAwBE,GAC/Ce,EAAyC,YAAbH,EAC9Bf,EACc,UAAbe,EAAuBb,EAAyBE,EAErDO,EAA2B,CACzBI,SAAAA,KACgB,WAAZC,GAAwB,CAAEvtB,UAAW7tB,EAAE8G,OAAOqgC,QAASoU,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoBv7C,EAAE8G,OAAOqgC,QAAStZ,SAAUwtB,OAErF,CACDb,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/BY,IAGIS,GAAkCv+C,EAAAA,EAAAA,KAAa+C,IACnD86C,EAAgC,CAC9BjtB,UAAW7tB,EAAE8G,OAAOqgC,YAErB,CAAC2T,IAEE59C,GAAOC,EAAAA,EAAAA,KAIb,OAFAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,eAGhD,0BAAK1jC,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAA/D,qBAGA,mBAACqpC,GAAA,EAAD,CACEnY,MAAM,oBAEN2hB,SAAUxzC,EAAKw9C,EAAsB,gCAAkC,kCACvEvT,QAASuT,EACT9iC,SAAW5X,IACTg7C,EAA8B,CAAEN,oBAAqB16C,EAAE8G,OAAOqgC,aAGlE,mBAACD,GAAA,EAAD,CACEnY,MAAM,wBACNtX,UAAWijC,EAEXhK,SAAUxzC,EAAKy9C,EAAuB,gCAAkC,kCACxExT,QAASwT,EACT/iC,SAAW5X,IACTg7C,EAA8B,CAAEL,qBAAsB36C,EAAE8G,OAAOqgC,aAGnE,0BAAKvpC,UAAU,wBACb,mBAAC0pC,GAAA,EAAD,CACEvY,MAAM,QACNnsB,IAAK,EACLD,IAAK,GACLkL,MAAO+sC,EACPhjC,SAAW6jC,IACTT,EAA8B,CAAEJ,wBAAyBa,IACzDR,GAAa,KAAMS,EAAAA,GAAAA,SAAgB79C,EAAW49C,UAKtD,0BAAK79C,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC5DX,EAAK,6BAGR,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,gCAEZwzC,SAAUxzC,EAAKi9C,EAA+B,gCAAkC,kCAChFhT,QAASgT,EACTviC,SAAW5X,IACTk7C,EAAqBl7C,EAAG,UAAW,aAGvC,mBAACknC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,kBACZua,UAAW0iC,EAEXzJ,SAAUxzC,EAAKk9C,EAAgC,gCAAkC,kCACjFjT,QAASiT,EACTxiC,SAAW5X,IACTk7C,EAAqBl7C,EAAG,UAAW,oBAKzC,0BAAKpC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,iBAEhF,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,0BACZwzC,SAAUxzC,EAAKm9C,EAAwB,gCAAkC,kCACzElT,QAASkT,EACTziC,SAAW5X,IACTk7C,EAAqBl7C,EAAG,QAAS,aAGrC,mBAACknC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,kBACZua,UAAW4iC,EACX3J,SAAUxzC,EAAKo9C,EAAyB,gCAAkC,kCAC1EnT,QAASmT,EACT1iC,SAAW5X,IACTk7C,EAAqBl7C,EAAG,QAAS,oBAKvC,0BAAKpC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,mBAEhF,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,4BAEZwzC,SAAUxzC,EAAKq9C,EAA4B,gCAAkC,kCAC7EpT,QAASoT,EACT3iC,SAAW5X,IACTk7C,EAAqBl7C,EAAG,YAAa,aAGzC,mBAACknC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,kBACZua,UAAW8iC,EAEX7J,SAAUxzC,EAAKs9C,EAA6B,gCAAkC,kCAC9ErT,QAASqT,EACT5iC,SAAW5X,IACTk7C,EAAqBl7C,EAAG,YAAa,oBAK3C,0BAAKpC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,eAEhF,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,iBACZiqC,QAASsT,EACT7iC,SAAU4jC,UCHpB,IAAe9/C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB,cACtB,MACEmc,UACEC,OAAO,YAAE2jC,EAAF,mBAAeC,EAAf,mBAAmCC,GADlC,QAERC,GAHE,QAKJC,EALI,eAMJC,GACEpgD,EAEJ,MAAO,CACL+/C,YAAAA,EACAM,aAAcF,EAAQG,WACtBC,cAAeH,EAAe1gD,OAC9BsgD,mBAAAA,EACAC,mBAAAA,EACAO,6BAA4B,UAAEN,EAAQO,mBAAV,aAAE,EAAqBC,WACnDC,0BAAyB,UAAET,EAAQU,gBAAV,aAAE,EAAkBF,WAC7CG,8BAA6B,UAAEX,EAAQY,oBAAV,aAAE,EAAsBJ,WACrDK,4BAA2B,UAAEb,EAAQc,gBAAV,aAAE,EAAkBN,WAC/CO,4BAA2B,UAAEf,EAAQgB,kBAAV,aAAE,EAAoBR,cArBnC3gD,EApL+B,IAe7C,IAf8C,SAClDuN,EADkD,eAElDs3B,EAFkD,QAGlD7I,EAHkD,YAIlDgkB,EAJkD,aAKlDM,EALkD,cAMlDE,EANkD,mBAOlDP,EAPkD,mBAQlDC,EARkD,6BASlDO,EATkD,0BAUlDG,EAVkD,8BAWlDE,EAXkD,4BAYlDE,EAZkD,4BAalDE,GAEI,EACJ,MAAM,oBACJE,EADI,oBAEJC,EAFI,mBAGJC,EAHI,oBAIJC,EAJI,sBAKJC,IACExgD,EAAAA,EAAAA,OAEJwC,EAAAA,EAAAA,KAAU,KACR69C,IACAC,IACAF,IACAG,MACC,CAACF,EAAqBC,EAAoBF,EAAqBG,IAElE,MAAMhgD,GAAOC,EAAAA,EAAAA,KAIb,SAASigD,EAAmBd,GAC1B,OAAQA,GACN,IAAK,YACH,OAAOp/C,EAAK,gBAEd,IAAK,WACH,OAAOA,EAAK,eAEd,IAAK,SACH,OAAOA,EAAK,cAMlB,OAjBAuhB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,SAkBhD,0BAAK1jC,UAAU,kCACb,0BAAKA,UAAU,sBACb,mBAACmjB,GAAA,EAAD,CACE1iB,KAAK,cACL6qC,QAAM,EACNprC,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,sBAE9B,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,iBAC7B++C,EAAe,GACd,2BAAMr+C,UAAU,WAAWsC,IAAI,QAC5BhD,EAAK,QAAS++C,MAKvB,mBAACl7B,GAAA,EAAD,CACE1iB,KAAK,OACL6qC,QAAM,EACNprC,QAAS,IAAM0iC,EACbmb,EAAcra,EAAAA,GAAAA,aAA+BA,EAAAA,GAAAA,gBAG/C,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,wBAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5BhD,EAAKy+C,EAAc,aAAe,kBAIzC,mBAAC56B,GAAA,EAAD,CACE1iB,KAAK,kBACL6qC,QAAM,EACNprC,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,wBAE9B,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,kBAC7Bi/C,EAAgB,GACf,2BAAMv+C,UAAU,WAAWsC,IAAI,QACV,IAAlBi8C,EAAsB,YAAe,GAAEA,iBAOlD,0BAAKv+C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,iBAErF,mBAAC6jB,GAAA,EAAD,CACEmoB,QAAM,EACNtrC,UAAU,UACVE,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,qBAE9B,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,sBAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5Bk9C,EAAmBhB,MAI1B,mBAACr7B,GAAA,EAAD,CACEmoB,QAAM,EACNtrC,UAAU,UACVE,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,kBAE9B,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,kBAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5Bk9C,EAAmBb,MAI1B,mBAACx7B,GAAA,EAAD,CACEmoB,QAAM,EACNtrC,UAAU,UACVE,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,sBAE9B,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,6BAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5Bk9C,EAAmBX,MAI1B,mBAAC17B,GAAA,EAAD,CACEmoB,QAAM,EACNtrC,UAAU,UACVE,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,oBAE9B,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,yBAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5Bk9C,EAAmBT,MAI1B,mBAAC57B,GAAA,EAAD,CACEmoB,QAAM,EACNtrC,UAAU,UACVE,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,oBAE9B,0BAAK1jC,UAAU,uBACb,2BAAMA,UAAU,SAASV,EAAK,gBAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5Bk9C,EAAmBP,OAM3BhB,GACC,0BAAKj+C,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC5DX,EAAK,iCAER,mBAACgqC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,4CACZwzC,SAAUxzC,EAAK,gCACfiqC,QAASpiC,QAAQ62C,GACjBnkC,UAAWokC,EACXzU,QAAS+V,UChHrB,IAAezhD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLyhD,UAAWzhD,EAAOmc,SAASC,MAAMqlC,UACjCC,SAAU1hD,EAAOmc,SAASC,MAAMslC,YAJlB3hD,EAnEgC,IAM9C,IAN+C,SACnDuN,EADmD,eAEnDs3B,EAFmD,QAGnD7I,EAHmD,UAInD0lB,EAJmD,SAKnDC,GACI,EACJ,MAAM,cACJC,EADI,iBAEJ9W,IACE9pC,EAAAA,EAAAA,OAEG6gD,EAAkBC,IAAuBv+C,EAAAA,EAAAA,IAAiBo+C,IAC1D/gB,EAAWmhB,EAAeC,IAAmBp7B,EAAAA,GAAAA,MAGpDpjB,EAAAA,EAAAA,KAAU,KACRo+C,MACC,CAACA,IAEJ,MAAMK,GAAe3gD,EAAAA,EAAAA,KAAa4gD,IAChCJ,EAAoBI,GACpBH,KAEKI,EAAAA,GAAAA,IAAYD,GAAsB,KACrCF,IAEAlX,EAAiB,CAAE6W,SAAUO,SAE9B,CAACH,EAAeC,EAAiBlX,IAE9BxX,GAAU5xB,EAAAA,EAAAA,KAAQ,IACfggD,EAsBX,SAAsBA,GACpB,MAAMU,GAAmBp+C,OAAOq+C,UAAUV,UAAY,MAAMW,cACtDC,EAAgBH,EAAgBI,OAAO,EAAG,GAEhD,OAAOd,EAAUx8B,KAAI,QAAC,SAAEg9B,EAAF,WAAYO,EAAZ,KAAwBr/B,GAAzB,QAAqC,CACxDlR,MAAOgwC,EACP9uB,MAAOqvB,EACP1N,SAAU3xB,MACRsc,MAAMC,IACDyiB,GAAoBziB,EAAEztB,QAAUkwC,GAAmBziB,EAAEztB,QAAUqwC,EAAsB,GAAJ,IA/BrEG,CAAahB,QAAax/C,GAC5C,CAACw/C,IAIJ,OAFA5+B,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,UAGhD,0BAAK1jC,UAAU,kEACZqxB,EACC,mBAACD,GAAA,EAAD,CACEjQ,KAAK,yBACLkQ,QAASA,EACTC,SAAUsuB,EACVc,cAAe/hB,EAAYihB,OAAmB3/C,EAC9C+Z,SAAUgmC,IAGZ,mBAACx8B,GAAA,EAAD,WCrED,SAASm9B,GAAcC,GAC5B,OAAQA,GACN,KAAKld,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,cCKb,MAqLA,IAAe5lC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAC9B6iD,GADG,OAAED,GAAyB,EAGlC,MACEn9B,OAASC,KAAMC,GACfxJ,UAAU,QAAE+jC,IACVlgD,EAEJ,OAAQ4iD,GACN,KAAKld,EAAAA,GAAAA,mBACHmd,EAAkB3C,EAAQO,YAC1B,MAEF,KAAK/a,EAAAA,GAAAA,gBACHmd,EAAkB3C,EAAQU,SAC1B,MAEF,KAAKlb,EAAAA,GAAAA,oBACHmd,EAAkB3C,EAAQY,aAC1B,MAEF,KAAKpb,EAAAA,GAAAA,kBACHmd,EAAkB3C,EAAQc,SAC1B,MAEF,KAAKtb,EAAAA,GAAAA,kBACHmd,EAAkB3C,EAAQgB,WAI9B,OAAK2B,EAIE,IACFA,EACHl9B,UAAAA,GALO,KAhCO5lB,EArLyC,IAWvD,IAXwD,OAC5D6iD,EAD4D,SAE5Dt1C,EAF4D,eAG5Ds3B,EAH4D,QAI5D7I,EAJ4D,WAK5D2kB,EAL4D,aAM5DoC,EAN4D,aAO5DC,EAP4D,aAQ5DC,EAR4D,aAS5DC,EAT4D,UAU5Dt9B,GACI,EACJ,MAAM,qBAAEu9B,IAAyBniD,EAAAA,EAAAA,MAE3BO,GAAOC,EAAAA,EAAAA,KAEP4hD,GAAoB1hD,EAAAA,EAAAA,KAAQ,KAChC,OAAQmhD,GACN,KAAKld,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,MAAO,CACL,CAAEzzB,MAAO,YAAakhB,MAAO7xB,EAAK,iBAClC,CAAE2Q,MAAO,WAAYkhB,MAAO7xB,EAAK,iBAGrC,QACE,MAAO,CACL,CAAE2Q,MAAO,YAAakhB,MAAO7xB,EAAK,iBAClC,CAAE2Q,MAAO,WAAYkhB,MAAO7xB,EAAK,gBACjC,CAAE2Q,MAAO,SAAUkhB,MAAO7xB,EAAK,kBAGpC,CAACA,EAAMshD,IAEJQ,EAAiB,CACrBC,iBAAiC,WAAf3C,EAClB4C,kBAAkC,cAAf5C,GAGf6C,EAAaZ,GAAcC,GAE3BY,GAAa/hD,EAAAA,EAAAA,KAAQ,KACzB,OAAQmhD,GACN,KAAKld,EAAAA,GAAAA,mBACH,OAAOpkC,EAAK,qBACd,KAAKokC,EAAAA,GAAAA,gBACH,OAAOpkC,EAAK,iBACd,KAAKokC,EAAAA,GAAAA,oBACH,OAAOpkC,EAAK,4BACd,KAAKokC,EAAAA,GAAAA,kBACH,OAAOpkC,EAAK,wBACd,KAAKokC,EAAAA,GAAAA,kBACH,OAAOpkC,EAAK,eACd,QACE,UAEH,CAACA,EAAMshD,KAEV//B,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBge,GAElD,MAAMa,GAAkBhiD,EAAAA,EAAAA,KAAQ,KAC9B,GAAQmhD,IACDld,EAAAA,GAAAA,gBACH,OAAOpkC,EAAK,gBAIf,CAACA,EAAMshD,IAEJc,EAAwB,MAC5B,OAAQd,GACN,KAAKld,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,QACE,OAAOA,EAAAA,GAAAA,mCAXiB,GAexBie,EAAuB,MAC3B,OAAQf,GACN,KAAKld,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,QACE,OAAOA,EAAAA,GAAAA,kCAXgB,GAevBke,GAAeniD,EAAAA,EAAAA,KAAQ,IACtBqhD,GAAiBC,GAAiBp9B,EAIhCo9B,EAAac,QAAO,CAACC,EAAQp3C,IAC3Bo3C,GAAUn+B,EAAUjZ,GAAUiZ,EAAUjZ,GAAQq3C,aAAgB,IACtEjB,EAAapjD,QALP,GAMR,CAACqjD,EAAcD,EAAcn9B,IAE1Bq+B,GAAaviD,EAAAA,EAAAA,KAAQ,IACpBuhD,GAAiBC,GAAiBt9B,EAIhCs9B,EAAaY,QAAO,CAACC,EAAQp3C,IAC3Bo3C,GAAUn+B,EAAUjZ,GAAUiZ,EAAUjZ,GAAQq3C,aAAgB,IACtEf,EAAatjD,QALP,GAMR,CAACujD,EAAcD,EAAcr9B,IAE1Bs+B,GAAyB5iD,EAAAA,EAAAA,KAAa4Q,IAC1CixC,EAAqB,CACnBK,WAAAA,EACA7C,WAAYzuC,MAEb,CAACsxC,EAAYL,IAEhB,OACE,0BAAKlhD,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYuhD,GAE3E,mBAACpwB,GAAA,EAAD,CACEjQ,KAAO,cAAaogC,IACpBlwB,QAAS8vB,EACTnnC,SAAUioC,EACV3wB,SAAUotB,IAGX+C,GACC,wBAAGzhD,UAAU,mCAAmCsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYwhD,IAI1F,0BAAKzhD,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAAYX,EAAK,sBAEpF8hD,EAAeE,mBACd,mBAACn+B,GAAA,EAAD,CACEmoB,QAAM,EACN7qC,KAAK,WACLP,QAAS,KACP0iC,EAAe8e,KAGjB,0BAAK1hD,UAAU,iCACZ4hD,EAAe,GAAK,2BAAM5hD,UAAU,OAAOsC,IAAI,QAA3B,IAAoCs/C,GACzD,2BAAM5hD,UAAU,SAASV,EAAK,oBAC9B,2BAAMU,UAAU,YAAYV,EAAK,wBAItC8hD,EAAeC,kBACd,mBAACl+B,GAAA,EAAD,CACEmoB,QAAM,EACN7qC,KAAK,cACLP,QAAS,KACP0iC,EAAe+e,KAGjB,0BAAK3hD,UAAU,iCACZgiD,EAAa,GAAK,2BAAMhiD,UAAU,OAAOsC,IAAI,QAA3B,IAA0C0/C,GAC7D,2BAAMhiD,UAAU,SAASV,EAAK,mBAC9B,2BAAMU,UAAU,YAAYV,EAAK,8BCrD/C,SAAS4iD,GAAYC,GACnB,MAAO,CAACA,EAAQC,OAAQD,EAAQE,SAAS9gC,OAAOpa,SAASoD,KAAK,MAGhE,SAAS+3C,GAAqBH,GAC5B,MAAQ,GAAEA,EAAQI,cAAcJ,EAAQI,YAAc,KAAO,MAAMJ,EAAQK,YAAYL,EAAQM,gBAGjG,UAAe3kD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLogD,eAAgBpgD,EAAOogD,kBAHTrgD,EAjI6C,IAK3D,IAL4D,SAChEuN,EADgE,eAEhEs3B,EAFgE,QAGhE7I,EAHgE,eAIhEqkB,GACI,EACJ,MAAM,mBACJiB,EADI,uBAEJqD,EAFI,2BAGJC,IACE5jD,EAAAA,EAAAA,OAEG6jD,EAAiCC,EAA+BC,IAAkCn+B,EAAAA,GAAAA,MACzGpjB,EAAAA,EAAAA,KAAU,KACR89C,MACC,CAACA,IAEJ,MAAM0D,GAA8B1jD,EAAAA,EAAAA,KAAasnB,IAC/C+7B,EAAuB,CAAE/7B,KAAAA,MACxB,CAAC+7B,IAEEM,GAA6B3jD,EAAAA,EAAAA,KAAY,KAC7CyjD,IACAH,MACC,CAACG,EAAgCH,IAE9BM,GAAiBxjD,EAAAA,EAAAA,KAAQ,IACtB2+C,EAAetoB,MAAMqsB,GAAYA,EAAQe,aAC/C,CAAC9E,IAEE+E,GAAgB1jD,EAAAA,EAAAA,KAAQ,IACrB2+C,EAAe78B,QAAQ4gC,IAAaA,EAAQe,aAClD,CAAC9E,IAEE9+C,GAAOC,EAAAA,EAAAA,KAqEb,OAnEAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,uBAoEhD,0BAAK1jC,UAAU,kCACZijD,IAnEyBd,EAmEcc,EAjExC,0BAAKjjD,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjEX,EAAK,gCAGR,mBAAC6jB,GAAA,EAAD,CAAUmoB,QAAM,EAAC0C,UAAQ,EAAChuC,UAAU,WAClC,0BAAKA,UAAU,sBAAsBsC,IAAI,QACvC,2BAAMtC,UAAU,QAAQsC,IAAI,QAAQ6/C,EAAQiB,SAC5C,2BAAMpjD,UAAU,wBAAwBsiD,GAAqBH,IAC7D,2BAAMniD,UAAU,YAAYmiD,EAAQkB,GAApC,MAA2CnB,GAAYC,MAI3D,mBAACh/B,GAAA,EAAD,CACEnjB,UAAU,2BACVS,KAAK,OACLkF,QAAM,EACN2lC,QAAM,EACNprC,QAAS2iD,GAERvjD,EAAK,2BA8CT6jD,IAxCwBG,EAwCaH,EAtCtC,0BAAKnjD,UAAU,iBACb,yBAAIA,UAAU,4BAA4BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjEX,EAAK,kBAGPgkD,EAASrgC,KAKhB,SAAuBk/B,GACrB,OACE,mBAACh/B,GAAA,EAAD,CACE1Z,IAAK04C,EAAQx7B,KACbhhB,QAAM,EACN2lC,QAAM,EACNpS,eAAgB,CAAC,CACftS,MAAO,YACPnmB,KAAM,OACN8iD,QAAS,KACPR,EAA4BZ,EAAQx7B,SAGxC3mB,UAAU,WAEV,0BAAKA,UAAU,gCAAgCsC,IAAI,QACjD,2BAAMtC,UAAU,SAAQo7B,EAAAA,EAAAA,IAAoB97B,EAA2B,IAArB6iD,EAAQqB,aAC1D,2BAAMxjD,UAAU,SAASmiD,EAAQiB,SACjC,2BAAMpjD,UAAU,wBAAwBsiD,GAAqBH,IAC7D,2BAAMniD,UAAU,YAAYmiD,EAAQkB,GAApC,MAA2CnB,GAAYC,WAU1DgB,GACC,mBAAC/6B,GAAA,EAAD,CACEzoB,OAAQijD,EACRr8C,QAASu8C,EACT7hD,KAAK,yDACLonB,aAAa,+BACbC,eAAgB06B,EAChBpf,sBAAoB,KAhD5B,IAA6B0f,EA5BCnB,M,eCtChC,MAiEA,IAAerkD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEonB,OACE1B,KAAMwB,GAERi5B,SACEpO,IAAK0T,GALH,YAOJr/B,EAPI,cAQJhD,GACEpjB,EAEJ,MAAO,CACLknB,UAAAA,EACAu+B,WAAAA,EACAt/B,WAAYC,MAAAA,OAAF,EAAEA,EAAaC,QACzByX,gBAAiB99B,EAAO0lD,WAAWrnB,aACnCjb,cAAAA,KAlBcrjB,EAjE8B,IAQ5C,IAR6C,UACjDmnB,EADiD,WAEjDu+B,EAFiD,WAGjDt/B,EAHiD,gBAIjD2X,EAJiD,cAKjD1a,EALiD,OAMjDzhB,EANiD,QAOjD4G,GACI,EACJ,MAAM,gBACJ0zB,EADI,mBAEJ0pB,EAFI,aAGJC,IACE7kD,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNgiB,EAAQiD,IAAaljB,EAAAA,EAAAA,IAAS,IAE/BggB,GAAYvd,EAAAA,EAAAA,IAAyB,OAE3CxC,EAAAA,EAAAA,KAAU,KACRoiD,EAAmB,CAAE3mB,MAAOzb,MAC3B,CAACA,EAAQoiC,IAEZ,MAAME,GAAqBpkD,EAAAA,EAAAA,KAAQ,KACjC,MAAMqkD,GAAsBh/B,EAAAA,GAAAA,IAAO,IAC7BX,GAAc,MACd2X,GAAmB,IACvBva,QAAQwiC,GACDA,IAAc3iC,IAAkBqiC,EAAWjnD,SAASunD,MAG7D,OAAOx+B,EAAAA,EAAAA,IAAkBu+B,EAAqB5+B,EAAW3D,GACtDkc,MAAK,CAACumB,EAASC,KACd,MAAMte,GAAY1P,EAAAA,EAAAA,IAAgB/Q,EAAU8+B,KAAa,GACnDE,GAAajuB,EAAAA,EAAAA,IAAgB/Q,EAAU++B,KAAc,GAE3D,OAAOte,EAAUwe,cAAcD,QAElC,CAACT,EAAYt/B,EAAY/C,EAAeG,EAAQua,EAAiB5W,IAE9Dk/B,GAAmB/kD,EAAAA,EAAAA,KAAaikB,IACpC,MAAQ/mB,GAAIwnD,EAAN,WAAiBM,GAAen/B,EAAU5B,IAAW,GACtDygC,GAAcM,IAGnBT,EAAa,CAAEG,UAAAA,EAAWM,WAAAA,IAC1B99C,OACC,CAACq9C,EAAcr9C,EAAS2e,IAE3B,OACE,mBAAC,GAAD,CACEvlB,OAAQA,EACR0hB,cAAewiC,EACfviC,UAAWA,EACXE,kBAAmBliB,EAAK,0BACxBiiB,OAAQA,EACRG,eAAgB8C,EAChB/C,SAAUwY,EACVtY,mBAAoByiC,EACpB79C,QAASA,QC+Cf,IAAezI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEylB,OACEC,KAAM4gC,GAERl/B,OACE1B,KAAM6gC,GAERpG,SAAS,IACPpO,GAEFyU,aACEC,WAAYC,IAEZ1mD,EAEJ,MAAO,CACLsmD,WAAAA,EACAC,WAAAA,EACAd,WAAY1T,EACZ2U,cAAAA,KArBc3mD,EA/F2C,IAQzD,IAR0D,SAC9DuN,EAD8D,eAE9Ds3B,EAF8D,QAG9D7I,EAH8D,WAI9DuqB,EAJ8D,WAK9DC,EAL8D,WAM9Dd,EAN8D,cAO9DiB,GACI,EACJ,MAAM,eAAEC,IAAmB5lD,EAAAA,EAAAA,MAErBO,GAAOC,EAAAA,EAAAA,MACNqlD,EAAsBC,EAAoBC,IAAuBngC,EAAAA,GAAAA,KAClEogC,GAAqB1lD,EAAAA,EAAAA,KAAa0kD,IACtCY,EAAe,CAAEZ,UAAAA,MAChB,CAACY,IA2CJ,OAzCA9jC,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,qBA0ChD,0BAAK1jC,UAAU,wBACb,0BAAKA,UAAU,oCACb,0BAAKA,UAAU,iBACb,wBAAGA,UAAU,6CAA6CsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjFX,EAAK,sBAIV,0BAAKU,UAAU,2BACZyjD,MAAAA,GAAAA,EAAY/lD,OACX,0BAAKsC,UAAU,oBACZyjD,EAAYxgC,KAAI,CAAC8gC,EAAW7gC,IAnDzC,SAAuB6gC,EAAmB7gC,EAAWV,GACnD,MAAMwiC,GAAYzsC,EAAAA,EAAAA,IAASwrC,GACrB9qC,EAAO+rC,EAAYT,EAAWR,QAAa9jD,EAC3CiZ,EAAQ8rC,OAAoC/kD,EAAxBqkD,EAAWP,GAE/B/jD,GAAYmC,EAAAA,EAAAA,GAChB,wDACA6iD,EAAY,UAAY,SAG1B,OACE,mBAAC7hC,GAAA,EAAD,CACE1Z,IAAKs6C,EACL/jD,UAAWA,EACX2F,QAAM,EACN2lC,QAAM,EACNpS,eAAgB,CAAC,CACftS,MAAO,UACPnmB,KAAM,SACN8iD,QAAS,KACPwB,EAAmBhB,MAGvB9mD,MAAQ,SA4B6D,EA5BpCimB,GAAKF,EAAAA,SAEtC,mBAAChK,GAAA,EAAD,CAAQlZ,KAAK,SAASmZ,KAAMA,EAAMC,KAAMA,IACxC,0BAAKlZ,UAAU,eAAesC,IAAI,QAChC,yBAAIA,IAAI,SAAQ6W,EAAAA,GAAAA,IAAY6rC,GAAY/uB,EAAAA,EAAAA,IAAgBhd,IAAQ+hB,EAAAA,EAAAA,GAAa17B,EAAM4Z,KAAW,MAC7FD,MAAAA,OAAA,EAAAA,EAAMwlC,cACL,0BAAKz+C,UAAU,gBAAgBsC,IAAI,SAAQ2iD,EAAAA,GAAAA,IAA0BP,EAAezrC,EAAKwlC,cAE1FxlC,IAASA,EAAKwlC,aAAexlC,EAAK0rB,UACjC,0BAAK3kC,UAAU,mBAAmBsC,IAAI,QAAtC,IAA+C2W,EAAK0rB,YAmBfugB,CAAcnB,EAAW7gC,MAE5DugC,IAAeA,EAAW/lD,OAC5B,0BAAKsC,UAAU,aAAasC,IAAI,QAAQhD,EAAK,cAE7C,mBAACkkB,GAAA,EAAD,CAAS/Z,IAAI,cAKnB,mBAACo+B,GAAA,EAAD,CACEtuB,SAAO,EACPrZ,QAAS2kD,EACT1kD,UAAWb,EAAK,iBAEhB,wBAAGU,UAAU,cAEf,mBAAC,GAAD,CACEL,OAAQilD,EACRr+C,QAASu+C,S,eCvGjB,MAyCA,IAAehnD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLmnD,eAAeC,EAAAA,EAAAA,IAAoBpnD,EAAQ,SAF3BD,EAzCoC,IAElD,IAFmD,SACvDuN,EADuD,QAC7CyuB,EAD6C,cACpCorB,EADoC,eACrBviB,GAC9B,EACJ,MAAMtjC,GAAOC,EAAAA,EAAAA,KAIb,OAFAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,cAGhD,0BAAK1jC,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACqlD,GAAA,EAAD,CAAe1T,QAASwT,EAAerlD,KAAK,UAE5C,wBAAGE,UAAU,iCAAiCsC,IAAI,SAC/C6W,EAAAA,GAAAA,GAAW7Z,EAAK,uBAAwB,CAAC,SAI9C,0BAAKU,UAAU,gCACb,mBAACmjB,GAAA,EAAD,CACE1iB,KAAK,OACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,6BAE7BpkC,EAAK,mBAER,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,eACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,eAE7BpkC,EAAK,oBAER,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,QACLP,QAAS,IAAM0iC,EAAec,EAAAA,GAAAA,oCAE7BpkC,EAAK,2B,0BC/BhB,MA6DA,IAAexB,EAAAA,EAAAA,KA3D6B,IAatC,IAbuC,OAC3C8iD,EAD2C,SAE3Ct1C,EAF2C,eAG3Cs3B,EAH2C,QAI3C7I,EAJ2C,MAK3CnU,EAL2C,UAM3C+Y,EAN2C,iBAO3C2mB,EAP2C,YAQ3C/iC,EAAc,mBAR6B,KAS3C4f,EAT2C,YAU3C7V,EAV2C,WAW3Ci5B,EAX2C,SAY3Cx7B,GACI,EACJ,MAAOy7B,EAAiBC,IAAsBnkD,EAAAA,EAAAA,IAAiB,KACxDokD,EAAoBC,IAAyBrkD,EAAAA,EAAAA,KAAS,GAEvDskD,GAAevmD,EAAAA,EAAAA,KAAawmD,IAC5BP,GAAoBO,IAAgBP,EACtCG,EArBuB,6BAuBvB17B,EAAS87B,KAEV,CAAC97B,EAAUu7B,IAERQ,GAAmBzmD,EAAAA,EAAAA,KAAY,KAC/BkmD,GACFA,IAEFE,EAAmB,MAClB,CAACF,IAEEjmD,GAAOC,EAAAA,EAAAA,KAIb,OAFAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBge,GAGhD,0BAAK5gD,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC+lD,GAAA,EAAD,CAAgBC,OAAK,EAACC,kBAAmBP,KAG3C,0BAAK1lD,UAAU,gCACb,mBAACkmD,GAAA,EAAD,CACEtgC,MAAO4/B,GAAmB5/B,EAC1Buc,KAAMA,EACN5f,YAAaA,EACb+J,YAAaA,GAAehtB,EAAK,QACjCimD,WAAYO,EACZnnB,UAAWA,EACXsnB,kBAAmBP,EACnBS,2BAA4BR,EAC5B57B,SAAU67B,SCjCpB,IAAe9nD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLmnD,eAAeC,EAAAA,EAAAA,IAAoBpnD,EAAQ,SAF3BD,EAxBkC,IAEhD,IAFiD,SACrDuN,EADqD,eAC3Cs3B,EAD2C,QAC3B7I,EAD2B,cAClBorB,EADkB,QACHiB,GAC9C,EACJ,MAAM9mD,GAAOC,EAAAA,EAAAA,KAIb,OAFAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,eAGhD,0BAAK1jC,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACqlD,GAAA,EAAD,CAAe1T,QAASwT,EAAerlD,KAAK,UAE5C,wBAAGE,UAAU,iCAAiCsC,IAAI,QAC/ChD,EAAK,+BAIV,0BAAKU,UAAU,gCACb,mBAACJ,EAAA,EAAD,CAAQM,QAASkmD,GAAU9mD,EAAK,uCCHlC+mD,GAAyBjmD,EAAAA,GAA0B,IAAM,IA8H/D,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,EAAD,KAAsB,IAAb,KAAEyC,GAAW,EAC7D,MAAO,CACL0kD,eAAeC,EAAAA,EAAAA,IAAoBpnD,EAAiB,UAATyC,EAAmB,KAAO,SAFrD1C,EA5H0C,IAaxD,IAbyD,cAC7DonD,EAD6D,KAE7DprC,EAAO,OAFsD,UAG7D4kB,EAH6D,MAI7D/Y,EAJ6D,YAK7DrD,EAL6D,cAM7D+jC,EAN6D,WAO7Df,EAP6D,SAQ7Dx7B,EAR6D,SAS7Dze,EAT6D,eAU7Ds3B,EAV6D,QAW7D7I,EAX6D,OAY7D6mB,GACI,EAEJ,MAAMjnC,GAAW5V,EAAAA,EAAAA,IAAyB,OAEnCkM,EAAOs2C,IAAYjlD,EAAAA,EAAAA,IAAiB,KACpCklD,EAAgBC,EAAoBC,IAAwB/hC,EAAAA,GAAAA,IAAQ,IAE3EpjB,EAAAA,EAAAA,KAAU,KACHqF,EAAAA,IACHxC,YAAW,KACTuV,EAASzV,QAASyqC,UACjB0X,MAEJ,IAEH,MA2BM/mD,GAAOC,EAAAA,EAAAA,KAIb,OAFAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBge,GAGhD,0BAAK5gD,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACqlD,GAAA,EAAD,CAAe1T,QAASwT,EAAerlD,KAAK,WAG9C,0BAAKE,UAAU,gCACb,2BAAMuiC,OAAO,GAAGxY,SA9BA3nB,IACpBA,EAAEsH,iBAEGiQ,EAASzV,SAId6lB,EAAS9Z,KAwBH,mBAACoS,GAAA,EAAD,CACE5c,IAAKkU,EACL1J,MAAOA,EACPwd,UAAW1T,EACXoX,MAAO5O,EACPqD,MAAOA,EACP5L,SA7CiB5X,IACrBwjB,GAAS2/B,GACXA,IAGFgB,EAASnkD,EAAE8G,OAAO+G,UA2CXA,EACC,mBAACrQ,EAAA,EAAD,CAAQma,KAAK,SAAS4kB,UAAWA,EAAWh5B,QAAM,GAAErG,EAAK,aAEzD,mBAACM,EAAA,EAAD,CACEynB,QAAM,EACNsX,UAAWA,EACXh5B,QAAM,EACNzF,QAASomD,EAAgBG,EArClB,KACjB18B,MAsCWzqB,EAAK,mBAIXgnD,GACC,mBAAC7jC,GAAA,EAAD,CACEziB,UAAU,SACVL,OAAQ6mD,EACR5/B,MAAOtnB,EAAK,wBACZiH,QAASmgD,IAERvtC,EAAAA,GAAAA,GAAW7Z,EAAK,4BAA6B,CAAC,KAAM,oBACrD,0BAAKU,UAAU,kBACb,mBAACJ,EAAA,EAAD,CACEG,MAAM,SACN4F,QAAM,EACN0hB,QAAM,EACNrnB,UAAU,wBACVE,QArDY,KACxBwmD,IACA38B,MAqDazqB,EAAK,kBAER,mBAACM,EAAA,EAAD,CACEG,MAAM,UACN4F,QAAM,EACN0hB,QAAM,EACNrnB,UAAU,wBACVE,QAASwmD,GAERpnD,EAAK,mBCxGtB,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLmnD,eAAeC,EAAAA,EAAAA,IAAoBpnD,EAAQ,SAF3BD,EA5B4C,IAE1D,IAF2D,SAC/DuN,EAD+D,QACrDyuB,EADqD,cAC5CorB,EAD4C,eAC7BviB,GAC9B,EACJ,MAAMtjC,GAAOC,EAAAA,EAAAA,KAQb,OAFAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,sBAGhD,0BAAK1jC,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACqlD,GAAA,EAAD,CAAe1T,QAASwT,EAAerlD,KAAK,UAE5C,wBAAGE,UAAU,iCAAiCsC,IAAI,QAC/ChD,EAAK,wCAIV,0BAAKU,UAAU,gCACb,mBAACJ,EAAA,EAAD,CAAQM,QAjBM,KAClB0iC,EAAec,EAAAA,GAAAA,WAgBoBpkC,EAAK,oDCZtC+mD,GAAyBjmD,EAAAA,GAA0B,IAAM,IAmE/D,IAAetC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLmnD,eAAeC,EAAAA,EAAAA,IAAoBpnD,EAAQ,MAC3C2oD,WAAY3oD,EAAO4oD,cAAcC,0BAHjB9oD,EAjEsC,IAWpD,IAXqD,cACzDonD,EADyD,WAEzDwB,EAFyD,UAGzDhoB,EAHyD,MAIzD/Y,EAJyD,WAKzD2/B,EALyD,SAMzDx7B,EANyD,SAOzDze,EAPyD,eAQzDs3B,EARyD,QASzD7I,EATyD,OAUzD6mB,GACI,EAEJ,MAAMjnC,GAAW5V,EAAAA,EAAAA,IAAyB,OAEnCkM,EAAOs2C,IAAYjlD,EAAAA,EAAAA,IAAiB,KAE3CC,EAAAA,EAAAA,KAAU,KACHqF,EAAAA,IACHxC,YAAW,KACTuV,EAASzV,QAASyqC,UACjB0X,MAEJ,IAEH,MAAM/mD,GAAOC,EAAAA,EAAAA,KAmBb,OAjBAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBge,GAkBhD,0BAAK5gD,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACqlD,GAAA,EAAD,CAAe1T,QAASwT,EAAerlD,KAAK,WAG9C,0BAAKE,UAAU,gCACb,mBAACqiB,GAAA,EAAD,CACEpS,MAAOA,EACPxK,IAAKkU,EACL8T,UAAU,UACV0D,MAAO7xB,EAAK,iBACZsmB,MAAOA,EACP5L,SA5BmB5X,IACrBwjB,GAAS2/B,GACXA,IAGF,MAAMuB,EAAW1kD,EAAE8G,OAAO+G,MAAMgxB,MAAM,EAAG0lB,GAErCG,EAASppD,SAAWipD,GACtB58B,EAAS+8B,GAGXP,EAASO,GACT1kD,EAAE8G,OAAO+G,MAAQ62C,KAkBZnoB,GAAa,mBAACnb,GAAA,EAAD,YCkVtB,IAAe1lB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAD,IAA8BA,EAAO4oD,iBADnB7oD,EAlZ6B,IAY3C,IAZ4C,cAChD0kC,EADgD,YAEhD4N,EAFgD,MAGhD/N,EAHgD,KAIhDH,EAJgD,UAKhDxD,EALgD,MAMhD/Y,EANgD,uBAOhDihC,EAPgD,SAQhD/a,EARgD,SAShDxgC,EATgD,eAUhDs3B,EAVgD,QAWhD7I,GACI,EACJ,MAAM,eACJgtB,EADI,cAEJC,EAFI,gBAGJC,EAHI,oBAIJC,EAJI,sBAKJC,EALI,cAMJC,IACEroD,EAAAA,EAAAA,OAEJwC,EAAAA,EAAAA,KAAU,KACJslD,IACEpkB,IAAkBiB,EAAAA,GAAAA,sBACpBd,EAAec,EAAAA,GAAAA,2BACNjB,IAAkBiB,EAAAA,GAAAA,oBAC3Bd,EAAec,EAAAA,GAAAA,2BAGlB,CAACjB,EAAeG,EAAgBikB,IAEnC,MAAMQ,GAAoBhoD,EAAAA,EAAAA,KAAY,KACpCysC,EAAS,CAAE/xB,KAAM,UACjB6oB,EAAec,EAAAA,GAAAA,oBACd,CAACoI,EAAUlJ,IAER0kB,GAAoBjoD,EAAAA,EAAAA,KAAa4Q,IACrC67B,EAAS,CAAE/xB,KAAM,cAAeyoB,QAASvyB,IACzC2yB,EAAec,EAAAA,GAAAA,2BACd,CAACoI,EAAUlJ,IAER2kB,GAA2BloD,EAAAA,EAAAA,KAAY,KAC3CujC,EAAec,EAAAA,GAAAA,wBACd,CAACd,IAEE4kB,GAAwBnoD,EAAAA,EAAAA,KAAa4Q,IACzC67B,EAAS,CAAE/xB,KAAM,UAAWyoB,QAASvyB,IACrC2yB,EAAec,EAAAA,GAAAA,yBACd,CAACoI,EAAUlJ,IAER6kB,GAAyBpoD,EAAAA,EAAAA,KAAa4Q,IAC1C67B,EAAS,CAAE/xB,KAAM,WAAYyoB,QAASvyB,IACtC82C,EAAe,IACVzkB,EACHF,MAAOnyB,EACPy3C,UAAW,KACT9kB,EAAec,EAAAA,GAAAA,2BAGlB,CAACoI,EAAUlJ,EAAgBN,EAAOykB,IAE/BY,GAA8BtoD,EAAAA,EAAAA,KAAa4Q,IAC/C67B,EAAS,CAAE/xB,KAAM,qBAAsByoB,QAASvyB,IAChD+2C,EAAc,CACZ/kB,gBAAiBhyB,EACjBy3C,UAAW,KACT9kB,EAAec,EAAAA,GAAAA,6BAGlB,CAACsjB,EAAelb,EAAUlJ,IAEvBglB,GAA0BvoD,EAAAA,EAAAA,KAAa4Q,IAC3C67B,EAAS,CAAE/xB,KAAM,cAAeyoB,QAASvyB,IACzC2yB,EAAec,EAAAA,GAAAA,8BACd,CAACoI,EAAUlJ,IAERilB,GAA8BxoD,EAAAA,EAAAA,KAAY,KAC9CujC,EAAec,EAAAA,GAAAA,2BACd,CAACd,IAEEklB,GAA2BzoD,EAAAA,EAAAA,KAAa4Q,IAC5C67B,EAAS,CAAE/xB,KAAM,UAAWyoB,QAASvyB,IACrC82C,EAAe,IACVzkB,EACHH,KAAMlyB,EACNy3C,UAAW,KACT9kB,EAAec,EAAAA,GAAAA,2BAGlB,CAACoI,EAAUlJ,EAAgBN,EAAOykB,IAE/BgB,GAAgB1oD,EAAAA,EAAAA,KAAa4Q,IACjCm3C,EAAc,CACZnlB,gBAAiBhyB,EACjBy3C,UAAW,KACT9kB,EAAec,EAAAA,GAAAA,cAGlB,CAAC0jB,EAAexkB,IAEbolB,GAAqC3oD,EAAAA,EAAAA,KAAa4Q,IACtD67B,EAAS,CAAE/xB,KAAM,qBAAsByoB,QAASvyB,IAChD+2C,EAAc,CACZ/kB,gBAAiBhyB,EACjBy3C,UAAW,KACT9kB,EAAec,EAAAA,GAAAA,yBAGlB,CAACsjB,EAAelb,EAAUlJ,IAEvBqlB,GAAsB5oD,EAAAA,EAAAA,KAAa4Q,IACvC67B,EAAS,CAAE/xB,KAAM,WAAYyoB,QAASvyB,IACtCi3C,EAAoB,IACf5kB,EACHF,MAAOnyB,EACPy3C,UAAW,KACT9kB,EAAec,EAAAA,GAAAA,2BAGlB,CAACoI,EAAUlJ,EAAgBN,EAAO4kB,IAE/BgB,GAAkB7oD,EAAAA,EAAAA,KAAamtB,IACnC26B,EAAsB,CAAE36B,KAAAA,MACvB,CAAC26B,IAEE7nD,GAAOC,EAAAA,EAAAA,KAEb,OAAQkjC,GACN,KAAKiB,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE0iB,QAASiB,EACTzkB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACRlgB,YAAajjB,EAAK,uBAClBgtB,YAAahtB,EAAK,YAClByqB,SAAUu9B,EACV1kB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACR6iB,iBAAkBhjB,EAAMJ,SACxB3f,YAAajjB,EAAK,yBAClBgtB,YAAahtB,EAAK,YAClByqB,SAAUw9B,EACV3kB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEjjC,KAAK,OACL8hB,YAAajjB,EAAK,2BAClByqB,SAAUy9B,EACV5G,OAAQne,EACRG,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEjjC,KAAK,QACLsZ,KAAK,QACL4kB,UAAWA,EACX/Y,MAAOA,EACP2/B,WAAY0B,EACZ1kC,YAAajjB,EAAK,sBAClBgnD,eAAa,EACbv8B,SAAU09B,EACV7G,OAAQne,EACRG,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,0BACH,OACE,mBAAC,GAAD,CACE/E,UAAWA,EACX/Y,MAAOA,EACP2/B,WAAY0B,EACZl9B,SAAUm+B,EACVtH,OAAQne,EACRG,eAAgBA,EAChBt3B,SAAUA,GAAY+kC,IAAgB3M,EAAAA,GAAAA,qBACtC3J,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUA,EACVyuB,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACR9D,UAAWA,EACX/Y,MAAOA,EACP2/B,WAAY0B,EACZ9kB,KAAMA,EACNpY,SAAU49B,EACV/kB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACRlgB,YAAajjB,EAAK,+BAClByqB,SAAU69B,EACVhlB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACR6iB,iBAAkBhjB,EAAMJ,SACxB3f,YAAajjB,EAAK,yBAClByqB,SAAU89B,EACVjlB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACE/E,UAAWA,EACX/Y,MAAOA,EACP2/B,WAAY0B,EACZxmD,KAAK,OACL8hB,YAAajjB,EAAK,2BAClByqB,SAAU+9B,EACVllB,eAAgBA,EAChBt3B,SAAUA,GAAY+kC,IAAgB3M,EAAAA,GAAAA,qBACtC3J,QAASA,EACT6mB,OAAQne,IAId,KAAKiB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE/E,UAAWA,EACX/Y,MAAOA,EACP2/B,WAAY0B,EACZ9kB,KAAMA,EACNpY,SAAUg+B,EACVnlB,eAAgBA,EAChBt3B,SAAUA,EACVyuB,QAASA,EACT6mB,OAAQne,IAId,KAAKiB,EAAAA,GAAAA,kCACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACR9D,UAAWA,EACX/Y,MAAOA,EACP2/B,WAAY0B,EACZ9kB,KAAMA,EACNpY,SAAUi+B,EACVplB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACRhiC,KAAK,QACLsZ,KAAK,QACLwI,YAAajjB,EAAK,sBAClByqB,SAAUk+B,EACVrlB,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpBo4B,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAlnC,SAAS6zC,GACXtW,QAASA,IAIf,KAAK2J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACR9D,UAAWA,EACX/Y,MAAOA,EACP2/B,WAAY0B,EACZl9B,SAAUm+B,EACVtlB,eAAgBA,EAChBt3B,SAAUA,GAAY+kC,IAAgB3M,EAAAA,GAAAA,qBACtC3J,QAASA,IAIf,QACE,Y,eCtTN,SAASouB,GAA0BnqD,EAAqB4iD,GACtD,MAAM,QAAE1C,GAAYlgD,EAAOmc,SAC3B,OAAQymC,GACN,KAAKld,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOwa,EAAQO,YACjB,KAAK/a,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAOwa,EAAQU,SACjB,KAAKlb,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAOwa,EAAQY,aACjB,KAAKpb,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAOwa,EAAQc,SACjB,KAAKtb,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOwa,EAAQgB,YAMrB,UAAephD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE4iD,GAAyB,EAClC,MAAO,CACLx/B,cAAepjB,EAAOojB,cACtBjH,SAAUguC,GAA0BnqD,EAAQ4iD,MAJ9B7iD,EA7GsD,IAQpE,IARqE,YACzEqqD,EADyE,OAEzExH,EAFyE,SAGzEt1C,EAHyE,eAIzEs3B,EAJyE,QAKzE7I,EALyE,cAMzE3Y,EANyE,SAOzEjH,GACI,EACJ,MAAM,mBAAEkuC,IAAuBtpD,EAAAA,EAAAA,MAEzBO,GAAOC,EAAAA,EAAAA,KAEP+oD,GAAqB7oD,EAAAA,EAAAA,KAAQ,IAC5B0a,EAIDiuC,EACK,IAAIjuC,EAAS2mC,gBAAiB3mC,EAAS4mC,cAEvC,IAAI5mC,EAAS6mC,gBAAiB7mC,EAAS8mC,cANvC,IAQR,CAACmH,EAAajuC,KACVsgB,EAAa8tB,IAAkBjnD,EAAAA,EAAAA,IAAiB,KAChDknD,EAAeC,IAAoBnnD,EAAAA,EAAAA,KAAkB,IACrDonD,EAAuBC,IAA4BrnD,EAAAA,EAAAA,IAAmBgnD,GAEvE/Y,GAAsBC,EAAAA,GAAAA,IAA8BC,EAAAA,IACpDC,GAA2BF,EAAAA,GAAAA,IAA8BG,EAAAA,IACzDC,GAAenwC,EAAAA,EAAAA,KAAQ,KAE3B,MAAMkkB,GAAYwB,EAAAA,EAAAA,MAAY1B,MAAMC,KAE9BqB,GAAUD,EAAAA,GAAAA,IAAO,IAAIyqB,GAAuB,MAAOG,GAA4B,KAClFnuB,QAAQ7W,IACP,MAAMwO,EAAOyK,EAAUjZ,GACvB,OAAOwO,KAAUX,EAAAA,EAAAA,IAASW,EAAK3c,KAAO2c,EAAK3c,KAAO6kB,IAAkBwnC,EAAAA,EAAAA,IAAY1vC,OAGpF,OAAO4L,EAAAA,GAAAA,IAAO,IACTwjC,MACAhjC,EAAAA,EAAAA,IAAkBhmB,EAAMylB,EAASpB,EAAW8W,OAEhD,CAAC8U,EAAqBG,EAA0B4Y,EAAoBhpD,EAAMm7B,EAAarZ,IAEpFynC,GAAiCxpD,EAAAA,EAAAA,KAAa4Q,IAClD04C,EAAyB14C,GACzBw4C,GAAiB,KAChB,IAEG7C,GAAevmD,EAAAA,EAAAA,KAAY,KAC/BgpD,EAAmB,CACjB9G,WAAYZ,GAAcC,GAC1BwH,YAAajhD,QAAQihD,GACrBU,YAAaJ,IAGf9lB,EAAec,EAAAA,GAAAA,WACd,CAAC0kB,EAAaM,EAAuB9lB,EAAgBge,EAAQyH,IAIhE,OAFAxnC,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBge,GAGhD,0BAAK5gD,UAAU,wBACb,mBAAC+oD,GAAA,EAAD,CACEC,QAASpZ,GAAgB,GACzBxB,YAAasa,EACbra,YAAa5T,EACbjZ,kBAAiCliB,EAAd8oD,EAAmB,6BAAqC,6BAC3Ea,cAAc,0BACd3a,oBAAqBua,EACrBnnC,eAAgB6mC,IAGlB,mBAAC1gB,GAAA,EAAD,CACEtuB,QAASivC,EACTtoD,QAAS0lD,EACTzlD,UAAyBb,EAAd8oD,EAAmB,uBAA+B,wBAE7D,wBAAGpoD,UAAU,2BCzDrB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,mBAAEkrD,EAAF,UAAsB9W,GAAcp0C,EAE1C,MAAO,CACLkrD,mBAAAA,EACAC,iBAAkB/W,MAAAA,OAAF,EAAEA,EAAWD,mBANfp0C,EAjCqC,IAMnD,IANoD,SACxDuN,EADwD,QAExDyuB,EAFwD,eAGxD6I,EAHwD,mBAIxDsmB,EAJwD,iBAKxDC,GACI,EACJ,MAAM,mBAAEC,IAAuBrqD,EAAAA,EAAAA,OAC/B8hB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAAS6I,EAAgBc,EAAAA,GAAAA,SAElD,MAAMrS,GAAU63B,MAAAA,OAAA,EAAAA,EAAoB3nC,QAAQiU,IAAOA,EAAE6zB,aAAYpmC,KAAKuS,IAC7D,CACLrE,MAAO,sCAAE,mBAAC4E,GAAA,EAAD,CAAqBN,SAAUD,EAAEC,WAAaD,EAAE5O,OACzD3W,MAAOulB,EAAEC,eAEP,GAEAuqB,GAAe3gD,EAAAA,EAAAA,KAAao2B,IAChC2zB,EAAmB,CAAE3zB,SAAAA,MACpB,CAAC2zB,IAEJ,OACE,0BAAKppD,UAAU,wEACb,mBAACoxB,GAAA,EAAD,CACEjQ,KAAK,0BACLkQ,QAASA,EACTC,SAAU63B,EACVnvC,SAAUgmC,SCpBZ9e,GAA0BnkC,OAAOw5B,KAAKmN,EAAAA,IAAiBhmC,OAAS,EAGhE4rD,GAAiB,CACrB5lB,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGI6lB,GAAkB,CACtB7lB,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,kCAGI8lB,GAAkB,CACtB9lB,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,uBAGI+lB,GAA+B,CACnC/lB,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGIgmB,GAAkC,CACtChmB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGIimB,GAAgC,CACpCjmB,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGIkmB,GAA6B,CACjClmB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGImmB,GAA8B,CAClCnmB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAsRF,IAAe5lC,EAAAA,EAAAA,KAzQgB,IAQzB,IAR0B,SAC9BwN,EAD8B,cAE9Bm3B,EAF8B,aAG9BqnB,EAH8B,gBAI9BC,EAJ8B,eAK9BnnB,EAL8B,QAM9B7I,EAN8B,qBAO9BiwB,GACI,EACJ,MAAOC,EAAYC,ItCpDZC,EAAAA,GAAAA,GAAW9nB,GAAcL,IsCsD1BsO,GAAcjxC,EAAAA,EAAAA,KAAY,KAE5BojC,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBt/B,YAAW,KACT2lD,EAAgB,CAAEhwC,KAAM,YA1FJ,KA+FtB0oB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB3J,IAR4B,WAAtB+vB,EAAavc,KACf3K,EAAec,EAAAA,GAAAA,qBAEfd,EAAec,EAAAA,GAAAA,qBAMlB,CACDomB,EAAavc,KAAMwc,EACnBtnB,EAAe1I,EAAS6I,IAGpBwnB,GAAmB/qD,EAAAA,EAAAA,KAAY,KACnC0qD,EAAgB,CAAEhwC,KAAM,gBACxBu2B,MACC,CAACyZ,EAAiBzZ,IAmMrB,SAAS+Z,EAAqBC,EAAyBC,EAAiBC,GACtE,OACE,sCACE,mBAAC,GAAD,CACE/nB,cAAeA,EACf1I,QAASuW,EACT3N,aAAcynB,EACdxnB,eAAgBA,EAChBF,eAAgBonB,EAAahd,WAzMrC,SAAqCwd,EAAyB1J,GAC5D,MAAM6J,EAA+C,CACnD,CAAC/mB,EAAAA,GAAAA,oBAAqC+lB,GAA6BjtD,SAASokD,GAC5E,CAACld,EAAAA,GAAAA,iBAAkCgmB,GAAgCltD,SAASokD,GAC5E,CAACld,EAAAA,GAAAA,qBAAsCimB,GAA8BntD,SAASokD,GAC9E,CAACld,EAAAA,GAAAA,mBAAoCkmB,GAA2BptD,SAASokD,GACzE,CAACld,EAAAA,GAAAA,mBAAoCmmB,GAA4BrtD,SAASokD,IAGtE8J,EAAgBpB,GAAe9sD,SAASokD,GACxC+J,EAAkBpB,GAAgB/sD,SAASokD,GAC3CgK,EAAkBpB,GAAgBhtD,SAASokD,IAC5C8J,GACA3tD,OAAOw5B,KAAKk0B,GAAqBjuD,SAASokD,EAAO7oC,aACjDhb,OAAO8tD,OAAOJ,GAAqB30B,MAAMrsB,IAAgB,IAARA,IAEtD,OAAQg5B,GACN,KAAKiB,EAAAA,GAAAA,KACH,OACE,mBAAC,GAAD,CAAcd,eAAgBA,EAAgBt3B,SAAUA,EAAUyuB,QAASuW,IAE/E,KAAK5M,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUA,GAAYg/C,EACtBvwB,QAASuW,IAGf,KAAK5M,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUg/C,GACP1J,IAAWld,EAAAA,GAAAA,4BACXkd,IAAWld,EAAAA,GAAAA,uBACXkd,IAAWld,EAAAA,GAAAA,eACXknB,GAAmBD,EACtB5wB,QAASuW,IAGf,KAAK5M,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBd,eAAgBA,EAAgBt3B,SAAUg/C,EAAgBvwB,QAASuW,IAE9F,KAAK5M,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBd,eAAgBA,EAAgBt3B,SAAUg/C,EAAgBvwB,QAASuW,IAE9F,KAAK5M,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CAAqBd,eAAgBA,EAAgBt3B,SAAUg/C,EAAgBvwB,QAASuW,IAE5F,KAAK5M,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUg/C,GAAkBM,GAAmBF,EAC/C3wB,QAASuW,IAGf,KAAK5M,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CAAkBd,eAAgBA,EAAgBt3B,SAAUg/C,EAAgBvwB,QAASuW,IAEzF,KAAK5M,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUg/C,GAAkB1J,IAAWld,EAAAA,GAAAA,2BACvC3J,QAASuW,IAGf,KAAK5M,EAAAA,GAAAA,2BACH,OACE,mBAAConB,GAAD,CACEloB,eAAgBA,EAChBt3B,SAAUg/C,EACVvwB,QAASuW,IAGf,KAAK5M,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUg/C,EACVvwB,QAASuW,IAGf,KAAK5M,EAAAA,GAAAA,oBACH,OACE,mBAAC,GAAD,CACEd,eAAgBA,EAChBt3B,SAAUg/C,EACVvwB,QAASuW,IAGf,KAAK5M,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACRG,eAAgBA,EAChBt3B,SAAUg/C,GAAkBG,EAAoBhoB,GAChD1I,QAASuW,IAIf,KAAK5M,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE0kB,aAAW,EACXxH,OAAQne,EACRG,eAAgBA,EAChBt3B,SAAUg/C,GAAkBG,EAAoBhoB,GAChD1I,QAASuW,IAIf,KAAK5M,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE,mBAAC,GAAD,CACEkd,OAAQne,EACRG,eAAgBA,EAChBt3B,SAAUg/C,EACVvwB,QAASuW,IAIf,KAAK5M,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACf4N,YAAauQ,EACbte,MAAOwnB,EACPhe,SAAUie,EACVz+C,SAAUg/C,EACV1nB,eAAgBA,EAChB7I,QAASuW,IAIf,KAAK5M,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACfH,MAAO2nB,EACPne,SAAUoe,EACV7Z,YAAauQ,EACbt1C,SAAUg/C,EACV1nB,eAAgBA,EAChB7I,QAASuW,IAIf,QACE,QAcCya,CAA4BT,EAAgBE,IAKnD,OACE,mBAAClxC,EAAA,EAAD,CACE/c,GAAG,WACH4kB,KAAM6oC,EAAuB,OAASgB,EAAAA,GACtC9pC,UAAWuhB,EACXV,YAAab,IAEZmpB,MC3UD5wB,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAO,GAkEnD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQqmB,QAASF,GAAenmB,EAAOomB,aAAe,IAC9CV,KAAMwB,EAAW+lC,aAAcC,GAAqBltD,EAAOonB,MAEnE,MAAO,CACLF,UAAAA,EACAgmC,iBAAAA,EACA/mC,WAAAA,EACAgnC,iBAAkBntD,EAAOmtD,oBATXptD,EAhE2B,IAQzC,IAR0C,SAC9CuN,EAD8C,OAE9CiW,EAF8C,UAG9C2D,EAH8C,iBAI9CgmC,EAJ8C,WAK9C/mC,EAL8C,iBAM9CgnC,EAN8C,QAO9CpxB,GACI,EACJ,MAAM,gBACJE,EADI,SAEJhG,IACEl1B,EAAAA,EAAAA,OAIJwC,EAAAA,EAAAA,KAAU,KACRk4B,IAAa,KACXQ,WAIJpZ,EAAAA,EAAAA,IAAevV,EAAUyuB,GAEzB,MAAM5F,GAAc90B,EAAAA,EAAAA,KAAa9C,IAC/B03B,EAAS,CAAE13B,GAAAA,EAAI+9B,sBAAsB,MACpC,CAACrG,IAEErQ,GAAUnkB,EAAAA,EAAAA,KAAQ,KACtB,IAAK0kB,EACH,OAGF,MAAMinC,GAAc7lC,EAAAA,EAAAA,IAAkBpB,EAAYe,EAAW3D,GAE7D,OAAO8pC,EAAAA,EAAAA,IAAYD,EAAalmC,EAAWgmC,OAAkBjrD,EAAWkrD,KACvE,CAAChnC,EAAY5C,EAAQ2D,EAAWgmC,EAAkBC,KAE9CtpC,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB9hB,EAAW2jB,EAASzc,QAAQoa,IAE7E,OACE,mBAACoB,GAAA,EAAD,CAAgBC,MAAOf,EAAagB,WAAYf,EAAS9hB,UAAU,2BAChE6hB,MAAAA,GAAAA,EAAankB,OACZmkB,EAAYoB,KAAK1mB,GACf,mBAAC4mB,GAAA,EAAD,CACE1Z,IAAKlN,EACLyD,UAAU,sBACVE,QAAS,IAAMi0B,EAAY53B,GAC3BoJ,QAASvF,EAAAA,IAET,mBAACgjB,GAAA,EAAD,CAAiBE,OAAQ/mB,EAAI0nC,eAAa,EAAC1K,WAAW,aAGxD1X,IAAgBA,EAAYnkB,OAC9B,wBAAGsC,UAAU,aAAayJ,IAAI,aAAanH,IAAI,QAC5Cif,EAAO7jB,OAAS,mCAAqC,0BAGxD,mBAAC8lB,GAAA,EAAD,CAAS/Z,IAAI,iBCxDfgwB,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAO,GA0GnD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQqmB,QAASyX,GAAoB99B,EAAOomB,aAAe,IACnDV,KAAMC,GAAc3lB,EAAOylB,OAGjCuZ,MAAOvC,EADH,eAEJsB,EAFI,cAGJC,EAHI,aAIJC,GACEj+B,EAAO87B,cACHzV,QAAS8X,GAAkBH,GAAiB,IAC5C3X,QAASgY,GAAiBJ,GAAgB,GAElD,MAAO,CACLtY,UAAAA,EACAmY,gBAAAA,EACArB,YAAAA,EACA6wB,YAAavvB,MAAAA,OAAF,EAAEA,EAAgBtY,MAC7B0Y,cAAAA,EACAE,aAAAA,KApBct+B,EAxG4B,IAa1C,IAb2C,UAC/CgpB,EAD+C,SAE/Czb,EAF+C,kBAG/CigD,EAH+C,0BAI/CC,EAJ+C,WAK/CC,EAL+C,QAM/C1xB,EAN+C,UAO/CpW,EAP+C,gBAQ/CmY,EAR+C,YAS/CrB,EAT+C,YAU/C6wB,EAV+C,aAW/CjvB,EAX+C,cAY/CF,GACI,EACJ,MAAM,gBACJlC,EADI,qBAEJyxB,IACE3sD,EAAAA,EAAAA,OAIJwC,EAAAA,EAAAA,KAAU,KACRk4B,IAAa,KACXQ,UAIJ,MAAM36B,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAUyuB,GAEzB,MAAM7X,GAAqB7iB,EAAAA,EAAAA,KAAa29B,IACtC0uB,EAAqB,CAAE1uB,MAAAA,MACtB,CAAC0uB,IAEE9b,GAAenwC,EAAAA,EAAAA,KAAQ,KAE3B,MAAMylB,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAC9B4Z,EAAkBxB,GAAkBvW,EAAAA,EAAAA,IAAkBuW,EAAiB5W,EAAWuV,GAAe,GAEvG,OAAOpV,EAAAA,EAAAA,KACLP,EAAAA,GAAAA,IAAO,IACFwY,KACCjB,GAAgB,MAChBF,GAAiB,KACpB5a,QAAQwiC,IACT,MAAM9qC,EAAOiM,EAAU6+B,GACvB,OAAK9qC,IAIGA,EAAK8hB,SAAW9hB,EAAK0yC,uBAAwBC,EAAAA,EAAAA,IAAU3yC,OAEjE0K,GACA,EACA4nC,KAED,CAACzvB,EAAiBnY,EAAW8W,EAAa4B,EAAcF,EAAeovB,IAEpEM,GAAiBxsD,EAAAA,EAAAA,KAAY,MAC7BksD,EAAkB7tD,QAAUqpB,KAC9B2kC,EAAqB,CAAE1uB,MAAO,KAC9ByuB,OAED,CAACF,EAAkB7tD,OAAQqpB,EAAW2kC,EAAsBD,IAE/D,OACE,0BAAKzrD,UAAU,kBACb,0BAAKA,UAAU,eACb,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAAS65B,EACT55B,UAAU,uBAEV,wBAAGH,UAAU,qBAEf,6BAAKV,EAAK,qBAEZ,0BAAKU,UAAU,wBACb,mBAAC+oD,GAAA,EAAD,CACEC,QAASpZ,EACTxB,YAAamd,EACbld,YAAa5T,EACbjZ,kBAAmBliB,EAAK,iBACxB2pD,cAAc,0BACdtqB,UAAW2sB,EACXhd,oBAAqBkd,EACrB9pC,eAAgBQ,IAGlB,mBAAC2lB,GAAA,EAAD,CACEtuB,QAASpS,QAAQokD,EAAkB7tD,QAAUqpB,GAC7C7mB,QAAS2rD,EACT1rD,UAAW4mB,EAAY,2BAA6B,0BAEpD,wBAAG/mB,UAAU,4BCyDvB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE8C,SAAUgrD,EACVlmC,MAAOmmC,GACL/tD,EAAOguD,cAAgB,GAE3B,MAAO,CACLF,iBAAAA,EACAC,cAAAA,KATchuD,EA9J6B,IAO3C,IAP4C,UAChDgpB,EADgD,SAEhDzb,EAFgD,UAGhDyoB,EAHgD,QAIhDgG,EAJgD,iBAKhD+xB,EALgD,cAMhDC,GACI,EACJ,MAAM,gBACJE,EADI,cAEJC,IACEntD,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAUyuB,GAEzB,MAAOnT,EAAOulC,IAAY7qD,EAAAA,EAAAA,IAAS,KAC5BulB,EAAOulC,IAAY9qD,EAAAA,EAAAA,IAAS,KAC5BqK,EAAO+6B,IAAYplC,EAAAA,EAAAA,OACnBskB,EAAO6gB,IAAYnlC,EAAAA,EAAAA,MAEpB+qD,EAAsB,4BACtBC,EAAyB,+BACzBC,EAAwB,mDAExB5tB,EAAYmtB,IAAqBU,EAAAA,GAAAA,WAEjCC,GAAoBptD,EAAAA,EAAAA,KAAa+C,IACrC,MAAM,MAAE6N,GAAU7N,EAAEgH,cACd09C,EAAW72C,EAAM2c,QAAQ,OAAQ,IAEvCu/B,EAASrF,GAELA,IAAa72C,IACf7N,EAAEgH,cAAc6G,MAAQ62C,KAEzB,IAEG71B,GAA0B5xB,EAAAA,EAAAA,KAAa+C,IAC3CgqD,EAAShqD,EAAEgH,cAAc6G,SACxB,IAEGy8C,GAAoBrtD,EAAAA,EAAAA,KAAY,KAC/BunB,EAAMlpB,OAKPq2B,EAAUr2B,OAnDgB,IAoD5B+oC,EAAS8lB,GAIXN,EAAgB,CACdrlC,MAAAA,EACAjb,MAAAA,EACAooB,UAAAA,IAZA0S,EAAS4lB,KAcV,CAACzlC,EAAOmN,EAAWk4B,EAAiBtgD,EAAO0gD,EAAqBE,IAE7DI,GAAsBttD,EAAAA,EAAAA,KAAY,KACjCunB,EAAMlpB,OAKXwuD,EAAc,CACZtlC,MAAAA,EACAC,MAAAA,EACAlb,MAAAA,EACAooB,UAAAA,IARA0S,EAAS6lB,KAUV,CAAC1lC,EAAOslC,EAAerlC,EAAOlb,EAAOooB,EAAWu4B,KAEnD/qD,EAAAA,EAAAA,KAAU,KACJuqD,IAAqBU,EAAAA,GAAAA,UACvBzyB,GAAQ,KAET,CAAC+xB,EAAkB/xB,IAEtB,MAAM6yB,EAAiBb,GAAiBzsD,EAAKysD,KAC3CnmC,IAAUymC,GAAuBzmC,IAAU0mC,EACvC1mC,OACA3lB,GAGN,OACE,0BAAKD,UAAU,WACb,0BAAKA,UAAU,eACb,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAAS,IAAM65B,IACf55B,UAAU,8BAEV,wBAAGH,UAAU,qBAEf,6BAAKV,EAAKynB,EAAY,aAAe,cAEvC,0BAAK/mB,UAAU,wBACb,mBAAC2nC,GAAA,EAAD,CACE3tB,SAAU0sB,EACV9f,MAAOtnB,EAAK,cAEd,mBAAC+iB,GAAA,EAAD,CACEpS,MAAO2W,EACP5M,SAAUyyC,EACVt7B,MAAO7xB,EAAKynB,EAAY,mBAAqB,aAC7CnB,MAAOA,IAAUymC,GAAuBzmC,IAAU0mC,EAAyB1mC,OAAQ3lB,IAEpF8mB,GACC,sCACE,mBAAC1E,GAAA,EAAD,CACEpS,MAAO4W,EACP7M,SAAUiX,EACVE,MAAO7xB,EAAK,oCAEd,wBAAGU,UAAU,QAAQV,EAAK,qBAI7BstD,GACC,wBAAG5sD,UAAU,SAAS4sD,GAGvB74B,EAAUr2B,OAAS,GAClB,sCACE,yBAAIsC,UAAU,wBAAwBV,EAAK,6BAA8By0B,EAAUr2B,OAAQ,MAE3F,0BAAKsC,UAAU,mCACZ+zB,EAAU9Q,KAAK1mB,GACd,mBAAC4mB,GAAA,EAAD,CAAU6qB,UAAQ,EAAChuC,UAAU,uBAC3B,mBAACojB,GAAA,EAAD,CAAiBE,OAAQ/mB,UAQrC,mBAACsrC,GAAA,EAAD,CACEtuB,QAA0B,IAAjBqN,EAAMlpB,OACfwC,QAAS6mB,EAAY4lC,EAAsBD,EAC3C7yC,SAAU8kB,EACVx+B,UAAW4mB,EAAYznB,EAAK,8BAAgC,gBAE3Dq/B,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,2BClKjB6sD,GAAe9vD,OAAOw5B,KAAKu2B,EAAAA,IAAmBpvD,OAAS,EAsD7D,IAAeI,EAAAA,EAAAA,KApDe,IAMxB,IANyB,SAC7BwN,EAD6B,UAE7Byb,GAAY,EAFiB,QAG7B5V,EAH6B,gBAI7B47C,EAJ6B,QAK7BhzB,GACI,EACJ,MAAOizB,EAAkBC,IAAuB3rD,EAAAA,EAAAA,IAAmB,IAE7DuqD,GAAiBxsD,EAAAA,EAAAA,KAAY,KACjC0tD,EAAgBhmC,EAAY+lC,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,iBAC/D,CAAC/lC,EAAWgmC,IAEf,OACE,mBAACzzC,EAAA,EAAD,CACE/c,GAAG,UACH4kB,KAAM6pC,EAAAA,GACNjpB,YAAa8qB,GACb3rC,UAAW/P,IAET+7C,IACA,OAAQ/7C,GACN,KAAK27C,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE/lC,UAAWA,EACXzb,SAAUA,EACVigD,kBAAmByB,EACnBxB,0BAA2ByB,EAC3BxB,WAAYI,EACZ9xB,QAASA,IAGf,KAAK+yB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE/lC,UAAWA,EACXzb,SAAU4hD,GAAgB5hD,EAC1ByoB,UAAWi5B,EACXjzB,QAASA,IAGf,QACE,c,eCpDZ,MAwBA,IAAej8B,EAAAA,EAAAA,KAxBqB,IAA4C,IAA3C,SAAEwN,EAAF,QAAYyuB,EAAZ,gBAAqBgzB,GAAsB,EAC9E,MAAMztD,GAAOC,EAAAA,EAAAA,KAIb,OAFAshB,EAAAA,EAAAA,IAAevV,EAAUyuB,EAASgzB,EAAiBD,EAAAA,GAAAA,UAGjD,0BAAK9sD,UAAU,iBACb,0BAAKA,UAAU,eACb,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAAS65B,EACT55B,UAAU,uBAEV,wBAAGH,UAAU,qBAEf,6BAAKV,EAAK,mBAEZ,mBAAC6tD,GAAA,EAAD,CAAUC,WAAW,WAAW9hD,SAAUA,Q,eCXhD,MAuEA,IAAexN,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ0lB,KAAMqmB,EAAalR,WAAYw0B,GAAqBrvD,EAAO46B,YAEnE,MAAO,CACLmR,YAAAA,EACAsjB,iBAAAA,KANctvD,EAvE+B,IAO7C,IAP8C,OAClD4B,EADkD,OAElD+K,EAFkD,YAGlDq/B,EAHkD,iBAIlDsjB,EAJkD,QAKlD9mD,EALkD,oBAMlDqb,GACI,EACJ,MAAM,gBAAE0rC,IAAoBvuD,EAAAA,EAAAA,MAEtBO,GAAOC,EAAAA,EAAAA,KAEPguD,GAA2B9tD,EAAAA,EAAAA,KAAQ,IAClCsqC,EAIEhtC,OAAOw5B,KAAKwT,GAAa8X,QAAO,CAACC,EAAQhV,KAC9C,MAAM,gBAAEN,EAAF,cAAmBghB,GAAkBzjB,EAAY9vB,OAAO6yB,IAK9D,OAJIN,EAAgBhwC,SAASkO,IAAW8iD,MAAAA,GAAAA,EAAehxD,SAASkO,KAC9Do3C,EAAO51B,KAAK4gB,GAGPgV,IACN,IAVM,IAWR,CAACp3C,EAAQq/B,KAEL0jB,EAAmBC,IAAwBpsD,EAAAA,EAAAA,IAAmBisD,GAE/DI,GAAUluD,EAAAA,EAAAA,KAAQ,KACf4tD,MAAAA,OAAA,EAAAA,EAAkBpqC,KAAK6pB,IAAD,CAC3B3b,MAAO4Y,EAAcA,EAAY+C,GAAUlmB,MAAQ,GACnD3W,MAAOmZ,OAAO0jB,SACT,IACN,CAACugB,EAAkBtjB,IAEhB6b,GAAevmD,EAAAA,EAAAA,KAAY,KAC/B,MAAMuuD,EAAcL,EAAyBhsC,QAAQhlB,IAAQkxD,EAAkBjxD,SAASD,KAAK0mB,IAAIhJ,QAC3F4zC,EAAWJ,EAAkBlsC,QAAQhlB,IAAQgxD,EAAyB/wD,SAASD,KAAK0mB,IAAIhJ,QAE9FqzC,EAAgB,CAAE5iD,OAAAA,EAAQkjD,YAAAA,EAAaC,SAAAA,IACvCtnD,MACC,CAACmE,EAAQ4iD,EAAiBC,EAA0BhnD,EAASknD,IAEhE,GAAK1jB,GAAgBsjB,EAIrB,OACE,mBAAC5qC,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASA,EACTqb,oBAAqBA,EACrBwN,QAASw2B,EACT5lD,UAAU,SACV4mB,MAAOtnB,EAAK,gBAEZ,mBAACwuD,GAAA,EAAD,CACEz8B,QAASs8B,EACTr8B,SAAUm8B,EACVzzC,SAAU0zC,EACV7tD,OAAK,IAEP,mBAACD,EAAA,EAAD,CAAQG,MAAM,UAAUC,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAAS0lD,GACvEtmD,EAAK,gBAER,mBAACM,EAAA,EAAD,CAAQI,UAAU,wBAAwBqnB,QAAM,EAACnnB,QAASqG,GAAUjH,EAAK,gB,mCCG/E,SAASyuD,GAAaC,GACpB,OAAIA,EACK,4BAEF,wBClGT,IAAIC,GACA77C,GAEJ,MAAM87C,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,KAAK,GAkBMC,GAAa5sD,GAChB,mBAAoBA,EAAIA,EAAE6sD,eAAe,GAAGC,QAAU,EAG1DxlD,GAAkBtH,IACtB,MAAMgW,EAAS,WAAYhW,EAAIA,EAAEgW,OAAS42C,GAAU5sD,GAEpD,IACG6rD,KAEGA,GAAatvC,SAASvc,EAAE8G,SAExB+kD,GAAavxD,WAAa,GAAK0b,GAAU,GAEzC61C,GAAavxD,WAAcuxD,GAAakB,aAAelB,GAAatxD,cAAiByb,GAAU,EACnG,CACA,GAAIhG,IAA4BhQ,EAAE8G,OAAuB5M,QAAQ8V,IAA0B,OAC3FhQ,EAAEsH,mBAIN,SAAS0lD,GAA4BhtD,GAC/B8rD,GAAa9rD,EAAEqH,OArCrB,SAAmBP,GACjB,KAAKA,GAAYA,aAAkBmmD,aAAc,OAAO,EACxD,MAAMxyD,EAAUqM,EACVomD,EAAUzyD,EAAQyyD,QAAQjP,cAChC,GAAgB,aAAZiP,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAMv1C,EAAOld,EAAQ0yD,aAAa,QAClC,QAAKx1C,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjDuB,QAAQvB,EAAKsmC,gBAAkB,EAyBrBmP,CAAUptD,EAAE8G,SACtC9G,EAAEsH,iBAIC,SAAS+lD,GAAiBxwC,EAAyBywC,GACxDzB,GAAehvC,EACf7M,GAA0Bs9C,EAE1B30D,SAASiH,iBAAiB,QAAS0H,GAAgB,CAAEimD,SAAS,IAC9D50D,SAASiH,iBAAiB,YAAa0H,GAAgB,CAAEimD,SAAS,IAClE50D,SAAS60D,UAAYR,GAGhB,SAASS,KACd5B,QAAehuD,EACfmS,QAA0BnS,EAC1BlF,SAASkH,oBAAoB,QAASyH,IACtC3O,SAASkH,oBAAoB,YAAayH,IAE1C3O,SAAS60D,UAAY,K,0BC7DvB,MAAME,GAAgBC,EAAAA,GAAkB,GAAK,GASvCC,IAAKC,EAAAA,EAAAA,GAAuB,4BAwDlC,IAAenyD,EAAAA,EAAAA,KAtDgC,IAAyD,UAAxD,SAAE23B,EAAF,aAAYy6B,EAAZ,eAA0BC,EAA1B,QAA0CC,GAAc,EAEtG,MAAMhhD,GAAerL,EAAAA,EAAAA,IAAuB,MAEtC1F,GAAY0O,EAAAA,EAAAA,GAAU,WAAD,UAAW0oB,EAAS46B,uBAApB,aAAW,EAA0B9zD,MAAO6zD,EAASpjD,EAAAA,GAAAA,SAEzEsjD,EAAaC,EAAUC,IAAc7rC,EAAAA,GAAAA,MACrC6lB,EAAmBimB,IAAuB9rC,EAAAA,GAAAA,KAE3C+rC,EAAuBvpD,QAAQipD,GAAW/xD,IACxCkK,qBAAsBooD,IAAuBloD,EAAAA,EAAAA,GAAkBioD,IAC/DroD,aAAcuoD,EAAoBroD,qBAAsBsoD,IAAqBpoD,EAAAA,EAAAA,IAClF2nD,IAAY5lB,OAAmBvqC,GAAW,GAU7C,OACE,0BACED,UAAWgwD,GAAG,IAAKD,EAAAA,IAAmB,WACtC7vD,QAVJ,WACE,IAAKkP,EAAalL,QAAS,OAC3B,MAAM,EAAEqL,EAAF,EAAKC,GAAMJ,EAAalL,QAAQS,wBAEtCwrD,EAAe16B,EAASA,SAAUlmB,EAAGC,IAOnC/J,IAAK2J,EACL0hD,aAAcV,EAAUG,OAAWtwD,GAElC2wD,GACC,0BACE5wD,UAAWgwD,GACT,SACAI,EAAU,CAACS,QAAoB5wD,GAEjChD,MAAQ,0BAAyBizD,GAAgBJ,UAGpDY,GACC,mBAACh5B,GAAA,EAAD,CACEn7B,GAAK,UAASk5B,EAASA,WACvBz1B,UAAWgwD,GAAG,WAAY,CAACW,IAC3Bh5B,cAAet5B,EACfu5B,KAAM04B,EACNv4B,QAAM,EACNj4B,KAAMgwD,GACN93B,OAAQy4B,EACRrmD,QAASomD,QClDbR,IAAKC,EAAAA,EAAAA,GAAuB,oBAsDlC,IAAenyD,EAAAA,EAAAA,KApDwB,IAMjC,IANkC,mBACtCorD,EADsC,iBAEtC6H,EAFsC,eAGtCZ,EAHsC,UAItCnL,EAJsC,QAKtCoL,GACI,EAEJ,MAAMY,GAAiBjtD,EAAAA,EAAAA,IAAuB,OACvCktD,EAA2BC,IAA0BvsC,EAAAA,GAAAA,IAAQ,IACpE0V,EAAAA,GAAAA,GAAoB22B,EAAe9sD,SAAU+sD,IAE7C7pD,EAAAA,EAAAA,KAAgB,KACd8pD,MACC,CAACA,IAEJ,MAAMC,EAAe/uD,IACd4uD,IACU,WAAY5uD,EAAIA,EAAEgW,OAAS42C,GAAU5sD,KAGlDA,EAAEsH,kBAIN,IAAMs7C,GAAc+L,MAAAA,GAAAA,EAAkBrzD,SAAYwrD,EAElD,OACE,0BAAKlpD,UAAWgwD,GAAG,IAAKD,EAAAA,IAAmB,WAAYqB,eAAgBD,EAAaE,YAAaF,GAC/F,0BAAKnxD,UAAWgwD,GAAG,gBACnB,0BAAKhwD,UAAWgwD,GAAG,kBACnB,0BAAKhwD,UAAWgwD,GAAG,kBACjB,0BAAKhwD,UAAWgwD,GAAG,QAAS,CAAC,iBAAkBvqD,IAAKurD,GACjD9H,MAAAA,OADH,EACGA,EAAoBjmC,KAAI,CAACwS,EAAUvS,KAClC,IAAIuS,EAAS4zB,aACNrE,GAAe+L,GAAqBA,EAAiBv0D,SAASi5B,EAASA,WAC9E,OACE,mBAAC,GAAD,CACEhsB,IAAKgsB,EAASA,SACdy6B,aAAchtC,EACdktC,QAASA,EACTD,eAAgBA,EAChB16B,SAAUA,aCyN1B,IAAe33B,EAAAA,EAAAA,KAhN0B,IAgDnC,kBAhDoC,mBACxCorD,EADwC,OAExCvpD,EAFwC,QAGxCxC,EAHwC,UAIxC6nD,EAJwC,iBAKxC+L,EALwC,OAMxCO,EANwC,WAOxCC,EAPwC,cAQxCC,EARwC,SASxCC,EATwC,QAUxCC,EAVwC,OAWxCC,EAXwC,SAYxCC,EAZwC,UAaxCpgC,EAbwC,UAcxCC,EAdwC,WAexCogC,EAfwC,eAgBxCC,EAhBwC,iBAiBxCC,EAjBwC,QAkBxCC,EAlBwC,YAmBxCC,EAnBwC,UAoBxCC,EApBwC,YAqBxCvgC,EArBwC,cAsBxC1zB,EAtBwC,cAuBxCk0D,EAvBwC,sBAwBxCC,EAxBwC,kBAyBxCC,EAzBwC,oBA0BxCC,EA1BwC,kBA2BxCC,EA3BwC,QA4BxCC,EA5BwC,OA6BxCC,EA7BwC,MA8BxCC,EA9BwC,QA+BxCviC,EA/BwC,UAgCxCxxB,EAhCwC,SAiCxC20B,EAjCwC,SAkCxCq/B,EAlCwC,cAmCxCC,EAnCwC,gBAoCxCC,EApCwC,SAqCxC56B,EArCwC,OAsCxC66B,EAtCwC,aAuCxCC,EAvCwC,QAwCxCxsD,EAxCwC,oBAyCxCqb,EAzCwC,WA0CxCoxC,GA1CwC,WA2CxCC,GA3CwC,aA4CxCC,GA5CwC,eA6CxCC,GA7CwC,eA8CxChD,GA9CwC,eA+CxCiD,IACI,EAEJ,MAAMC,IAAUtvD,EAAAA,EAAAA,IAAuB,MAEjCuvD,IAAgBvvD,EAAAA,EAAAA,IAAuB,MACvCwvD,GJ7GD,SACLp2D,EACAq2D,EACAR,EACAI,GAEA,MAAM/hC,EAAwB,GACxBpwB,GAAOwyD,EAAAA,EAAAA,IAAet2D,GACtBwO,GAAQC,EAAAA,EAAAA,IAAgBzO,MACvB8O,EAAAA,EAAAA,IAAuB9O,QAA6C8C,GAAlC8L,EAAAA,EAAAA,IAAuB5O,IAC1D2zC,GAAY3xC,EAAAA,EAAAA,IAAoBhC,EAAS,UACzCu2D,EAAmB/nD,IAAUmlC,IAAa6iB,EAAAA,EAAAA,IAAuBx2D,KAAay2D,GAAAA,GAC9EC,EAAY9xD,OAAO+xD,eAiBzB,GAfIJ,GACFriC,EAAQnF,KAAK,CACXiF,MAAO,yBACP1wB,KAAM,aACN8iD,QAAS,KACPwQ,QAAQC,QAAQljB,EAAYmjB,GAAAA,GAAkBnjB,EAAW9jC,EAAAA,GAAAA,SAA0BrB,EAAO2B,SACvFgqB,KAAK48B,GAAAA,IAEJV,GACFA,OAMJvyD,EAAM,OAER,MAAM+sD,EAAe7mD,SACnB0sD,MAAAA,GAAA,UAAAA,EAAWM,kBAAX,eAAuBC,aACnBP,EAAUM,WAAWC,WAA2B93D,QAAQ,4BACD,KAAxDu3D,EAAU97C,WAAW6U,QAAQ,kBAAmB,KAGrDyE,EAAQnF,KAAK,CACXiF,MAAO48B,GAAaC,GACpBvtD,KAAM,OACN8iD,QAAS,KACP,MAAMpoC,GAAak5C,EAAAA,GAAAA,KACnB,GAAIl5C,MAAAA,GAAAA,EAAYzd,QAAU01D,EACxBA,EAAej4C,OACV,CACL,MAAMm5C,EAAgBtG,GAAgB6F,EAAYA,EAAU97C,YAAaw8C,EAAAA,EAAAA,IAA2Bp3D,IACpGq3D,EAAAA,GAAAA,IAAoBF,GAGlBd,GACFA,OAoBR,OAdIR,GACF3hC,EAAQnF,KAAK,CACXiF,MAAO,gCACP1wB,KAAM,OACN8iD,QAAS,KACPyP,IAEIQ,GACFA,OAMDniC,EIuCaojC,CAAsBt3D,EAASoJ,EAAS0rD,EAAce,QAAa/yD,EAAWmzD,IAC5FsB,KAAe1P,GAAc+L,MAAAA,GAAAA,EAAkBrzD,QAC/Ci3D,GAAgBrC,IAAwBoC,IAEvCtE,GAASwE,GAAaC,KAAiBlwC,EAAAA,GAAAA,KAExCmwC,IAAoBz1D,EAAAA,EAAAA,KAAY,IAC7BtE,SAASe,cAAe,kEAAiEqB,EAAQZ,SACvG,CAACY,EAAQZ,KAENw4D,IAAiB11D,EAAAA,EAAAA,KACrB,IAAMtE,SAASe,cAAc,8CAC7B,IAGIk5D,IAAiB31D,EAAAA,EAAAA,KACrB,IAAMtE,SAASe,cAAc,gCAC7B,IAGIm5D,IAAY51D,EAAAA,EAAAA,KAAY,KAAM,MAClC,MAAM61D,EAA0B90D,EAAAA,KAAuB,UACjDrF,SAASe,cAA2B,+BADa,aAClD,EAA+Da,eAAiB,EAC/Ew4D,EAAgBp6D,SAASe,cAA2B,gCACpDs5D,GAAuBh1D,EAAAA,KAA4B80D,IAClD90D,EAAAA,KAA2B+0D,MAAAA,OAA5B,EAA4BA,EAAel6D,UAAU0jB,SAAS,kBAC/Dw2C,MAAAA,OAFsB,EAEtBA,EAAex4D,eAAiB,EAErC,MAAO,CACL04D,cAtFkB,GAuFlBC,gBAAkBv6D,SAASe,cAA2B,iBAAmBa,aACzE44D,YAAaZ,GAvFiB,QAuF6B10D,EAC3Du1D,eAAgBJ,EAAoBF,KAErC,CAACP,KAEEc,IAAuBp2D,EAAAA,EAAAA,KAAY,KACvC8wD,QAAelwD,EAAW,EAAG,KAC5B,CAACkwD,MAEJ5uD,EAAAA,EAAAA,KAAU,KACH5B,EAKLyE,YAAW,KACTwwD,OAtGqB,KAiGrBC,OAOD,CAACl1D,EAAQi1D,GAAaC,KAEzB,MAAM,UACJt0D,GADI,UACOm1D,GADP,iBACkBC,GADlB,iBACoCC,GADpC,MACsD34D,GADtD,UAC6D44D,GAD7D,WACwEC,KAC1EC,EAAAA,GAAAA,GAAuBzE,EAAQwD,GAAmBC,GAAgBC,GAAgBC,KAEtF1zD,EAAAA,EAAAA,KAAU,KACRkuD,GAAiBqG,GAAaxC,GAAcpvD,aAAUjE,EAAW,qBAE1D4vD,KACN,CAACiG,KAEJ,MAAMx2D,IAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACy2D,GAAA,EAAD,CACEvwD,IAAK4tD,GACL1zD,OAAQA,EACRg2D,iBAAkBA,GAClBC,iBAAkBA,GAClBr1D,UAAWA,GACXm1D,UAAWA,GACXz4D,MAAOA,GACPg5D,YAAaJ,GACb71D,WAAWmC,EAAAA,EAAAA,GACT,qBAAsB,QAASwyD,IAAiB,kBAElDpuD,QAASA,EACTqb,oBAAqBA,GAEpB0wC,GACC,mBAAC,GAAD,CACEvB,iBAAkBA,EAClBZ,eAAgBA,GAChBnL,UAAWA,EACXkE,mBAAoBA,EACpBkH,QAASA,KAIb,0BACEpwD,UAAU,mCACV/C,MAAO44D,GACPpwD,IAAK6tD,IAEJjB,GAAqB,mBAAC7xD,EAAA,EAAD,CAAUC,KAAK,YAAYP,QAASu1D,IAApC,mBACrBlE,GAAc,mBAAC/wD,EAAA,EAAD,CAAUC,KAAK,eAAeP,QAAS4yD,GAASxzD,GAAK,wBACnEkyD,GACC,mBAAChxD,EAAA,EAAD,CAAUC,KAAK,WAAWP,QAAS6yD,GAAezzD,GAAK,4BAExDmyD,GAAY,mBAACjxD,EAAA,EAAD,CAAUC,KAAK,QAAQP,QAASsyD,GAAUlzD,GAAK,UAC3DoyD,GAAW,mBAAClxD,EAAA,EAAD,CAAUC,KAAK,OAAOP,QAASuyD,GAASnzD,GAAK,SACxDwyD,GACC,mBAACtxD,EAAA,EAAD,CAAUC,KAAK,WAAWP,QAAS0yD,GAAgBtzD,GAAK,mBAEzDyyD,GACC,mBAACvxD,EAAA,EAAD,CAAUC,KAAK,WAAWP,QAAS2yD,GAAkBvzD,GAAK,iCAE3D0yD,GAAWuB,GAAYtwC,KAAKizC,GAC3B,mBAAC11D,EAAA,EAAD,CAAUiJ,IAAKysD,EAAO/kC,MAAO1wB,KAAMy1D,EAAOz1D,KAAMP,QAASg2D,EAAO3S,SAAUjkD,GAAK42D,EAAO/kC,UAEvFwgC,GAAU,mBAACnxD,EAAA,EAAD,CAAUC,KAAK,MAAMP,QAASwyD,GAAQpzD,GAAK,cACrDsyD,GAAY,mBAACpxD,EAAA,EAAD,CAAUC,KAAK,QAAQP,QAASiwB,GAAU7wB,GAAK,gBAC3DqyB,GACC,mBAACnxB,EAAA,EAAD,CAAUC,KAAK,WAAWP,QAAS+yD,IAChB3zD,GAAhBrB,EAAqB,8BAAsC,uBAG/D4zD,GAAc,mBAACrxD,EAAA,EAAD,CAAUC,KAAK,UAAUP,QAASvB,GAAYW,GAAK,YACjE4yD,GAAa,mBAAC1xD,EAAA,EAAD,CAAUC,KAAK,SAASP,QAAS+3B,GAAW34B,GAAK,kBAC9DmyB,GAAa,mBAACjxB,EAAA,EAAD,CAAUC,KAAK,OAAOP,QAASyyD,GAAWrzD,GAAK,4BAC3D6yD,GAAiBC,IACjB,mBAAC5xD,EAAA,EAAD,CACER,UAAU,8BACVS,KAAM2xD,EAAwB,YAAc,QAC5ClyD,QAASkyD,EAAwBe,GAAiBD,GAClDr5C,WAAWu4C,GAAyB,UAACj1D,EAAQ62B,qBAAT,OAAC,EAAuBt2B,SAE3D00D,GAAqB,UAAIj1D,EAAQq3B,gBAAZ,OAAI,EAAkBS,MAC1Ck9B,GAAa,UAAIh1D,EAAQ62B,qBAAZ,OAAI,EAAuBt2B,OACpC4B,GAAK,yCAA0C,CAACnC,EAAQq3B,SAASS,MAAO93B,EAAQ62B,cAAct2B,SAC9F4B,GAAK,4BAA6BnC,EAAQq3B,SAASS,MAAO,KAE5B,KAAlC,UAAA93B,EAAQ62B,qBAAR,eAAuBt2B,SAAgB60D,GACnCt8B,EAAAA,EAAAA,IAAgBs8B,EAAkB,IACjC,UAAAp1D,EAAQ62B,qBAAR,SAAuBt2B,OACtB4B,GAAK,+BAAgCnC,EAAQ62B,cAAct2B,OAAQ,KACnE4B,GAAK,mCAGb,0BAAKU,UAAU,WACZuyD,MAAAA,OADH,EACGA,EAAmBtvC,KAAKhK,GACvB,mBAACD,GAAA,EAAD,CACElZ,KAAK,QACLmZ,KAAMA,QAMfuY,GAAa,mBAAChxB,EAAA,EAAD,CAAUqzB,aAAW,EAACpzB,KAAK,SAASP,QAASozB,GAAWh0B,GAAK,gBCtP7E62D,GAAa,EAAIv0D,EAAAA,GA4XvB,IAAe9D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAsD,cAA7C,QAAEb,EAAF,gBAAWo0B,GAAkC,EACpD,MAAM,SAAE5mB,IAAawjB,EAAAA,EAAAA,IAAyBnwB,IAAW,GACnDwgC,GAAkB43B,EAAAA,EAAAA,IAAwBp4D,EAAQb,EAAQuN,QAC1DwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQb,EAAQuN,SAClC,gBAAE2rD,EAAF,qBAAmBC,GAAyBt4D,EAAOo0C,WAAa,IAChE,UACJmkB,EADI,SAEJ9E,EAFI,OAGJE,EAHI,SAIJC,EAJI,UAKJpgC,EALI,UAMJC,EANI,QAOJigC,EAPI,WAQJG,EARI,eASJC,EATI,iBAUJC,EAVI,QAWJC,EAXI,YAYJC,EAZI,UAaJC,EAbI,YAcJvgC,GACGhnB,IAAY0jB,EAAAA,EAAAA,IAA4BrwB,EAAQb,EAASwN,IAAc,GACtE0tB,EAA+B,WAApB9G,EACXilC,EAAkC,cAApBjlC,EACdxK,EAAY7N,IAAQsW,EAAAA,EAAAA,IAActW,GAClCu9C,GAAUC,EAAAA,EAAAA,IAAev5D,GACzBg1D,EAAgBhrD,QAAQ+R,GACzBo9C,GACAD,IACAzN,EAAAA,EAAAA,IAAY1vC,KACZy9C,EAAAA,EAAAA,IAAax5D,KACZq5D,GACDt9C,EAAK6oC,cACL7oC,EAAK6oC,aAAeuU,GACpBn5D,EAAQkc,KAAOhI,KAAKC,MAAQ,IAAO+kD,GAClCrR,EAAY9rC,IAAQX,EAAAA,EAAAA,IAASW,EAAK3c,IAClCq6D,GAAWC,EAAAA,EAAAA,IAAgB15D,GAC3Bi1D,GAAyBqE,IAAY1vC,IAAcyvC,IAAgBI,IAAa5R,GAAa7nD,EAAQo3B,aACrGuiC,EAAAA,EAAAA,IAAkB35D,EAAQo3B,YAAcp3B,EAAQo3B,UAAUwiC,WAC1D1E,EAAoBrN,IAAS,UAAI7nD,EAAQo3B,iBAAZ,iBAAI,EAAmBW,eAAvB,aAAI,EAA4B8hC,MAAMxhC,GAAMA,EAAEyhC,YAC3E94D,GAAcC,EAAAA,EAAAA,IAAyBJ,EAAQb,GAErD,MAAO,CACL+rD,mBAAoBlrD,EAAOkrD,mBAC3BqN,UAAAA,EACAhF,WAAYiF,EACZhF,cAAegF,EACf/E,UAAWp5B,IAAam+B,GAAe/E,EACvCE,QAAS6E,GAAe7E,EACxBC,UAAW4E,GAAe5E,EAC1BpgC,UAAAA,EACAC,UAAAA,EACAigC,SAAUr5B,GAAYq5B,EACtBG,YAAa1zD,IAAgBq4D,GAAe3E,EAC5CC,gBAAiB0E,GAAe1E,EAChCC,kBAAmByE,GAAezE,EAClCC,SAAU7zD,GAAe6zD,EACzBC,aAAc9zD,IAAgBq4D,GAAevE,EAC7CC,UAAAA,EACAvgC,aAAcxzB,GAAewzB,EAC7B6M,gBAAAA,EACA2zB,cAAAA,EACApB,iBAAkB73C,MAAAA,GAAF,UAAEA,EAAM6sB,gBAAR,aAAE,EAAgBgrB,iBAClC/L,UAAAA,EACAkS,YAAa/vD,QAAQ+R,MAAAA,OAAD,EAACA,EAAM6sB,UAC3BqsB,sBAAAA,EACAE,qBAAsBmE,IAAYG,IAAaJ,IAAet9C,MAAAA,OAAA,EAAAA,EAAM3c,MAAO46D,EAAAA,GAC3E9E,kBAAAA,KAnEct0D,EAnVoC,IAkClD,UAlCmD,mBACvDmrD,EADuD,OAEvDvpD,EAFuD,gBAGvD4xB,EAHuD,aAIvD6lC,EAJuD,QAKvDj6D,EALuD,MAMvD0xB,EANuD,OAOvDyiC,EAPuD,QAQvD/qD,EARuD,oBASvDqb,EATuD,UAUvD20C,EAVuD,WAWvDhF,EAXuD,YAYvD2F,EAZuD,cAavD1F,EAbuD,SAcvDC,EAduD,OAevDE,EAfuD,SAgBvDC,EAhBuD,UAiBvDpgC,EAjBuD,UAkBvDC,EAlBuD,sBAmBvD2gC,EAnBuD,oBAoBvDE,EApBuD,kBAqBvDD,EArBuD,QAsBvDX,EAtBuD,iBAuBvDX,EAvBuD,UAwBvD/L,EAxBuD,WAyBvD6M,EAzBuD,eA0BvDC,EA1BuD,iBA2BvDC,EA3BuD,QA4BvDC,EA5BuD,YA6BvDC,EA7BuD,UA8BvDC,EA9BuD,YA+BvDvgC,EA/BuD,gBAgCvD6M,EAhCuD,cAiCvD2zB,GACI,EACJ,MAAM,gBACJkF,EADI,aAEJC,EAFI,WAGJ1nC,EAHI,gBAIJ3U,EAJI,YAKJs8C,EALI,cAMJC,EANI,uBAOJC,EAPI,sBAQJC,EARI,kBASJC,EATI,qBAUJ94D,EAVI,2BAWJC,EAXI,WAYJ84D,EAZI,gBAaJC,EAbI,aAcJC,EAdI,qBAeJC,GAfI,aAgBJC,GAhBI,aAiBJvjC,GAjBI,kBAkBJwjC,KACEl5D,EAAAA,EAAAA,OAEE,qBAAEwJ,KAAyBE,EAAAA,EAAAA,GAAkB9I,EAAQiiB,OAAqB3hB,GAAW,IACpFi4D,GAAYC,KAAiB72D,EAAAA,EAAAA,KAAS,IACtCkxB,GAAmB4lC,KAAwB92D,EAAAA,EAAAA,KAAS,IACpDqxB,GAAmB0lC,KAAwB/2D,EAAAA,EAAAA,KAAS,IACpDg3D,GAAgBC,KAAqBj3D,EAAAA,EAAAA,KAAS,IAC9Ck3D,GAAgBC,GAAcC,KAAiB/zC,EAAAA,GAAAA,MAEtDpjB,EAAAA,EAAAA,KAAU,KACJ4wD,GAAiBxyD,GACnBi4D,EAAW,CAAEltD,OAAQvN,EAAQuN,OAAQE,UAAWzN,EAAQZ,OAEzD,CAACq7D,EAAYj4D,EAAQxC,EAAQuN,OAAQvN,EAAQZ,GAAI41D,KAEpD5wD,EAAAA,EAAAA,KAAU,KACJ6wD,GAAyBzyD,GAC3B80B,GAAa,CAAE/pB,OAAQvN,EAAQuN,OAAQE,UAAWzN,EAAQZ,OAE3D,CAAC61D,EAAuBzyD,EAAQ80B,GAAct3B,EAAQuN,OAAQvN,EAAQZ,MAEzEgF,EAAAA,EAAAA,KAAU,KACH21D,GAAgBlS,IAAarlD,GAChCq4D,GAAa,CAAEttD,OAAQvN,EAAQuN,WAEhC,CAACwsD,EAAav3D,EAAQqlD,EAAWgT,GAAc76D,EAAQuN,SAE1D,MAAM6nD,IAAoB9yD,EAAAA,EAAAA,KAAQ,KAAM,UACtC,aAAItC,EAAQo3B,iBAAZ,iBAAI,EAAmBokC,uBAAvB,OAAI,EAAoCj7D,OAAQ,SAE9C,MAAMwnB,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAEpC,iBAAOvmB,EAAQo3B,iBAAf,iBAAO,EAAmBokC,uBAA1B,aAAO,EAAoC13B,MAAM,EAAG,GAAGhe,KAAI,QAAC,OAAEK,GAAH,SAAgB4B,EAAU5B,MAAS/B,OAAOpa,SAGvG,IAAKhK,EAAQ62B,cACX,OAIF,MAAM9O,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KACpC,iBAAOvmB,EAAQ62B,qBAAf,aAAO,EAAuBiN,MAAM,EAAG,GAAGhe,KAAK1mB,GAAO2oB,EAAU3oB,KAAKglB,OAAOpa,WAC3E,WAAChK,EAAQo3B,iBAAT,aAAC,EAAmBokC,gBAAiBx7D,EAAQ62B,gBAE1C/1B,GAAgB4wB,EAAQA,EAAMI,SAAS+nC,MAAM4B,GAAQp6B,EAAgBhiC,SAASo8D,EAAIr8D,MACpFiiC,EAAgBhiC,SAASW,EAAQZ,IAE/B68B,IAAe/5B,EAAAA,EAAAA,KAAY,KAC/B84D,IAAc,GACdC,IAAqB,KACpB,IAEGtnC,IAAezxB,EAAAA,EAAAA,KAAY,KAC/B84D,IAAc,GACdE,IAAqB,KACpB,IAEGQ,IAAYx5D,EAAAA,EAAAA,KAAY,KAC5B84D,IAAc,GACd5xD,MACC,CAACA,IAEEmsB,IAAmBrzB,EAAAA,EAAAA,KAAY,KACnC+4D,IAAqB,GACrB7xD,MACC,CAACA,IAEEssB,IAAmBxzB,EAAAA,EAAAA,KAAY,KACnCg5D,IAAqB,GACrB9xD,MACC,CAACA,IAEEuyD,IAAgBz5D,EAAAA,EAAAA,KAAY,KAChCk5D,IAAkB,GAClBhyD,MACC,CAACA,IAEEwyD,IAAsB15D,EAAAA,EAAAA,KAAY,KACtCq5D,KACAnyD,MACC,CAACmyD,GAAenyD,IAEbyyD,IAAc35D,EAAAA,EAAAA,KAAY,KAC9Bg4D,EAAgB,CAAEzsD,UAAWzN,EAAQZ,KACrCs8D,OACC,CAACxB,EAAiBl6D,EAAQZ,GAAIs8D,KAE3BI,IAAa55D,EAAAA,EAAAA,KAAY,KAC7Bi4D,EAAa,CAAE1sD,UAAWzN,EAAQZ,KAClCs8D,OACC,CAACvB,EAAcn6D,EAAQZ,GAAIs8D,KAExBK,IAAY75D,EAAAA,EAAAA,KAAY,KAC5B84D,IAAc,GACdI,IAAkB,KACjB,IAEGY,IAAc95D,EAAAA,EAAAA,KAAY,KAC9BuwB,EAAW,CAAEhlB,UAAWzN,EAAQZ,GAAIuzB,SAAS,IAC7C+oC,OACC,CAACjpC,EAAYzyB,EAAQZ,GAAIs8D,KAEtBx4C,IAAgBhhB,EAAAA,EAAAA,KAAY,KAEhC,GADAw5D,KACIhqC,MAAAA,GAAAA,EAAOI,SAAU,CACnB,MAAM9T,EAAa0T,EAAMI,SAAShM,KAAI,QAAC,GAAE1mB,GAAH,SAAYA,KAClD0e,EAAgB,CAAEqF,WAAYnjB,EAAQuN,OAAQyQ,WAAAA,SAE9CF,EAAgB,CAAEqF,WAAYnjB,EAAQuN,OAAQyQ,WAAY,CAAChe,EAAQZ,QAEpE,CAAC0e,EAAiB9d,EAAS07D,GAAWhqC,IAEnCuqC,IAAoB/5D,EAAAA,EAAAA,KAAY,KACpCw5D,KACAtB,EAAY,CAAE5lB,QAASx0C,EAAQgU,QAAQwgC,YACtC,CAACknB,GAAW17D,EAAQgU,QAAQwgC,QAAS4lB,IAElC8B,IAAsBh6D,EAAAA,EAAAA,KAAY,KACtCw5D,KACArB,EAAc,CAAE7lB,QAASx0C,EAAQgU,QAAQwgC,YACxC,CAACknB,GAAW17D,EAAQgU,QAAQwgC,QAAS6lB,IAElC8B,IAAsBj6D,EAAAA,EAAAA,KAAY,KACtC,MAAMk6D,EAAS1qC,MAAAA,GAAAA,EAAOI,SAClB,CACArkB,UAAWzN,EAAQZ,GACnBi9D,gBAAiB3qC,EAAMI,SAAShM,KAAI,QAAC,GAAE1mB,GAAH,SAAYA,KAChDk9D,WAAW,GAEX,CAAE7uD,UAAWzN,EAAQZ,GAAIk9D,WAAW,GAExChC,EAAuB8B,GACvBV,OACC,CAACA,GAAW17D,EAAQZ,GAAIk7D,EAAwB5oC,IAE7C6qC,IAA6Br6D,EAAAA,EAAAA,KAAY,KAC7Cq4D,EAAsB,CAAEhtD,OAAQvN,EAAQuN,OAAQnO,GAAIY,EAAQZ,KAC5Ds8D,OACC,CAACA,GAAW17D,EAAQuN,OAAQvN,EAAQZ,GAAIm7D,IAErCiC,IAAqBt6D,EAAAA,EAAAA,KAAY,KACrC84D,IAAc,GACdM,OACC,CAACA,KAEEmB,IAAwBv6D,EAAAA,EAAAA,KAAY,KACxCw5D,KACAhB,EAAgB,CAAEntD,OAAQvN,EAAQuN,OAAQE,UAAWzN,EAAQZ,OAC5D,CAACs8D,GAAW17D,EAAQuN,OAAQvN,EAAQZ,GAAIs7D,IAErCgC,IAA6Bx6D,EAAAA,EAAAA,KAAY,KAC7Cw5D,KACAd,GAAqB,CAAErtD,OAAQvN,EAAQuN,OAAQE,UAAWzN,EAAQZ,OACjE,CAACs8D,GAAWd,GAAsB56D,EAAQuN,OAAQvN,EAAQZ,KAEvDu9D,IAA0Bz6D,EAAAA,EAAAA,KAAaga,IAC3Cs+C,EAAkB,CAChBjtD,OAAQvN,EAAQuN,OAChBE,UAAWzN,EAAQZ,GACnBw9D,YAAar5D,KAAKb,MAAMwZ,EAAKgS,UAAY,SAE1C,CAACluB,EAAQuN,OAAQvN,EAAQZ,GAAIo7D,IAE1BqC,IAAqB36D,EAAAA,EAAAA,KAAa8b,IACtC88C,GAAkB,CAAE98C,WAAAA,IACpB09C,OACC,CAACA,GAAWZ,KAETgC,IAAiB56D,EAAAA,EAAAA,KAAY,MACjCm1D,EAAAA,GAAAA,IAAqB,gBAAe4C,GAAiB,KAAIj6D,EAAQuN,OAAOkiB,QAAQ,IAAK,SAASzvB,EAAQZ,MACtGs8D,OACC,CAACzB,EAAcyB,GAAW17D,EAAQuN,OAAQvN,EAAQZ,KAE/C6C,IAAsBC,EAAAA,EAAAA,KAAY,OACrCwvB,MAAAA,OAAA,EAAAA,EAAOI,WAAY,CAAC9xB,IAAUizC,SAASwoB,IAClC36D,GACFa,EAA2B,CAAE3B,QAASy7D,IAEtC/5D,EAAqB,CAAE1B,QAASy7D,OAGpCC,OACC,CAAChqC,EAAO1xB,EAAS07D,GAAW56D,GAAea,EAA4BD,IAEpEq7D,IAAqB76D,EAAAA,EAAAA,KAAY,CAACo2B,EAA8BlmB,EAAWC,KAC/EsoD,EAAa,CACXptD,OAAQvN,EAAQuN,OAAQE,UAAWzN,EAAQZ,GAAIk5B,SAAAA,EAAUlmB,EAAAA,EAAGC,EAAAA,EAAGgoB,UAAW2+B,KAE5E0C,OACC,CAACA,GAAW17D,EAAQuN,OAAQvN,EAAQZ,GAAIu7D,IAErCqC,IAAmB16D,EAAAA,EAAAA,KAAQ,KAAOovB,EAAQA,EAAMI,SAAW,CAAC9xB,IAAU8lB,KAAI,QAAC,GAAE1mB,GAAH,SAAYA,MAAK,CAACsyB,EAAO1xB,IAEzG,GAAIo5D,EAGF,YAFAsC,KAKF,MAAMuB,GAAmB,IAAI/oD,KAG7B,OAFA+oD,GAAiBtuC,YAAYsuC,GAAiB1vC,cAAgB,GAG5D,0BAAK1qB,WAAWmC,EAAAA,EAAAA,GAAe,uBAAwBoG,KACrD,mBAAC,GAAD,CACE2gD,mBAAoBA,EACpB/rD,QAASA,EACT6nD,UAAWA,EACXrlD,OAAQu4D,GACRnH,iBAAkBA,EAClBO,OAAQA,EACRc,sBAAuBA,EACvBE,oBAAqBA,EACrBD,kBAAmBA,EACnBd,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACVjgC,UAAWA,EACXC,UAAWA,EACXkgC,OAAQA,EACRC,SAAUA,EACVF,QAASA,EACTG,WAAYA,EACZC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACXvgC,YAAaA,EACbwgC,cAAeA,EACfl0D,cAAeA,GACfs0D,kBAAmBA,GACnBC,QAASwG,GACTvG,OAAQwG,GACRvG,MAAOwG,GACP/oC,QAASgpC,GACTx6D,UAAW0hB,GACXiT,SAAU8F,GACVu5B,SAAU7hC,GACV8hC,cAAewG,GACfvG,gBAAiBwG,GACjBphC,SAAUqhC,GACVxG,OAAQ4G,GACR3G,aAAc4G,GACdpzD,QAASsyD,GACT7F,WAAYiH,GACZ7G,eAAgB4G,GAChB/G,WAAY7zD,GACZ8zD,aAAc0G,GACdzJ,eAAgB+J,GAChB/G,eAAgB0G,KAElB,mBAAC,GAAD,CACEl6D,OAAQ6yB,GACRtE,WAAgC,cAApBqD,EACZhrB,QAASmsB,GACT7D,MAAOA,EACP1xB,QAASA,IAEX,mBAAC,GAAD,CACEwC,OAAQgzB,GACRpsB,QAASssB,GACT1X,WAAYg/C,KAEd,mBAAC,GAAD,CACEx6D,OAAQ24D,GACR1tD,UAAWzN,EAAQZ,GACnBmO,OAAQvN,EAAQuN,OAChBnE,QAASuyD,KAEVtH,GACC,mBAAC,GAAD,CACE7xD,OAAQ64D,GACR5uC,gBAAc,EACdL,WAA2B,IAAfpsB,EAAQkc,KACpBoQ,OAAO4wC,EAAAA,EAAAA,IAAcD,IACrB1wC,cAAY,EACZnjB,QAASwyD,GACThvC,SAAU+vC,UC/QpB,IAAeh8D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA8D,IAArD,YAAE81C,EAAF,oBAAewmB,GAAsC,EAC5D,MAAMC,GAAqBpsC,EAAAA,EAAAA,IAAyBnwB,IAC9C,OAAE0M,EAAF,SAAUC,GAAa4vD,GAAsB,GAC7CrhD,EAAOxO,IAAUS,EAAAA,EAAAA,IAAWnN,EAAQ0M,GACpC8vD,EAActhD,GAAOuhD,EAAAA,EAAAA,IAA4BvhD,QAAQjZ,EAK/D,MAAO,CACLy6D,gBALsBvzD,QACtB+R,GAAQvO,IAAYqa,EAAAA,EAAAA,IAAiB9L,EAAMvO,KAAa6vD,MAAAA,OAAxD,EAAwDA,EAAaE,kBAKrE/pB,WAAYmD,GACR6mB,EAAAA,EAAAA,IAAiB38D,EAAQ81C,EAAY8mB,cACrCN,GACEO,EAAAA,EAAAA,IAA4B78D,EAAQs8D,QACpCr6D,KAhBQlC,EAlG+B,IAO7C,IAP8C,OAClD4B,EADkD,YAElDm0C,EAFkD,oBAGlDwmB,EAHkD,WAIlD3pB,EAJkD,gBAKlD+pB,EALkD,QAMlDn0D,GACI,EACJ,MAAM,aACJu0D,EADI,iBAEJC,EAFI,YAGJ50C,IACEpnB,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,MACtCzE,GAAOC,EAAAA,EAAAA,MAGXw/B,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS9vB,EAAc+vB,WAtBzB,IAsB4D67B,YAAar7D,KAErG4B,EAAAA,EAAAA,KAAU,KACR,GAAI5B,EACF,GAAIm0C,EAAa,CACf,MAAM,aAAE8mB,EAAF,qBAAgBK,GAAyBnnB,EAC/CgnB,EAAa,CACXF,aAAAA,EACAK,qBAAAA,SAEOX,GACTQ,EAAa,CACXR,oBAAAA,MAIL,CAAC36D,EAAQm0C,EAAagnB,EAAcR,IAEvC,MAAM5jB,GAAer3C,EAAAA,EAAAA,KAAasyC,IAChCA,EAAU,IACLA,EACHupB,qBAAqB,GAGvB/0C,EAAY,CAAEwrB,QAAAA,IACdprC,MACC,CAACA,EAAS4f,IAEPg1C,GAAoB97D,EAAAA,EAAAA,KAAY,KAChCsxC,IACFoqB,EAAiB,CAAEH,aAAcjqB,EAAWp0C,KAC5CgK,OAED,CAACA,EAASoqC,EAAYoqB,IAEzB,OACE,mBAACt4C,GAAA,EAAD,CACEziB,UAAU,kBACVL,OAAQA,EACR4G,QAASA,EACT60D,gBAAc,EACdx0C,MAAO+pB,GAAax3B,EAAAA,GAAAA,GAAWw3B,EAAW/pB,MAAO,CAAC,QAAS,UAAYtnB,EAAK,uBAE3EqxC,MAAAA,GAAAA,EAAYW,SACX,sCACE,0BAAK7rC,IAAK2J,EAAcpP,UAAU,0BAC/B2wC,EAAWW,SAASruB,KAAK0uB,GACxB,mBAACD,GAAA,EAAD,CACEC,QAASA,EACT7xC,KAAMu7D,EAAAA,GACNx7B,oBAAqBA,EACrB3/B,QAASw6D,EAAkBhkB,OAAez2C,EAC1Cm+B,SAAUuT,OAIhB,0BAAK3xC,UAAU,kBACb,mBAACJ,EAAA,EAAD,CACEE,KAAK,UACLurC,OAAK,EACLtrC,MAAO4wC,EAAWkD,cAAgB,SAAW,UAC7C3zC,QAASi7D,GAER77D,EACCqxC,EAAWkD,cAAgB,iCAAmC,8BAC9DlD,EAAW1b,MACX,QAMR,mBAACzR,GAAA,EAAD,W,eCxER,MA2OA,IAAe1lB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAChC,IAAKwO,GAAQA,EAAKoiD,aAChB,MAAO,GAET,MAAMtW,GAAYzsC,EAAAA,EAAAA,IAASW,EAAK3c,IAC1B0c,EAAO+rC,GAAY95C,EAAAA,EAAAA,IAAWlN,EAAQ0M,QAAUzK,EAChDs7D,EAAgBtiD,IAAQuiD,EAAAA,EAAAA,IAAiBviD,GAE/C,MAAO,CACLC,KAAAA,EACAqf,SAASC,EAAAA,EAAAA,IAAkBtf,GAAMuf,EAAAA,EAAAA,IAAqBz6B,IAAS06B,EAAAA,EAAAA,IAAuB16B,IACtFgnD,UAAAA,EACAuW,cAAAA,EACAE,eAAeC,EAAAA,EAAAA,IAAiBxiD,GAChCyiD,cAAex0D,QAAQ+R,MAAAA,GAAD,UAACA,EAAM6sB,gBAAP,aAAC,EAAgB61B,iBAhBzB79D,EA3OmC,IAyBjD,IAzBkD,OACtD2M,EADsD,OAEtD/K,EAFsD,iBAGtDk8D,EAHsD,OAItDvK,EAJsD,UAKtDvqC,EALsD,YAMtD+0C,EANsD,cAOtDC,EAPsD,aAQtDC,EARsD,UAStDC,EATsD,QAUtDC,EAVsD,QAWtDC,EAXsD,SAYtDC,EAZsD,kBAatDC,EAbsD,mBActDC,EAdsD,KAetDpjD,EAfsD,UAgBtD8rC,EAhBsD,QAiBtDzsB,EAjBsD,cAkBtDkjC,EAlBsD,cAmBtDE,EAnBsD,cAoBtDJ,EApBsD,mBAqBtDgB,EArBsD,cAsBtDC,EAtBsD,QAuBtDj2D,EAvBsD,oBAwBtDqb,GACI,EACJ,MAAM,qBACJ66C,EADI,uBAEJC,EAFI,eAGJC,EAHI,WAIJC,EAJI,cAKJC,EALI,gBAMJC,EANI,eAOJC,EAPI,WAQJC,EARI,wBASJC,IACEl+D,EAAAA,EAAAA,OAEGm5D,EAAYC,IAAiB72D,EAAAA,EAAAA,KAAS,IACtCkxB,EAAmB4lC,IAAwB92D,EAAAA,EAAAA,KAAS,IACrD,EAAEiO,EAAF,EAAKC,GAAM8hD,GAEjB7oD,EAAAA,EAAAA,GAAkB9I,EAAQiiB,OAAqB3hB,GAAW,GAE1D,MAAMm5B,GAAe/5B,EAAAA,EAAAA,KAAY,KAC/B84D,GAAc,GACdC,GAAqB,KACpB,IAEGS,GAAYx5D,EAAAA,EAAAA,KAAY,KAC5B84D,GAAc,GACd5xD,MACC,CAACA,IAEEmsB,GAAmBrzB,EAAAA,EAAAA,KAAY,KACnC+4D,GAAqB,GACrB7xD,MACC,CAACA,IAEE22D,GAAiB79D,EAAAA,EAAAA,KAAY,KACjCs9D,EAAe,CAAEQ,QAAS,aACzB,CAACR,IAEES,GAAmB/9D,EAAAA,EAAAA,KAAY,KACnCu9D,EAAW,CAAElyD,OAAAA,MACZ,CAACA,EAAQkyD,IAENS,GAAwBh+D,EAAAA,EAAAA,KAAY,KACxCo9D,EAAqB,CAAE/xD,OAAAA,EAAQ6tB,SAAUA,IACzCsgC,MACC,CAACnuD,EAAQmuD,EAAWtgC,EAASkkC,IAE1Ba,GAA4Bj+D,EAAAA,EAAAA,KAAY,KACxCi9D,EAEFQ,EAAgB,CACdpyD,OAAAA,IAGFmyD,EAAc,CACZnyD,OAAAA,IAGJmuD,MACC,CAACA,EAAWyD,EAAoB5xD,EAAQmyD,EAAeC,IAEpDS,GAAwBl+D,EAAAA,EAAAA,KAAY,KACxC09D,EAAe,CAAExgE,GAAImO,IACrBmuD,MACC,CAACnuD,EAAQmuD,EAAWkE,IAEjBS,IAAwBn+D,EAAAA,EAAAA,KAAY,KACxC29D,EAAW,CAAE15C,OAAQ5Y,IACrBmuD,MACC,CAACmE,EAAYtyD,EAAQmuD,IAElB4E,IAAkBp+D,EAAAA,EAAAA,KAAY,KAClCk9D,IACA1D,MACC,CAACA,EAAW0D,IAETmB,IAAar+D,EAAAA,EAAAA,KAAY,KAC7B49D,IACApE,MACC,CAACA,EAAWoE,IAETU,IAAet+D,EAAAA,EAAAA,KAAY,KAC/Bm9D,IACA3D,MACC,CAACA,EAAW2D,IAEToB,IAAuBv+D,EAAAA,EAAAA,KAAY,KACvCq9D,IACA7D,MACC,CAACA,EAAW6D,KAEfn7D,EAAAA,EAAAA,KAAU,KACRkuD,KAEOI,KACN,IAEH,MAAMvwD,IAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACs+D,GAAA,EAAD,KACE,0BAAK79D,UAAU,uBACb,mBAACg2D,GAAA,EAAD,CACEr2D,OAAQu4D,EACR33D,UAAU,QACVtD,MAAQ,SAAQsS,YAAYC,OAC5BjJ,QAASsyD,GAERgD,GAAoBC,GACnB,mBAACt7D,EAAA,EAAD,CACEC,KAAK,OACLP,QAASg9D,GAER59D,GAAK,aAGTu8D,GAAoBE,GACnB,mBAACv7D,EAAA,EAAD,CACEC,KAAK,OACLP,QAASk9D,GAER99D,GAAK,eAGTu8D,GAAoBG,GACnB,mBAACx7D,EAAA,EAAD,CACEC,KAAMsmB,EAAY,UAAY,QAC9B7mB,QAASu9D,IAERn+D,GAAKynB,EAAY,qBAAuB,qBAG5Cw0C,GACC,mBAAC/6D,EAAA,EAAD,CACEC,KAAK,WACLP,QAASs9D,IAERl+D,GAAK,eAGTc,EAAAA,IAA2B87D,GAC1B,mBAAC17D,EAAA,EAAD,CACEC,KAAK,QACLP,QAASw9D,IAERp+D,GAAK,SAGTc,EAAAA,IAA2B67D,GAC1B,mBAACz7D,EAAA,EAAD,CACEC,KAAK,SACLP,QAASy9D,IAERr+D,GAAK,WAGT68D,GACC,mBAAC37D,EAAA,EAAD,CACEC,KAAM83B,EAAU,SAAW,OAC3Br4B,QAASm9D,GAER/9D,GAAKi5B,EAAU,cAAgB,eAGlC8jC,GAAqBC,IACrB,mBAAC97D,EAAA,EAAD,CACEC,KAAK,aACLP,QAASo9D,GAERh+D,GAAKg9D,EAAqB,gBAAkB,sBAGhDX,GACC,mBAACn7D,EAAA,EAAD,CACEC,KAAMsmB,EAAY,WAAa,UAC/B7mB,QAASq9D,GAERj+D,GAAKynB,EAAY,iBAAmB,6BAGzC,mBAACvmB,EAAA,EAAD,CACEC,KAAK,SACLP,QAAS09D,IAERt+D,GAAK,yBAEP88D,GACC,mBAAC57D,EAAA,EAAD,CACEqzB,aAAW,EACXpzB,KAAK,SACLP,QAASk5B,GAER95B,GAAK0lD,EACF,iBACCyW,EAAgB,0BAA6B10C,EAAY,eAAiB,sBAIpF7N,GACC,mBAACsgB,GAAA,EAAD,CACE75B,OAAQ6yB,EACRjsB,QAASmsB,EACTxZ,KAAMA,U,eC/PlB,MAAM4kD,IAAwBtsD,EAAAA,EAAAA,KAAUkoB,GAAOA,KAAM,KAAK,GAyK1D,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMkb,GAAOqX,EAAAA,EAAAA,IAAkBvyB,GAC/B,IAAKkb,EACH,MAAO,GAGT,MAAM,MAAE8jB,EAAF,QAAS9H,IAAY6oC,EAAAA,EAAAA,IAAwB//D,IAAW,IACxD,WAAEsgD,EAAF,SAAczjC,GAAaqa,GAAW,GAE5C,MAAO,CACLhc,KAAAA,EACA8jB,MAAAA,EACAshB,WAAAA,EACAzjC,SAAAA,EACAmjD,sBAAuB72D,QAAQnJ,EAAO4vB,8BAfxB7vB,EAvKuB,IAOrC,IAPsC,SAC1CuN,EAD0C,KAE1C4N,EAF0C,MAG1C8jB,EAH0C,WAI1CshB,EAJ0C,SAK1CzjC,EAL0C,sBAM1CmjD,GACI,EACJ,MAAM,wBACJC,EADI,wBAEJC,EAFI,aAGJxlD,EAHI,qBAIJylD,EAJI,oBAKJC,IACEr/D,EAAAA,EAAAA,MAGE4a,GAAW5V,EAAAA,EAAAA,IAAyB,OACnCs6D,EAAcC,IAAmBh9D,EAAAA,EAAAA,IAAS,IAGjDC,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEg9D,GAAmBx8D,OAC3B,IAAKw8D,EACH,OAGF,MAAMC,EAASzjE,SAASgkB,eAAe,QACjCld,EAAe,KACnB,MAAM,cAAEs2B,GAAkBp9B,SAC1B,GAAIo9B,GAAkBA,IAAkBxe,EAASzV,QAAU,CACzD,MAAM,QAAEu6D,EAAF,OAAW/8D,GAAW68D,EAC5BC,EAAOvhE,MAAM6a,UAAa,cAAa2mD,OACvCD,EAAOvhE,MAAMyE,OAAU,GAAEA,MACzB3G,SAASq4C,gBAAgB12C,UAAY+hE,OAErCD,EAAOvhE,MAAM6a,UAAY,GACzB0mD,EAAOvhE,MAAMyE,OAAS,IAM1B,OAFA68D,EAAev8D,iBAAiB,SAAUH,GAEnC,KACL08D,EAAet8D,oBAAoB,SAAUJ,MAE9C,KAGHN,EAAAA,EAAAA,KAAU,KACJ2X,MAAAA,GAAAA,EAAM3c,IAAN2c,MAAY2B,GAAAA,EAAUnd,QACxBgb,EAAa,CAAEhO,OAAQwO,EAAK3c,GAAIqO,UAAWiQ,EAAS,KACpDyjD,EAAgB,IAEhBA,GAAiB,KAElB,CAACplD,MAAAA,OAAD,EAACA,EAAM3c,GAAImc,EAAcmC,KAG5BtZ,EAAAA,EAAAA,KAAU,KACRm9D,MAAM5sD,KAAK/W,SAASyC,iBAAmC,UAAU4yC,SAASuuB,IACxEA,EAAM9kD,SAAW1S,QAAQmE,GAAYqzD,IAAUhlD,EAASzV,YAG1Dw6D,MAAM5sD,KAAK/W,SAASyC,iBAAiC,yBAAyB4yC,SAASwuB,IACrFA,EAAIC,gBAAkBvzD,EAAW,QAAU,YAE5C,CAACA,KAGJ/J,EAAAA,EAAAA,KAAU,KACH+J,GACHqO,EAASzV,QAAS46D,SAEnB,CAACxzD,KAEJlE,EAAAA,EAAAA,KAAgB,KACMrM,SAASe,cAAgC,uBACjDgjE,SACX,CAACd,IAEJ,MAAMe,GAAiC1/D,EAAAA,EAAAA,KAAa2/D,IAClDf,EAAwB,CAAEjhC,MAAOgiC,IAE7BA,EAASthE,QACXogE,GAAsBI,KAEvB,CAACA,EAAyBD,IAEvBgB,GAAW5/D,EAAAA,EAAAA,KAAY,KAC3B,GAAI6Z,GAAQ2B,EAAU,CACpB,MAAMqkD,EAAgBb,EAAe,EACrC3lD,EAAa,CAAEhO,OAAQwO,EAAK3c,GAAIqO,UAAWiQ,EAASqkD,KACpDZ,EAAgBY,MAEjB,CAAChmD,EAAMmlD,EAAc3lD,EAAcmC,IAEhCskD,GAAa9/D,EAAAA,EAAAA,KAAY,KAC7B,GAAI6Z,GAAQ2B,EAAU,CACpB,MAAMqkD,EAAgBb,EAAe,EACrC3lD,EAAa,CAAEhO,OAAQwO,EAAK3c,GAAIqO,UAAWiQ,EAASqkD,KACpDZ,EAAgBY,MAEjB,CAAChmD,EAAMmlD,EAAc3lD,EAAcmC,IAEtC,OACE,0BAAKte,GAAG,eAAeyD,UAAWsL,EAAW,SAAW,IACtD,0BAAKtL,UAAU,UACb,mBAACJ,EAAA,EAAD,CACEE,KAAK,UACLD,OAAK,EACLE,MAAM,cACNG,QAASi+D,GAET,wBAAGn+D,UAAU,qBAEf,mBAACo/D,GAAA,EAAD,CACE35D,IAAKkU,EACL1J,MAAO+sB,EACPhjB,SAAU+kD,KAGd,0BAAK/+D,UAAU,UACb,0BAAKA,UAAU,WACZg9B,EACCniB,MAAAA,GAAAA,EAAUnd,OACP,GAAE2gE,EAAe,QAAQ/f,IACxBzjC,IAAaA,EAASnd,OACxB,aAEA,GAGF,mBAACkC,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAAS,IAAMk+D,EAAoB,CAAE70C,YAAY8wC,EAAAA,EAAAA,IAAchpD,KAAKC,SACpEnR,UAAU,2BAEV,wBAAGH,UAAU,oBAInB,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAAS++D,EACTplD,UAAWgB,IAAaA,EAASnd,QAAU2gE,IAAiBxjD,EAASnd,OAAS,GAE9E,wBAAGsC,UAAU,aAEf,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,MAAM,cACNG,QAASi/D,EACTtlD,UAAWgB,IAAaA,EAASnd,QAA2B,IAAjB2gE,GAE3C,wBAAGr+D,UAAU,qB,gFC/LR,SAASq/D,GACtBpjE,EACAqjE,GAKA,IAJAC,EAIA,uDAJS,EACTC,EAGA,wDAFAC,EAEA,wDADAC,EACA,wDACA,MAAMC,EAAa1jE,EAAUyjE,EAAe,aAAe,aACrDE,EAAaD,EAAa1jE,EAAUyjE,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBP,EACvBrjE,EAAUuB,iBAA8B8hE,GACxCA,GACE,OAAE5hE,GAAWmiE,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAI78C,EAAI,EAAGA,EAAIxlB,EAAQwlB,IAAK,CAC/B,MAAMrmB,EAAUgjE,EAAY38C,GACtB5O,EAAKzX,EAAQ6iE,EAAe,aAAe,aAC3CM,EAAK1rD,EAAKzX,EAAQ6iE,EAAe,cAAgB,gBAKvD,GAJkBD,EACdO,GAAML,EAAaJ,GAAUS,GAAMJ,EAAaL,EAChDjrD,GAAMsrD,EAAaL,GAAUS,GAAML,EAAaJ,EAGlDO,EAAe5zC,KAAKhJ,GACpB68C,GAAU,OACL,GAAIA,IAAYP,EACrB,MAIJ,MAAO,CAAEK,YAAAA,EAAaC,eAAAA,GCzBxB,SARA,SAAwB7jE,EAAwBY,GAA4C,IAAtB6iE,EAAsB,wDAC1F,MAAMC,EAAa1jE,EAAUyjE,EAAe,aAAe,aACrDE,EAAaD,EAAa1jE,EAAUyjE,EAAe,cAAgB,gBACnEprD,EAAKzX,EAAQ6iE,EAAe,aAAe,aAC3CM,EAAK1rD,EAAKzX,EAAQ6iE,EAAe,cAAgB,gBACvD,OAAOprD,EAAKqrD,GAAcK,EAAKJ,G,cCElB,SAASK,GAAsBzqD,EAAkBmL,EAAevR,GAC7E,MAAMnT,EAAYmT,EAAalL,QAC/B,IAAKjI,GAAa0kB,EAAQ,EACxB,OAEF,MAAM,eAAEm/C,EAAF,YAAkBD,GAAgBR,GACtCpjE,EACAuZ,EAVoB,GAYpB,GACA,GAGF,IAAKqqD,EAAYniE,SAAWmiE,EAAYl/C,GACtC,OAEF,MAAMu/C,EAAQJ,EAAe,GAC7B,IAAKA,EAAetjE,SAASmkB,IACvBA,IAAUu/C,IAAUC,GAAelkE,EAAW4jE,EAAYK,IAAU,CACxE,MAAM32D,EAAWoX,EAAQm/C,EAAeA,EAAepiE,OAAS,GAAK,QAAU,OAC/E0iE,EAAAA,GAAAA,GAAiBnkE,EAAW4jE,EAAYl/C,GAAQpX,EAtB9B,K,eCDf,SAAS82D,GAAT,GAoBJ,IApBmC,SACpC/0D,EADoC,aAEpCo0D,EAFoC,iCAGpCY,EAHoC,6BAIpCC,EAJoC,kBAKpCC,EALoC,MAMpC59C,EANoC,kBAOpC69C,EAPoC,SAQpCxoC,EARoC,QASpC1xB,GAWC,EACD,MAAOm6D,EAAmBC,IAAwBr/D,EAAAA,EAAAA,KAAU,GAEtDs/D,GAAmBvhE,EAAAA,EAAAA,KAAawhE,GAC/Bj+C,GAIEk+C,EAAAA,GAAAA,GAAcl+C,EAAMllB,OAAQmjE,IAHzB,GAIT,CAACj+C,IAEEm+C,GAAiB1hE,EAAAA,EAAAA,KAAY,CAAC4Q,EAAe7N,KACjDA,EAAEsH,iBACFi3D,GAAsBhgD,GAAWigD,EAAiBjgD,EAAQ1Q,OACzD,CAAC0wD,EAAsBC,IAEpBI,GAAmB3hE,EAAAA,EAAAA,KAAa+C,IACpC,GAAIwgB,GAASA,EAAMllB,QAAUgjE,GAAqB,EAAG,CACnD,MAAMO,EAAOr+C,EAAM89C,GACfO,IACF7+D,EAAEsH,iBACFuuB,EAASgpC,OAGZ,CAACr+C,EAAOqV,EAAUyoC,IAEfQ,GAAyBt+C,GAAS89C,EAAoB99C,EAAMllB,OAAS,EAmB3E,OAlBA6D,EAAAA,EAAAA,KAAU,KACH++D,IAAoCY,GACvCP,EAAqBJ,GAAgC,EAAI,KAE1D,CAACW,EAAuBX,EAA8BD,KAEzD/+D,EAAAA,EAAAA,KAAU,IAAO+J,GAAW8nB,EAAAA,GAAAA,GAAyB,CACnDG,MAAOhtB,EACP46D,KAAMX,GAAqBd,OAAez/D,EAAamC,GAAqB2+D,GAAgB,EAAG3+D,GAC/Fg/D,OAAQZ,GAAqBd,OAAez/D,EAAamC,GAAqB2+D,EAAe,EAAG3+D,GAChGi/D,OAAQb,IAAsBd,OAAez/D,EAAamC,GAAqB2+D,GAAgB,EAAG3+D,GAClGk/D,QAASd,IAAsBd,OAAez/D,EAAamC,GAAqB2+D,EAAe,EAAG3+D,GAClGm/D,MAAOd,EAAoBO,OAAmB/gE,EAC9CmvB,QAAS4xC,SACN/gE,GAAY,CACfugE,EAAmBO,EAAgBC,EAAkB11D,EAAUo0D,EAAcn5D,EAASk6D,IAGjFC,EC5CT,MAmFA,IAAe5iE,EAAAA,EAAAA,KAnFsB,IAK/B,IALgC,OACpC6B,EADoC,QAEpC4G,EAFoC,iBAGpCi7D,EAHoC,cAIpCC,GACI,EAEJ,MAAMryD,GAAerL,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9I,OAAQM,OAAWA,GAAW,GAEzFyhE,GAAmBriE,EAAAA,EAAAA,KAAY,SAACikB,GAAuC,IAAvBq+C,EAAuB,wDAE3E,MAAMz8C,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAC9BzK,EAAOiM,EAAU5B,GAClBrK,GAILuoD,EAAiBvoD,EAAM0oD,KACtB,CAACH,IAEEI,GAAsBviE,EAAAA,EAAAA,KAAawiE,IACvCH,EAAiBG,EAAOtlE,IAAI,KAC3B,CAACmlE,IAEEI,EAAuBzB,GAAsB,CACjD/0D,SAAU3L,EACVijB,MAAO6+C,EACPxpC,SAAU2pC,EACVnB,mBAAmB,EACnBH,kCAAkC,EAClC/5D,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACR0+D,GAAsB,uBAAwB6B,EAAsB1yD,KACnE,CAAC0yD,KAEJvgE,EAAAA,EAAAA,KAAU,KACJkgE,IAAkBA,EAAc/jE,QAClC6I,MAED,CAACk7D,EAAel7D,IAEnB,MAAMw7D,GAAkBroD,EAAAA,EAAAA,GACtB+nD,MAAAA,GAAAA,EAAe/jE,OACX+jE,OACAxhE,EACJoI,GAEI25D,EAAsBP,IAAkBA,EAAc/jE,OACxDqkE,EACAN,EAEJ,IAAKp5D,GAAiB25D,IAAwBA,EAAoBtkE,OAChE,OAGF,MAAMsC,GAAYmC,EAAAA,EAAAA,GAChB,gDACAoG,GAGF,OACE,0BAAKvI,UAAWA,EAAWyF,IAAK2J,GAC7B4yD,MAAAA,OADH,EACGA,EAAqB/+C,KAAI,CAAC,EAAQtC,KAAT,IAAC,GAAEpkB,GAAH,SACxB,mBAAC4mB,GAAA,EAAD,CACE1Z,IAAKlN,EACLyD,UAAU,kCACVE,QAAS,IAAMwhE,EAAiBnlE,GAChCoyC,MAAOmzB,IAAyBnhD,GAEhC,mBAACyC,GAAA,EAAD,CACEE,OAAQ/mB,EACRg9B,WAAW,QACXT,cAAY,Y,0BC9CxB,MAqPA,IAAeh7B,EAAAA,EAAAA,KAnPuB,IAoBhC,IApBiC,OACrC4M,EADqC,SAErCC,EAFqC,YAGrCs3D,EAHqC,QAIrCC,EAJqC,sBAKrCC,EALqC,QAMrC/R,EANqC,eAOrC9gC,EAPqC,cAQrClO,EARqC,iBASrCghD,EATqC,aAUrCC,EAVqC,kBAWrCC,EAXqC,cAYrCC,EAZqC,eAarCC,EAbqC,gBAcrCC,EAdqC,OAerC3P,EAfqC,aAgBrC4P,EAhBqC,QAiBrCC,EAjBqC,aAkBrCC,EAlBqC,aAmBrCnK,GACI,EACJ,MAAMoK,GAAaC,EAAAA,GAAAA,GAAYZ,GAEzBa,GAAgBD,EAAAA,GAAAA,GAAsC,MACtDE,GAAiBj/D,EAAAA,EAAAA,MACjBk/D,GAAkBvpD,EAAAA,EAAAA,GAAYuoD,GAC9BiB,EAAuBjB,EAAYvkE,OAASukE,EAAcgB,EAC1DtjE,EAASwH,QAAQ86D,EAAYvkE,SAC5BylE,EAAWC,EAAaC,IAAiB1+C,EAAAA,GAAAA,KAC1C2+C,EAAUn8D,QAAQ+7D,GAAwBA,EAAqBK,OAAO7lC,GAAMA,EAAE8lC,SAC9ElkE,GAAOC,EAAAA,EAAAA,MAEP,qBACJkkE,EADI,oBACkBC,EADlB,cACuCC,EADvC,qBACsDC,IACxDC,EAAAA,GAAAA,GACFlkE,EACAkjE,EACAJ,EACAqB,EAAAA,GACA1B,OACAniE,EACAmhB,IAEI,mBACJ2iD,EADI,kBACgBC,EADhB,eACmCC,EADnC,YACmDC,IACrDC,EAAAA,GAAAA,GACFxkE,EACAkjE,EACAR,EACAyB,EAAAA,GACArB,EACAH,EACAC,GACCnS,IAGH7uD,EAAAA,EAAAA,KAAU,IAAO5B,GAAS6gB,EAAAA,EAAAA,GAAsBmiD,QAAW1iE,GAAY,CAACN,EAAQgjE,IAEhF,MACEyB,kBAAmBC,EADf,kBAEJC,EAFI,uBAGJC,EAHI,sBAIJC,IACEC,EAAAA,GAAAA,GAAuB1B,GAAgBZ,IAA0BxiE,GAE/D+kE,GAAkBrlE,EAAAA,EAAAA,KAAY,KAC9BM,GACFmzD,MAED,CAACnzD,EAAQmzD,IAsBN6R,GAAkBtlE,EAAAA,EAAAA,KAAa+C,IACnCA,EAAEsH,iBACF25D,IAEA,MAAQuB,cAAc,MAAEltB,IAAYt1C,EAEpC,GAAIs1C,MAAAA,GAAAA,EAAOh6C,OAAQ,CACjB,MAAMmnE,EAAWvB,EACb5E,MAAM5sD,KAAK4lC,GAAOn2B,QAAQujD,GACnBA,EAAK/qD,MAAQgrD,EAAAA,GAAAA,IAA+BD,EAAK/qD,QAExD2kD,MAAM5sD,KAAK4lC,GAEfgrB,EAAamC,EAAUvB,MAExB,CAACA,EAASZ,EAAcW,IAY3B,IAAKH,EACH,OAGF,MAAM8B,EAAe9B,EAAqBK,OAAO7lC,GAAMunC,EAAAA,GAAAA,IAAkCvnC,EAAEwnC,YACrFC,EAAejC,EAAqBK,OAAO7lC,GAAM0nC,EAAAA,GAAAA,IAAkC1nC,EAAEwnC,YACrFG,EAAenC,EAAqBK,OAAO7lC,GAAMA,EAAEwnC,SAAS/nC,WAAW,YAE7E,IAAIvW,GAAQ,GAgDZ,OA9CEA,GAAQtnB,EADN0lE,EACW,0BACJG,EACI,0BACJE,EACI,0BAEA,yBAN2BnC,EAAqBxlE,OAAQ,KA+CrE,mBAAC+kB,GAAA,EAAD,CACE9iB,OAAQA,EACR4G,QAASo8D,EACTjgD,OAzCJ,WACE,GAAKwgD,EAIL,OACE,0BAAKljE,UAAU,yBAAyBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAChE,mBAACL,EAAA,EAAD,CAAQC,OAAK,EAACE,MAAM,cAAcD,KAAK,UAAUK,UAAU,qBAAqBD,QAASyiE,GACvF,wBAAG3iE,UAAU,gBAEf,0BAAKA,UAAU,eAAe4mB,IAC9B,0BAAK5mB,UAAU,iCACb,mBAACJ,EAAA,EAAD,CACE6F,IAAKs9D,EACLhjE,MAAM,UACND,KAAK,UACLE,UAAU,sBACVE,QAASwkE,EACTl2D,cAAe2zD,EAAwBmC,OAAoBrkE,GAE1DX,EAAK,SAEP6iE,GACC,mBAAC,KAAD,CACExiE,OAAQ0kE,EACRiB,gBAAc,EACd1C,aAAetzC,OAAgCrvB,EAAf2iE,EAChC2C,eAAgB9M,EAChBlyD,QAASg+D,EACT3iD,oBAAqB4iD,MAYrBgB,GACRxlE,UAAY,oBAAkBmjE,EAAY,UAAY,KAEtD,0BACEnjE,UAAU,cACVylE,YAAarC,EACbsC,OAAQf,EACRgB,WA7EN,SAAwBvjE,GACtBA,EAAEsH,iBACFtH,EAAEC,kBAEE2gE,EAAe9+D,UACjBnC,OAAOsC,aAAa2+D,EAAe9+D,SACnC8+D,EAAe9+D,aAAUjE,IAwEvB2lE,YAnHmBxjE,IACvB,MAAQyjE,cAAeC,EAAU58D,OAAQ68D,GAAe3jE,EAGnD2jE,EAA8BtwD,QAAQ,kBAAoBqwD,IAC7D9C,EAAe9+D,QAAUnC,OAAOqC,WAAWi/D,EA9EnB,MAkFtB0C,GAAeA,EAA2BzpE,QAAQ,8BAIlDwpE,GACF1jE,EAAEC,kBAGJghE,MAmGI,0BAAyB/jE,EAAK,4BAA6B,KAE1DgkE,EACC,0BAAKtjE,UAAU,+BACZkjE,EAAqBjgD,KAAK+iD,GACzBA,EAAWd,SAAS/nC,WAAW,UAC3B,0BAAK3hC,IAAKwqE,EAAW14D,QAASuB,IAAI,KAClC,4BAAOrT,IAAKwqE,EAAW14D,QAASvD,UAAQ,EAACG,OAAK,EAACD,MAAI,OAI3D,0BAAKjK,UAAU,kCACZkjE,EAAqBjgD,KAAK+iD,GACzB,mBAACC,GAAA,EAAD,CACE9kD,KAAM6kD,EAAWE,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBJ,EAAWE,SAAUF,EAAWd,UAC5DmB,YAAaL,EAAW94D,eACxBpN,KAAMkmE,EAAWlmE,KACjB0gC,SAAO,OAMf,0BAAKxgC,UAAU,8BACb,mBAAC,GAAD,CACEL,OAAQ8jE,EACRl9D,QAASm9D,EACTlC,iBAAkBmC,EAClBlC,cAAemC,IAEjB,mBAAC,KAAD,CACEjkE,OAAQokE,EACRuC,OAAQrC,EACR19D,QAASy9D,EACTuC,cAAerC,EACf1B,eAAgBA,IAElB,mBAACgE,GAAA,EAAD,CACEjqE,GAAG,qBACHmO,OAAQA,EACRC,SAAUA,EACV87D,wBAAsB,EACtBC,KAAMxE,EACNyE,gBAAiB7C,EAAAA,GACjBvhD,YAAajjB,EAAK,WAClB4S,SAAUuwD,EACV3P,OAAQA,EACR8T,aAAcz/D,QAAQipD,GAAW6R,EAAYvkE,gB,eC1QzD,MAqUA,IAAeI,EAAAA,EAAAA,KA/TiB,IAAiC,IAAhC,OAAE6B,EAAF,OAAUmzD,EAAV,QAAkB6P,GAAc,EAE/D,MAAMkE,GAAmB9iE,EAAAA,EAAAA,IAAyB,MAE5C+iE,GAAiB/iE,EAAAA,EAAAA,IAAuB,MAExCgjE,GAAchjE,EAAAA,EAAAA,IAAuB,OAEpCijE,EAAUC,IAAe3lE,EAAAA,EAAAA,IAAiB,KAC1C+vB,EAAS61C,IAAc5lE,EAAAA,EAAAA,IAAmB,CAAC,MAC3C6lE,EAAaC,IAAkB9lE,EAAAA,EAAAA,KAAS,IACxC+lE,EAAmBC,IAAwBhmE,EAAAA,EAAAA,KAAS,IACpDimE,EAAYC,IAAiBlmE,EAAAA,EAAAA,KAAS,IACtCmmE,EAAUC,IAAepmE,EAAAA,EAAAA,OACzBqmE,EAAeC,IAAoBtmE,EAAAA,EAAAA,OACnCumE,EAAWC,IAAgBxmE,EAAAA,EAAAA,KAAkB,GAE9ChC,GAAOC,EAAAA,EAAAA,KAEPwoE,GAAa1oE,EAAAA,EAAAA,KAAaoG,IAC1B9F,GAAU8F,EAAIvB,SAChBuB,EAAIvB,QAAQyqC,UAEb,CAAChvC,KAEJ4B,EAAAA,EAAAA,KAAU,IAAO5B,GAAS6gB,EAAAA,EAAAA,GAAsBmiD,QAAW1iE,GAAY,CAACN,EAAQgjE,KAChFphE,EAAAA,EAAAA,KAAU,KACH5B,IACHsnE,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,GAAc,GACdE,EAAY,IACZE,EAAiB,IACjBE,GAAa,MAEd,CAACnoE,KAEJ4B,EAAAA,EAAAA,KAAU,IAAMwmE,EAAWlB,IAAmB,CAACkB,EAAYpoE,KAE3DyH,EAAAA,EAAAA,KAAgB,KACd,MAAM4gE,EAAajB,EAAY7iE,QAE3B8jE,GAAcP,IAAaO,EAAWC,YACxCD,EAAWC,UAAYR,KAExB,CAACA,IAEJ,MAAMS,GAAe7oE,EAAAA,EAAAA,KAAY,WAA+B,IAA9B8oE,EAA8B,uDAAP,GACvDjB,EAAW,IAAIiB,EAAY,KAC3B1pD,uBAAsB,KACpB,MAAM2pD,EAAOtB,EAAe5iE,QACvBkkE,IAILA,EAAKntE,UAAUihB,OAAO,YAAaksD,EAAKjZ,aA/DtB,KAgElBiZ,EAAKC,SAAS,CAAEvzD,IAAKszD,EAAKjZ,aAAcmZ,SAAU,iBAEnD,IAEGC,GAAelpE,EAAAA,EAAAA,KAAY,KAE/B,GADAyoE,GAAa,IACRnoE,EACH,OAGF,MAAM6oE,EAAkBxB,EAAS7hC,OAAOuP,UAAU,EAvE1B,KAwElB+zB,EAAiBp3C,EAAQpO,KAAKylD,GAAMA,EAAEvjC,OAAOuP,UAAU,EAzEvC,OAyE8DnzB,QAAQmnD,GAAMA,EAAEhrE,SAEpG,IAAK8qE,GAAmBC,EAAe/qE,OAAS,EAY9C,OAXAupE,EAAYuB,GACRC,EAAe/qE,OACb+qE,EAAe/qE,OAAS,EAC1BwqE,EAAaO,GAEbvB,EAAWuB,GAGbP,SAEFJ,GAAa,GAIf,GAAIP,KAAgBI,IAAkBc,EAAexuD,OAAO0tD,KAE1D,YADAG,GAAa,GAIf,MAOMtlC,EAAsB,CAC1BmmC,QAAS,CACP3B,SAAUwB,EACVI,QAVYH,EACbxlD,KAAI,CAAChiB,EAAM0f,KAAP,CACH1f,KAAMA,EAAKkkC,OACX+wB,OAAQ9sC,OAAOzI,MACXyI,OAAOzI,KAAWgnD,GAAiB,CAAEkB,SAAS,WAO7C1B,GAAe,CAAE2B,UAAU,MAC5BzB,GAAqB,CAAE0B,gBAAgB,MACvCxB,GAAc,CAAEyB,MAAM,KAI9B,GAAIzB,EAAY,CACd,MAAM,KAAEtmE,EAAF,SAAQgoE,GAAcxB,IAAYyB,EAAAA,GAAAA,GAAkBzB,EAAS/yB,UAAU,EA/GvD,OA+GoF,GAE1GlS,EAAQwmC,KAAO,CACbG,eAAgB,CAACxB,MACb1mE,GAAQ,CAAEwmE,SAAUxmE,MACpBgoE,GAAY,CAAEG,iBAAkBH,IAIxCnW,EAAOtwB,KACN,CACD7iC,EACAqnE,EACA31C,EACAk2C,EACAI,EACAR,EACAE,EACAvU,EACAoV,EACAT,IAGI4B,GAAehqE,EAAAA,EAAAA,KAAY,CAACshB,EAAe1f,KAC/C,MAAMknE,EAAa,IAAI92C,GACvB82C,EAAWxnD,GAAS1f,EAChBknE,EAAWA,EAAWzqE,OAAS,GAAGynC,OAAOznC,QAAUyqE,EAAWzqE,OA5I5C,GA6IpBwqE,EAAaC,GAEbjB,EAAWiB,KAEZ,CAAC92C,EAAS62C,IAEPoB,GAAejqE,EAAAA,EAAAA,KAAashB,IAChC,MAAMwnD,EAAa,IAAI92C,GACvB82C,EAAWr5B,OAAOnuB,EAAO,GACzBumD,EAAWiB,GACX1pD,uBAAsB,KACfqoD,EAAe5iE,SAIpB4iE,EAAe5iE,QAAQjJ,UAAUihB,OAAO,YAAa4qD,EAAe5iE,QAAQirD,aA7J1D,UA+JnB,CAAC99B,IAEEk4C,GAA4BlqE,EAAAA,EAAAA,KAAaynD,IAC7C8gB,EAAiB9gB,KAChB,CAAC8gB,IAEE4B,GAA0BnqE,EAAAA,EAAAA,KAAa+C,IAC3CglE,EAAehlE,EAAE8G,OAAOqgC,WACvB,IAEGkgC,GAA8BpqE,EAAAA,EAAAA,KAAa+C,IAC/CklE,EAAqBllE,EAAE8G,OAAOqgC,WAC7B,IAEGmgC,GAAuBrqE,EAAAA,EAAAA,KAAa+C,IACxColE,EAAcplE,EAAE8G,OAAOqgC,WACtB,IAEGogC,GAAiBtqE,EAAAA,EAAAA,KAAa+C,IAChB,KAAdA,EAAEwnE,SACJrB,MAED,CAACA,IAEEsB,GAAmBxqE,EAAAA,EAAAA,KAAY,KACnC,GAAIwoE,IAAcb,EAAS7hC,OAAOznC,OAChC,OAAO4B,EAAK,+BAIb,CAACuoE,EAAWvoE,EAAM0nE,IAEf8C,GAAkBzqE,EAAAA,EAAAA,KAAashB,IACnC,MAAM8nD,EAAiBp3C,EAAQpO,KAAKylD,GAAMA,EAAEvjC,SAAQ5jB,QAAQmnD,GAAMA,EAAEhrE,SACpE,GAAImqE,GAAaY,EAAe/qE,OAAS,IAAM2zB,EAAQ1Q,GAAOwkB,OAAOznC,OACnE,OAAO4B,EAAK,8BAGb,CAACuoE,EAAWvoE,EAAM+xB,IAqBrB,SAAS04C,IACP,OAAO14C,EAAQpO,KAAI,CAACizC,EAAQv1C,IAC1B,0BAAK3gB,UAAU,kBACb,mBAACqiB,GAAA,EAAD,CACE8O,MAAOxQ,IAAU0Q,EAAQ3zB,OAAS,GA7NlB,KA6NuB2zB,EAAQ3zB,OAC3C4B,EAAK,cACLA,EAAK,wBACTsmB,MAAOkkD,EAAgBnpD,GACvB1Q,MAAOimD,EACPl8C,SAAW5X,GAAMinE,EAAa1oD,EAAOve,EAAEgH,cAAc6G,OACrD+5D,WAAYL,IAEbhpD,IAAU0Q,EAAQ3zB,OAAS,GAC1B,mBAACkC,EAAA,EAAD,CACEI,UAAU,uBACVH,OAAK,EACLE,MAAM,cACND,KAAK,UACLK,UAAWb,EAAK,UAChBY,QAAS,IAAMopE,EAAa3oD,IAE5B,wBAAG3gB,UAAU,mBAoBvB,OACE,mBAACyiB,GAAA,EAAD,CAAO9iB,OAAQA,EAAQ4G,QAASo8D,EAASjgD,OA3DvC,0BAAK1iB,UAAU,0BACb,mBAACJ,EAAA,EAAD,CAAQC,OAAK,EAACE,MAAM,cAAcD,KAAK,UAAUK,UAAU,uBAAuBD,QAASyiE,GACzF,wBAAG3iE,UAAU,gBAEf,0BAAKA,UAAU,eAAeV,EAAK,YACnC,mBAACM,EAAA,EAAD,CACEG,MAAM,UACND,KAAK,UACLE,UAAU,sBACVE,QAASqoE,GAERjpE,EAAK,YAgDqDU,UAAU,aACzE,mBAACqiB,GAAA,EAAD,CACE5c,IAAKohE,EACL11C,MAAO7xB,EAAK,gBACZ2Q,MAAO+2D,EACPphD,MAAOikD,IACP7vD,SAAW5X,GAAM6kE,EAAY7kE,EAAEgH,cAAc6G,OAC7C+5D,WAAYL,IAEd,0BAAK3pE,UAAU,oBAEf,0BAAKA,UAAU,6BAA6ByF,IAAKqhE,GAC/C,yBAAI9mE,UAAU,kBAAkBV,EAAK,gBAEpCuoE,GAvBP,WACE,MAAMY,EAAiBp3C,EAAQpO,KAAKylD,GAAMA,EAAEvjC,SAAQ5jB,QAAQmnD,GAAMA,EAAEhrE,SAEpE,OAAO6pE,KAAgBI,IAAkBc,EAAexuD,OAAO0tD,MAC7D,wBAAG3nE,UAAU,SAASV,EAAK,6BAmBX2qE,GACb1C,EACC,mBAACn2C,GAAA,EAAD,CACEjQ,KAAK,gBACLkQ,QA/BD04C,IACJ9mD,KAAI,CAACkO,EAAOxQ,KAAR,CAAqB1Q,MAAOmZ,OAAOzI,GAAQwQ,MAAAA,EAAO+4C,OAAQvpD,IAAU0Q,EAAQ3zB,OAAS,MA+BpFsc,SAAUuvD,IAGZQ,KAKJ,0BAAK/pE,UAAU,oBAEf,0BAAKA,UAAU,aACb,mBAACspC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,iBACZiqC,QAAS49B,EACTntD,SAAUwvD,IAEZ,mBAAClgC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,gBACZiqC,QAAS89B,EACTxtD,SAAU0tD,EACVvtD,SAAUyvD,IAEZ,mBAACngC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,YACZiqC,QAASg+B,EACT1tD,SAAUwtD,EACVrtD,SAAU0vD,IAEXnC,GACC,sCACE,yBAAIvnE,UAAU,kBAAkBV,EAAK,6BACrC,0BACEmG,IAAKshE,EACL/mE,UAAU,eACV6+D,iBAAe,EACfv8D,IAAI,OACJ0X,SAAW5X,GAAMslE,EAAYtlE,EAAEgH,cAAc6+D,aAE/C,0BAAKjoE,UAAU,QAAQV,EAAK,qC,qCC1UxC,MAmBA,IAAexB,EAAAA,EAAAA,KAnBmB,IAA+B,IAA9B,MAAEqsE,EAAF,MAASx7B,EAAT,QAAgBzuC,GAAc,EAC/D,MAAMi0B,GAAc90B,EAAAA,EAAAA,KAAa+C,IAE/BA,EAAEsH,iBAEFxJ,EAAQiqE,EAAMC,OAAQD,EAAM5tE,MAC3B,CAAC4tE,EAAOjqE,IAEX,OACE,0BACEF,UAAY,gBAAc2uC,EAAQ,QAAU,IAC5C32B,YAAamc,EACbvN,MAAQ,IAAGujD,EAAME,MAAM,OAEtBC,EAAAA,GAAqBH,EAAMC,OAAS,0BAAK5uE,IAAM,kBAAiB2uE,EAAM7yD,YAAazI,IAAI,GAAG07D,QAAQ,aCsDzG,IAAezsE,EAAAA,EAAAA,KAvDqB,IAE9B,IAF+B,SACnC0sE,EADmC,MACzB7pD,EADyB,UAClB8pD,EADkB,oBACP5qC,EADO,aACcx3B,EADd,cAC4Bk+D,GAC3D,EAEJ,MAAM9gE,GAAM1B,EAAAA,EAAAA,IAAuB,OAEnC2mE,EAAAA,GAAAA,IAAejlE,EAAKo6B,GAEpB,MAAMt3B,GAAuByoC,EAAAA,GAAAA,GAAmB3oC,GAE1C/I,GAAOC,EAAAA,EAAAA,KAEPorE,EAAevqE,EAAAA,GACjBM,KAAKoC,OAAOka,EAAAA,EAAAA,MAAiBvY,MAzBF,GAyBhB,IA3BiB,EA6B1B/C,EAAS,GAAAhB,KAAKkqE,KAAKJ,EAASlE,OAAO5oE,OAASitE,GAElD,OACE,0BACEllE,IAAKA,EACLgE,IAAK+gE,EAASjuE,GACdA,GAAK,kBAAiBokB,IACtB3gB,UAAU,cAEV,wBAAGA,UAAU,kBAAkBsC,IAAI,QAChChD,EAAqB,WAAhBkrE,EAASjuE,GAAkB,iBAAoB,QAAOokB,MAE9D,0BACE3gB,WAAWmC,EAAAA,EAAAA,GAAe,uBAAwBoG,GAClDtL,MAAQ,WAAUyE,OAClBY,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAEzBoI,GAAgBmiE,EAASlE,OAAOrjD,KAAK9B,IACpC,MAAMgpD,EAAQM,EAAUtpD,GAExB,IAAKgpD,EACH,OAIF,MAAMU,EAAiB,OAAQV,EAAQA,EAAQA,EAAM,GAErD,OACE,mBAAC,GAAD,CACE1gE,IAAKohE,EAAetuE,GACpB4tE,MAAOU,EACP3qE,QAASqmE,YChCjBuE,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAUHC,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GAuKJ,UAAe7tE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuB+nB,EAAAA,GAAAA,IAAK/nB,EAAQ,CAAC,kBADpBD,EArK2B,IAEzC,IAF0C,UAC9CiC,EAD8C,cACnCumE,EADmC,aACpBlE,GACtB,EAEJ,MAAMjzD,GAAerL,EAAAA,EAAAA,IAAuB,MAEtC6nE,GAAY7nE,EAAAA,EAAAA,IAAuB,OAElC8nE,EAAYC,IAAiBxqE,EAAAA,EAAAA,OAC7BglE,EAAQyF,IAAazqE,EAAAA,EAAAA,OACrB0qE,EAAqBC,IAA0B3qE,EAAAA,EAAAA,IAAS,IAEvDy9B,QAASc,IAAwBZ,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS9vB,EACT+vB,WAtB0B,MAuBxB+sC,IACFA,EAAQ97B,SAAS+7B,IACf,MAAM,GAAE5vE,GAAO4vE,EAAMjjE,OACrB,IAAK3M,IAAOA,EAAG4gC,WAAW,mBACxB,OAGF,MAAMxc,EAAQ1G,OAAO1d,EAAGqwB,QAAQ,kBAAmB,KACnD4+C,GAAsB7qD,GAASwrD,EAAMv7B,kBAGvC,MAAMw7B,EAA0BZ,GAC7BvoD,KAAI,CAAC2tB,EAAgBjwB,KAAjB,CAA8BA,MAAAA,EAAOiwB,eAAAA,MACzCrvB,QAAO,QAAC,eAAEqvB,GAAH,SAAwBA,KAE7Bw7B,EAAwB1uE,QAI7BuuE,EAAuBG,EAAwB1rE,KAAKoC,MAAMspE,EAAwB1uE,OAAS,IAAIijB,WAGjG0Z,EAAAA,GAAAA,GAAoBuxC,EAAU1nE,SAAU9D,EAAAA,KAGxCmB,EAAAA,EAAAA,KAAU,KACR,IAAKsqE,EACH,OAGF,MAAMnpD,EAASkpD,EAAU1nE,QACzB,IAAKwe,EACH,OAGF,MAAM2pD,EA3DkB,GA2DRL,EAA4CtpD,EAAOm2B,YAAc,EAAIyzB,IAErFC,EAAAA,GAAAA,GAA2B7pD,EAAQ2pD,KAClC,CAACR,EAAYG,IAEhB,MAAM1sE,GAAOC,EAAAA,EAAAA,KAEPitE,GAAgB/sE,EAAAA,EAAAA,KAAQ,KAC5B,IAAKosE,EACH,OAAOzuC,GAAAA,EAET,MAAMqvC,EAAkB,IAAIZ,GAS5B,OARIxJ,MAAAA,GAAAA,EAAc3kE,QAChB+uE,EAAgBC,QAAQ,CACtBnwE,GAAI,SACJ4kB,KAAM7hB,EAAK,kBACXgnE,OAAQjE,IAILoK,IACN,CAACZ,EAAYvsE,EAAM+iE,KAGtB9gE,EAAAA,EAAAA,KAAU,KACR6C,YAAW,KACT,MAAMuoE,EAAO,KACXb,EAAcH,GAAUE,YAExBE,EAAUJ,GAAUrF,SAGlBqF,GACFgB,IAuERv0B,iBAQE,OAPKqzB,KACHA,GAAmB,mCACnBC,UAAsBD,IAAkBmB,QAExCjB,IAAYkB,EAAAA,GAAAA,IAAgBnB,KAGvBD,GA7EDqB,GACGx1C,KAAKq1C,KAnGa,OAsGxB,IAEH,MAAMI,GAAiB1tE,EAAAA,EAAAA,KAAashB,IAClCsrD,EAAuBtrD,GACvB,MAAMqsD,EAAajyE,SAASgkB,eAAgB,kBAAiB4B,MAC7Dy/C,EAAAA,GAAAA,GAAiBhxD,EAAalL,QAAU8oE,EAAY,QAxGnC,GADU,OA0G1B,IAEGC,GAAoB5tE,EAAAA,EAAAA,KAAY,CAAC8qE,EAAehpD,KACpDolD,EAAc4D,EAAOhpD,KACpB,CAAColD,IAEElnC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAI4tC,EAAAA,IAmB1CC,GAAqBhrE,EAAAA,EAAAA,GAAe,cAAenC,GAEzD,OAAKsmE,GAAWjnC,EASd,0BAAKr/B,UAAWmtE,GACd,0BAAK1nE,IAAKmmE,EAAW5rE,UAAU,qBAAqBsC,IAAKhD,EAAK2hB,MAAQ,MAAQ,IAC3EurD,EAAcvpD,KA9BrB,SAA8BunD,EAA6B7pD,GACzD,MAAMlgB,EAAOqqE,GAAkBN,EAASjuE,IAExC,OAAOkE,GACL,mBAACb,EAAA,EAAD,CACEI,UAAY,sBAAoB2gB,IAAUqrD,EAAsB,YAAc,IAC9EnsE,OAAK,EACLutE,OAAK,EACLrtE,MAAM,cACNG,QAAS,IAAM6sE,EAAepsD,GAC9BxgB,UAAWqqE,EAASrpD,MAEpB,wBAAGnhB,UAAWS,SAoBhB,0BACEgF,IAAK2J,EACLpP,WAAWmC,EAAAA,EAAAA,GAAe,gCAAiCyE,EAAAA,GAAe,eAAiB,kBAE1F4lE,EAAcvpD,KAAI,CAACunD,EAAUtnD,IAC5B,mBAAC,GAAD,CACEsnD,SAAUA,EACV7pD,MAAOuC,EACPunD,UAAWnE,EACXzmC,oBAAqBA,EACrBx3B,aAAc2jE,GAAuB9oD,EAAI,GAAK8oD,GAAuB9oD,EAAI,EACzEqjD,cAAe0G,QAtBrB,0BAAKjtE,UAAWmtE,GACd,mBAAC3pD,GAAA,EAAD,W,eCtKR,MACM6pD,GAAiBjtE,EAAAA,GAA0B,EAAI,GAqDrD,IAAetC,EAAAA,EAAAA,KAlDkB,IAQ3B,IAR4B,WAChC6yC,EADgC,YAEhC28B,EAFgC,MAGhC3sD,EAHgC,oBAIhCkf,EAJgC,aAKhCx3B,EALgC,gBAMhCklE,EANgC,gBAOhCC,GACI,EAEJ,MAAM/nE,GAAM1B,EAAAA,EAAAA,IAAuB,OAEnC2mE,EAAAA,GAAAA,IAAejlE,EAAKo6B,GAEpB,MAAMt3B,GAAuByoC,EAAAA,GAAAA,GAAmB3oC,GAE1ColE,EAAiBrtE,EAAAA,GACnBM,KAAKoC,OAAOka,EAAAA,EAAAA,MAAiBvY,MAnBF,IAmBuCipE,EAAAA,EAAsBL,KArB1D,EAuB5B3rE,EAAShB,KAAKkqE,KAAKj6B,EAAW1b,MAAQw4C,IAAmBC,EAAAA,EAAsBL,IAErF,OACE,0BACE5nE,IAAKA,EACLgE,IAAKknC,EAAWp0C,GAChBA,GAAK,eAAcokB,IACnB3gB,UAAU,cAEV,wBAAGA,UAAU,mBAAmB2wC,EAAW/pB,OAC3C,0BACE5mB,WAAWmC,EAAAA,EAAAA,GAAe,uBAAwBoG,GAClDtL,MAAQ,WAAUyE,QAEjB2G,GAAgBsoC,EAAWW,UAAYX,EAAWW,SAASruB,KAAK0uB,GAC/D,mBAACD,GAAA,EAAD,CACEjoC,IAAKkoC,EAAQp1C,GACbo1C,QAASA,EACT7xC,KAAM4tE,EAAAA,EACN7tC,oBAAqBA,EACrB8tC,WAAYL,EACZptE,QAASqtE,EACTnvC,SAAUuT,EACVi8B,cAAiC,aAAlBj9B,EAAWp0C,GAAoBixE,OAAkBvtE,WCnBtE4tE,GAAqC,GAoO3C,IAAe/vE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJk0C,EADI,MAEJH,EAFI,OAGJg5B,EAHI,SAIJ+C,GACE9vE,EAAOszC,SAEX,MAAO,CACLy8B,eAAgBhD,EAAOz5B,SACvB08B,iBAAkBF,EAASx8B,SAC3BW,gBAAiBC,EACjB+7B,YAAal8B,EAAMC,OACnBk8B,WAAYlwE,EAAOmc,SAASC,MAAMo4B,sBAdpBz0C,EAlO6B,IAY3C,IAZ4C,OAChD2M,EADgD,SAEhDC,EAFgD,UAGhD3K,EAHgD,YAIhDstE,EAJgD,gBAKhD5S,EALgD,eAMhDqT,EANgD,iBAOhDC,EAPgD,YAQhDC,EARgD,gBAShDh8B,EATgD,WAUhDi8B,EAVgD,gBAWhDX,GACI,EACJ,MAAM,mBACJY,EADI,iBAEJC,EAFI,cAGJ5W,IACEz4D,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,MAEtC6nE,GAAY7nE,EAAAA,EAAAA,IAAuB,OAClCsqE,EAAgBC,IAAqBhtE,EAAAA,EAAAA,IAAiB,GACvDitE,GAAoBC,EAAAA,GAAAA,GAAqB9jE,EAAQC,IAE/Co0B,QAASc,IAAwBZ,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS9vB,EACT+vB,WAhCkC,MAiChC+sC,IACFA,EAAQ97B,SAAS+7B,IACf,MAAM,GAAE5vE,GAAO4vE,EAAMjjE,OACrB,IAAK3M,IAAOA,EAAG4gC,WAAW,gBACxB,OAGF,MAAMxc,EAAQ1G,OAAO1d,EAAGqwB,QAAQ,eAAgB,KAChDihD,GAAwBltD,GAASwrD,EAAMv7B,kBAGzC,MAAMw7B,EAA0ByB,GAC7B5qD,KAAI,CAAC2tB,EAAgBjwB,KAAjB,CAA8BA,MAAAA,EAAOiwB,eAAAA,MACzCrvB,QAAO,QAAC,eAAEqvB,GAAH,SAAwBA,KAE7Bw7B,EAAwB1uE,QAI7B4wE,EAAkBlC,EAAwB1rE,KAAKoC,MAAMspE,EAAwB1uE,OAAS,IAAIijB,WAEpFoe,QAAS4T,IAAiC1T,EAAAA,GAAAA,IAAwB,CAAEC,QAAS0sC,IAE/EtsE,GAAOC,EAAAA,EAAAA,KAEPkvE,EAAiBtnE,QAAQ8mE,GAEzBS,GAAUjvE,EAAAA,EAAAA,KAAQ,IACjBwuE,EAIE,CACL,CACE1xE,GAAI,SACJqqB,MAAOtnB,EAAK,kBACZgyC,SAAUy8B,EACV94C,MAAO84C,EAAerwE,QAExB,CACEnB,GAAI,WACJqqB,MAAOtnB,EAAK,oBACZgyC,SAAU08B,EACV/4C,MAAO+4C,EAAiBtwE,WAEvBuwE,EAAYhrD,KAAK1mB,GAAO01C,EAAgB11C,KAAKglB,OAAOpa,UAhBhDi2B,GAAAA,GAkBR,CAAC6wC,EAAa3uE,EAAMyuE,EAAgBC,EAAkB/7B,IAEnD08B,GAAkBlvE,EAAAA,EAAAA,KAAQ,IAC9BgvE,GAC4D,IAAzDC,EAAQntD,QAAQqtD,IAAD,uBAASA,EAAIt9B,gBAAb,aAAS,EAAc5zC,UAAQA,QAChD,CAACgxE,EAASD,KAEbltE,EAAAA,EAAAA,KAAU,KACJ+rE,IACFa,IACAI,EAAkB,CAAEx0D,KAAM,qBAE3B,CAACuzD,EAAaa,EAAoBI,KAErCl0C,EAAAA,GAAAA,GAAoBuxC,EAAU1nE,UAG9B3C,EAAAA,EAAAA,KAAU,KACR,IAAKktE,EACH,OAGF,MAAM/rD,EAASkpD,EAAU1nE,QACzB,IAAKwe,EACH,OAGF,MAAM2pD,EA5GkB,GA4GRgC,GAAwC3rD,EAAOm2B,YAAc,EAAIyzB,KAEjFC,EAAAA,GAAAA,GAA2B7pD,EAAQ2pD,KAClC,CAACoC,EAAgBJ,IAEpB,MAAM1T,GAAmBt7D,EAAAA,EAAAA,KAAashB,IACpC2tD,EAAkB3tD,GAClB,MAAMkuD,EAAe9zE,SAASgkB,eAAgB,eAAc4B,MAC5Dy/C,EAAAA,GAAAA,GAAiBhxD,EAAalL,QAAU2qE,EAAc,aAAS5uE,EArHpC,OAsH1B,IAEG6uE,GAAsBzvE,EAAAA,EAAAA,KAAasyC,IACvC47B,EAAgB57B,GAChBy8B,EAAiB,CAAEz8B,QAAAA,MAClB,CAACy8B,EAAkBb,IAEhBwB,GAAsB1vE,EAAAA,EAAAA,KAAasyC,IACvC6lB,EAAc,CAAE7lB,QAAAA,MACf,CAAC6lB,IAEExuD,GAAkB3J,EAAAA,EAAAA,KAAY,KAClCkvE,EAAkB,CAAEx0D,KAAM,oBACzB,CAACw0D,IAEElvC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAqD1CyvC,GAAgB7sE,EAAAA,EAAAA,GAAe,gBAAiBnC,GAEtD,OAAKyuE,GAAmBpvC,IAAqBsvC,GAAoBjU,EAe/D,0BAAK16D,UAAWgvE,GACd,0BACEvpE,IAAKmmE,EACL5rE,UAAU,kDAET0uE,EAAQzrD,KAzEf,SAAqB0tB,EAAgChwB,GAAe,MAClE,MAAM4wB,EAAY,UAAGZ,EAAWW,gBAAd,aAAG,EAAsB,GACrC29B,GAAkB9sE,EAAAA,EAAAA,GACtB,uCACAwe,IAAU0tD,GAAkB,aAG9B,MAAsB,WAAlB19B,EAAWp0C,IAAqC,aAAlBo0C,EAAWp0C,IAAqBo0C,EAAWQ,eAAiBI,EAE1F,mBAAC3xC,EAAA,EAAD,CACE6J,IAAKknC,EAAWp0C,GAChByD,UAAWivE,EACX9uE,UAAWwwC,EAAW/pB,MACtB/mB,OAAK,EACLutE,MAAyB,WAAlBz8B,EAAWp0C,IAAqC,aAAlBo0C,EAAWp0C,GAChDwD,MAAM,cACNG,QAAS,IAAMy6D,EAAiBh6C,IAEb,WAAlBgwB,EAAWp0C,GACV,wBAAGyD,UAAU,gBACO,aAAlB2wC,EAAWp0C,GACb,wBAAGyD,UAAU,kBACX2wC,EAAWa,SACb,mBAAC,GAAD,CACEb,WAAYA,EACZ9Q,oBAAqB8S,IAGvB,mBAAC,GAAD,CACEhC,WAAYA,EACZ9Q,oBAAqB8S,KAO3B,mBAACjB,GAAA,EAAD,CACEjoC,IAAKknC,EAAWp0C,GAChBo1C,QAASJ,EACTzxC,KAAM4wC,EAAAA,GACN9pB,MAAO+pB,EAAW/pB,MAClB5mB,UAAWivE,EACXpvC,oBAAqB8S,EACrBzyC,QAASy6D,EACTv8B,SAAUzd,QA8Bd,0BACElb,IAAK2J,EACLvF,YAAab,EACbhJ,WAAWmC,EAAAA,EAAAA,GAAe,kCAAmCyE,EAAAA,GAAe,eAAiB,kBAE5F8nE,EAAQzrD,KAAI,CAAC0tB,EAAYztB,IACxB,mBAAC,GAAD,CACEzZ,IAAKknC,EAAWp0C,GAChBo0C,WAAYA,EACZ28B,YAAanmE,QAAQ+mE,GAAcZ,GACnC3sD,MAAOuC,EACP2c,oBAAqBA,EACrBx3B,aAAcgmE,GAAkBnrD,EAAI,GAAKmrD,GAAkBnrD,EAAI,EAC/DqqD,gBAAiBuB,EACjBtB,gBAAiBuB,QAlCvB,0BAAK/uE,UAAWgvE,GACZtU,EAEEiU,EACF,0BAAK3uE,UAAU,mBAAmBV,EAAK,eAEvC,mBAACkkB,GAAA,EAAD,MAJA,0BAAKxjB,UAAU,mBAAmBV,EAAK,wC,iOCpNjD,MAgFA,IAAexB,EAAAA,EAAAA,KAhFiB,IAE1B,YAF2B,IAC/BoxE,EAD+B,oBAC1BrvC,EAD0B,WACLm7B,EADK,UACOh7D,EADP,QACkBE,GAC7C,EAEJ,MAAMuF,GAAM1B,EAAAA,EAAAA,IAAuB,MAE7B2C,GAAW3C,EAAAA,EAAAA,IAAyB,MAEpCotC,EAAehqC,QAAO,UAAC+nE,EAAIh5B,iBAAL,aAAC,EAAeC,SACtCJ,EAAkB,MAAKm5B,EAAI3yE,KAE3B+wE,GADiBz8B,EAAAA,GAAAA,IAAkBprC,EAAKo6B,KACPm7B,EACjC9tD,GAAiBH,EAAAA,EAAAA,GAAU,GAAEgpC,YAA0Bu3B,EAAatgE,EAAAA,GAAAA,SACpEgpC,GAAWC,EAAAA,GAAAA,GAAa,UAACi5B,EAAIh5B,iBAAL,aAAC,EAAeC,QAAShvC,QAAQ+F,IACzDiiE,GAAYpiE,EAAAA,EAAAA,GAASgpC,GAAiBu3B,EAAatgE,EAAAA,GAAAA,SACnDoiE,EAAoBjoE,QAAQmmE,GAAe6B,IAC3C,WAAEjnE,EAAF,kBAAcC,IAAsBC,EAAAA,EAAAA,IAAa,GACjDE,EAAsBglE,IAAgBplE,EACtCmnE,EAAe/B,GAAeplE,GAEpCa,EAAAA,EAAAA,GAAgBrC,EAAU,CAAC0oE,IAE3B,MAAMj7C,GAAc90B,EAAAA,EAAAA,KAClB,IAAMa,EAAQ,IACTgvE,EACH5hE,QAAS6hE,KAEX,CAACjvE,EAASgvE,EAAKC,IAGXH,GAAgB7sE,EAAAA,EAAAA,GACpB,YACA+sE,EAAIzqE,OAASyqE,EAAIxtE,QAAUwtE,EAAIzqE,MAAQyqE,EAAIxtE,OAAS,WAAa,aACjEq0C,EACA/1C,GAGF,OACE,0BACEyF,IAAKA,EACLzF,UAAWgvE,EACXh3D,YAAas3D,GAAAA,EACbpvE,QAASi0B,GAERgd,GACC,6BACE1rC,IAAKuwC,EACLh2C,UAAU,YAEV/C,MAAOoyE,EAAe,sBAAmBpvE,IAG5CiN,IAAmBmiE,GAClB,0BACE7zE,IAAK0R,EACL2B,IAAI,GACJ7O,UAAU,YAGbovE,GACC,+BACE3pE,IAAKiB,EACLqD,UAAQ,EACRE,MAAI,EACJC,OAAK,EACLF,aAAW,EACXulE,QAAQ,QAEJpnE,GAEJ,6BAAQ3M,IAAK2zE,KAGhB7mE,GACC,mBAACqG,EAAA,EAAD,CAAS5O,MAAOmN,GAAkBikC,EAAe,QAAU,cCnBnE,IAAerzC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLwxE,UAAWxxE,EAAOyxE,KAAKC,MAAMD,QAHf1xE,EAlDyB,IAMvC,IANwC,UAC5CiC,EAD4C,YAE5CstE,EAF4C,YAG5CqC,EAH4C,UAI5CH,EAJ4C,YAK5CI,GACI,EACJ,MAAM,cAAEC,IAAkB9wE,EAAAA,EAAAA,MAGpBqQ,GAAerL,EAAAA,EAAAA,IAAuB,OAG1Cg7B,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS9vB,EAAc0gE,WAhBzB,OAkB5BvuE,EAAAA,EAAAA,KAAU,KACJ+rE,GACFuC,MAED,CAACvC,EAAauC,IAEjB,MAAMxwC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAEhD,OACE,0BACE95B,IAAK2J,EACLpP,WAAWmC,EAAAA,EAAAA,GAAe,YAAanC,EAAW4G,EAAAA,GAAe,eAAiB,kBAEhF+oE,EAEEtwC,GAAqBmwC,GAAaA,EAAU9xE,OAC9C8xE,EAAUvsD,KAAKisD,GACb,mBAAC,GAAD,CACEzlE,IAAKylE,EAAI3yE,GACT2yE,IAAKA,EACLrvC,oBAAqBA,EACrBm7B,YAAasS,EACbptE,QAAS0vE,MAGXvwC,GAAqBmwC,EACvB,0BAAKxvE,UAAU,mBAAf,kBAEA,mBAACwjB,GAAA,EAAD,MAdA,0BAAKxjB,UAAU,mBAAf,kDChDD,IAAK+vE,I,SAAAA,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,KAAAA,GAAAA,KAQL,MAAMC,GAAyBjzE,OAAO8tD,OAAOklB,IACjDxuD,QAAQtR,GAA4C,iBAAVA,IAEvCggE,GAAwB,CAC5B,CAACF,GAAeG,OAAQ,aACxB,CAACH,GAAeI,UAAW,gBAC3B,CAACJ,GAAeK,MAAO,aAkEzB,IAAetyE,EAAAA,EAAAA,KA/DwB,IAEjC,IAFkC,UACtCwjC,EADsC,YAC3BQ,EAD2B,eACduuC,EADc,aACEC,GACpC,EACJ,MAAMhxE,GAAOC,EAAAA,EAAAA,KAEb,SAASgxE,EAAgB7uC,GACvB,OACE,mBAAC9hC,EAAA,EAAD,CACEI,UAAY,sBAAoBshC,IAAcI,EAAM,YAAc,IAClExhC,QAAS,IAAM4hC,EAAYJ,GAC3BvhC,UAAW6vE,GAAuBtuC,GAClC7hC,OAAK,EACLutE,OAAK,EACLrtE,MAAM,eAEN,wBAAGC,UAAWiwE,GAAsBvuC,MAK1C,MAAM8uC,GAAmBnxE,EAAAA,EAAAA,KAAY,KACnCixE,EAAahvC,IAAcyuC,GAAeI,SAAW,WAAa,UACjE,CAAC7uC,EAAWgvC,IAMf,OACE,0BAAKtwE,UAAU,oBAAoBE,QALrC,SAAyBqS,GACvBA,EAAMlQ,mBAIuDC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACpFqhC,IAAcyuC,GAAeG,OAC5B,mBAACtwE,EAAA,EAAD,CACEI,UAAU,uBACVG,UAAWmhC,IAAcyuC,GAAeI,SAAW,kBAAoB,cACvEtwE,OAAK,EACLutE,OAAK,EACLrtE,MAAM,cACNG,QAASswE,GAET,wBAAGxwE,UAAU,iBAIhBuwE,EAAgBR,GAAeG,OAC/BK,EAAgBR,GAAeI,UAC/BI,EAAgBR,GAAeK,MAE/B9uC,IAAcyuC,GAAeG,OAC5B,mBAACtwE,EAAA,EAAD,CACEI,UAAU,uBACVE,QAASmwE,EACTlwE,UAAU,gBACVN,OAAK,EACLutE,OAAK,EACLrtE,MAAM,eAEN,wBAAGC,UAAU,0BCvCvB,IAAIswD,IAAc,EAElB,MAgMA,IAAexyD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLyyE,kBAAmBzyE,EAAOyyE,qBAHZ1yE,EAhM0B,IAexC,IAfyC,OAC7C2M,EAD6C,SAE7CC,EAF6C,OAG7ChL,EAH6C,gBAI7C+6D,EAJ6C,YAK7CiV,EAL6C,kBAM7Cc,EAN6C,OAO7Cz4C,EAP6C,QAQ7CzxB,EAR6C,cAS7CggE,EAT6C,gBAU7CgH,EAV6C,YAW7CqC,EAX6C,eAY7CS,EAZ6C,aAa7CC,EAb6C,eAc7C9N,GACI,EACJ,MAAOlhC,EAAWC,IAAgBjgC,EAAAA,EAAAA,IAAiB,IAC5C+gE,EAAcqO,IAAmBpvE,EAAAA,EAAAA,IAAmB,KAEpDqvE,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAelxE,EAAQ4G,OAAStG,EAAWG,EAAAA,KAClF,aAAEiI,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9I,EAAQ4G,GAAS,GAAO,IAEpF+pD,IAAe3wD,IAClB2wD,IAAc,IAGhB/uD,EAAAA,EAAAA,KAAU,KACRy2B,MACC,CAACA,KAEJ5wB,EAAAA,EAAAA,KAAgB,KACd,GAAKhH,EAAAA,GASL,OALIT,IACF5E,SAASuJ,KAAKrJ,UAAUC,IAAI,iCAC5BH,SAASuJ,KAAKrJ,UAAUC,IAAI,wBAGvB,KACDyE,IACFmxE,EAAAA,EAAAA,KAAQ,KACN/1E,SAASuJ,KAAKrJ,UAAUsJ,OAAO,uBAC/BH,YAAW,KACTrJ,SAASuJ,KAAKrJ,UAAUsJ,OAAO,mCArEhB,WA0EtB,CAAC5E,IAEJ,MAAMoxE,GAAkBhtE,EAAAA,EAAAA,IAAOs+D,GAC/B0O,EAAgB7sE,QAAUm+D,GAC1B9gE,EAAAA,EAAAA,KAAU,KACHwvE,EAAgB7sE,QAAQxG,SAI7BqzE,EAAgB7sE,QAAQksC,SAASjvB,IAC/BqhD,EAAe,CAAE2H,MAAOhpD,OAG1BuvD,EAAgB,OACf,CAAC/wE,EAAQ2hC,EAAWkhC,IAEvB,MAAMyK,GAAoB5tE,EAAAA,EAAAA,KAAY,CAAC8qE,EAAehpD,KACpDuvD,GAAiBpK,GACR,IAAIA,EAAQnlD,KAGrBolD,EAAc4D,KACb,CAAC5D,IAEE5I,GAAet+D,EAAAA,EAAAA,KAAa0a,IAChCxT,IACA+pE,EAAav2D,KACZ,CAACxT,EAAS+pE,IAEPxB,GAAsBzvE,EAAAA,EAAAA,KAAasyC,IACvC47B,EAAgB57B,GAAS,KACxB,CAAC47B,IAEEjuE,GAAOC,EAAAA,EAAAA,KAEb,SAASyxE,EAAc1lE,EAAmBi/C,GACxC,OAAQjpB,GACN,KAAKyuC,GAAeG,MAClB,OACE,mBAAC,GAAD,CACElwE,UAAU,aACVumE,cAAe0G,IAGrB,KAAK8C,GAAeI,SAClB,OACE,mBAAC,GAAD,CACEnwE,UAAU,aACVstE,cAAa5S,GAAkB/6D,IAAW2L,GAAYi/C,GACtDmQ,gBAAiBA,EACjB6S,gBAAiBuB,EACjBpkE,OAAQA,EACRC,SAAUA,IAGhB,KAAKolE,GAAeK,KAClB,OACE,mBAAC,GAAD,CACEpwE,UAAU,aACVstE,cAAaqC,GAAchwE,IAAW2L,GAAYi/C,GAClDolB,YAAaA,EACbC,YAAaA,KAYvB,MAAMz+D,EACJ,sCACE,0BAAKnR,UAAU,kBAAkBE,QANrC,SAAyBqS,GACvBA,EAAMlQ,oBAMDiuD,IACC,mBAACh3C,EAAA,EAAD,CAAY6H,KAAK,QAAQD,UAAWogB,EAAWS,YAAaiuC,GAAuBtyE,QAChFszE,IAIN5wE,EAAAA,IACC,mBAACR,EAAA,EAAD,CACEC,OAAK,EACLutE,OAAK,EACLrtE,MAAM,cACNI,UAAWb,EAAK,SAChBU,UAAU,sBACVF,KAAK,OACLI,QAASqG,GAET,wBAAGvG,UAAU,gBAGjB,mBAAC,GAAD,CACEshC,UAAWA,EACXQ,YAAaP,EACb8uC,eAAgBA,EAChBC,aAAc3S,KAKpB,GAAIv9D,EAAAA,GAAyB,CAC3B,IAAKiI,EACH,OAGF,MAAMrI,GAAYmC,EAAAA,EAAAA,GAChB,yBACAoG,GACCkoE,GAAqB,sBAGxB,OACE,mBAAC5S,GAAA,EAAD,KACE,0BAAK79D,UAAWA,GACbmR,IAMT,OACE,mBAAC6kD,GAAA,EAAD,CACEr2D,OAAQA,EACRY,UAAU,OACVm1D,UAAU,SACVnvD,QAASA,EACTvG,UAAU,aACV4hB,oBAAqBrb,EACrBuqD,aAAelqD,EAAAA,QAAkC3G,EAAnB0wE,EAC9BM,aAAerqE,EAAAA,QAAkC3G,EAAnB2wE,EAC9BM,mBAAoBtqE,EAAAA,GACpBuqE,WAAS,GAERhgE,OCzJP,IAAerT,EAAAA,EAAAA,KA7DkB,IAE3B,IAF4B,OAChC6B,EADgC,eACxByxE,EADwB,eACRC,EADQ,aACQC,EADR,aACsBC,EADtB,QACoChrE,GAChE,EACJ,MAAOoqE,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAelxE,EAAQ4G,GAE9DkxC,GAAmBp4C,EAAAA,EAAAA,KAAY,CAAC+C,EAAUkhE,KAC9C,MAAM,MAAE5rB,GAAUt1C,EAAE8G,OAEhBwuC,GAASA,EAAMh6C,OAAS,GAC1B4zE,EAAa5S,MAAM5sD,KAAK4lC,GAAQ4rB,KAEjC,CAACgO,IAEEE,GAAoBnyE,EAAAA,EAAAA,KAAY,KACpC20C,GACE0qB,MAAM5sD,KAAKizD,EAAAA,IAA4Bx6D,KAAK,MAC3CnI,GAAMq1C,EAAiBr1C,GAAG,OAE5B,CAACq1C,IAEEg6B,GAAuBpyE,EAAAA,EAAAA,KAAY,KACvC20C,GAAsB,KAAM5xC,GAAMq1C,EAAiBr1C,GAAG,OACrD,CAACq1C,IAEEn4C,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACy2D,GAAA,EAAD,CACEr2D,OAAQA,EACR+xE,WAAS,EACTnxE,UAAU,QACVm1D,UAAU,SACVnvD,QAASA,EACTvG,UAAU,mBACV4hB,oBAAqBrb,EACrBuqD,aAAelqD,EAAAA,QAAkC3G,EAAnB0wE,EAC9BM,aAAerqE,EAAAA,QAAkC3G,EAAnB2wE,EAC9BM,mBAAoBtqE,EAAAA,KAMlBwqE,GACA,mBAAC5wE,EAAA,EAAD,CAAUR,UAAU,iBAAiB6Z,UAAQ,GAA7C,uDAEDu3D,GACC,sCACE,mBAAC5wE,EAAA,EAAD,CAAUC,KAAK,QAAQP,QAASsxE,GAC7BlyE,EAAK,gCAER,mBAACkB,EAAA,EAAD,CAAUC,KAAK,WAAWP,QAASuxE,GAAuBnyE,EAAK,oBAGlE+xE,GACC,mBAAC7wE,EAAA,EAAD,CAAUC,KAAK,OAAOP,QAASqxE,GAAejyE,EAAK,aC/B3D,IAAexB,EAAAA,EAAAA,KA1BkB,IAM3B,IAN4B,WAChC6zE,EADgC,MAEhChjC,EAFgC,WAGhCijC,EAHgC,IAIhCC,EAJgC,QAKhC3xE,GACI,EACJ,OACE,mBAACijB,GAAA,EAAD,CACE1Z,IAAKmoE,EAAWzU,QAChBn9D,WAAWmC,EAAAA,EAAAA,GAAe,6CAA8CwvE,GAAc,eACtFpmC,WAAS,EACTrrC,QAAS,IAAMA,EAAQ0xE,GACvBjjC,MAAOA,GAENgjC,GACC,mBAAC34D,GAAA,EAAD,CAAQlZ,KAAK,QAAQmZ,KAAM44D,IAE7B,0BAAK7xE,UAAU,iBACb,2BAAMA,UAAU,SAAhB,IAA0B4xE,EAAWzU,SACrC,2BAAMn9D,UAAU,aAAYmZ,EAAAA,GAAAA,GAAWy4D,EAAWhhD,mBCyD1D,IAAe9yB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAD,CACEknB,UAAWlnB,EAAOonB,MAAM1B,QAFR3lB,EApEiC,IAO/C,IAPgD,UACpDmnB,EADoD,OAEpDvlB,EAFoD,aAGpDm5B,EAHoD,YAIpDg5C,EAJoD,QAKpD5xE,EALoD,QAMpDqG,GACI,EACJ,MAAM,eAAEo2D,IAAmB59D,EAAAA,EAAAA,MAGrBqQ,GAAerL,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9I,OAAQM,OAAWA,GAAW,GAEzF8xE,GAAoB1yE,EAAAA,EAAAA,KAAY,IAAuC,IAAtC,MAAE2yE,EAAF,QAAS7U,GAA6B,EAC3E,MAAM0U,EAAM3sD,EAAU8sD,GACtBrV,EAAe,CACbQ,QAAU,IAAGA,IAAUrkC,GAAgB+4C,EAAO,IAAGA,EAAIltC,WAAa,KAClEqtC,MAAAA,IAEF9xE,MACC,CAACA,EAASy8D,EAAgBz3C,EAAW4T,IAElCm5C,EAAuB5R,GAAsB,CACjD/0D,SAAU3L,EACVijB,MAAOkvD,EACP75C,SAAU85C,EACVxrE,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACJuwE,IAAgBA,EAAYp0E,QAC9B6I,MAED,CAACurE,EAAavrE,KAEjBhF,EAAAA,EAAAA,KAAU,KACR0+D,GAAsB,uBAAwBgS,EAAsB7iE,KACnE,CAAC6iE,IAEJ,MAAMC,GAAex4D,EAAAA,EAAAA,GAAYo4D,GAAeA,EAAYp0E,OAASo0E,OAAc7xE,EAAWoI,GACxF8pE,EAAmBL,IAAgBA,EAAYp0E,OAASw0E,EAAeJ,EAE7E,IAAKzpE,GAAiB8pE,IAAqBA,EAAiBz0E,OAC1D,OAGF,MAAMsC,GAAYmC,EAAAA,EAAAA,GAChB,mDACAoG,GAGF,OACE,0BAAKvI,UAAWA,EAAWyF,IAAK2J,GAC7B+iE,GAAoBA,EAAiBlvD,KAAI,CAACmvD,EAAgBzxD,IACzD,mBAAC,GAAD,CACElX,IAAM,GAAE2oE,EAAeJ,SAASI,EAAejV,UAC/CyU,WAAYQ,EACZP,IAAK3sD,EAAUktD,EAAeJ,OAC9BL,YAAU,EACVzxE,QAAS6xE,EACTpjC,MAAOsjC,IAAyBtxD,WChC1C,IAAe7iB,EAAAA,EAAAA,KAvCsB,IAE/B,IAFgC,OACpC6B,EADoC,YAC5BmyE,EAD4B,QACfvrE,GACjB,EACJ,MAAM,eAAEo2D,IAAmB59D,EAAAA,EAAAA,OAEpB4xE,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAelxE,EAAQ4G,OAAStG,EAAWG,EAAAA,IAElF+zB,GAAc90B,EAAAA,EAAAA,KAAauyE,IAC/BjV,EAAe,CACbQ,QAAU,IAAGyU,EAAWzU,UACxB6U,MAAOJ,EAAWI,QAEpBzrE,MACC,CAACA,EAASo2D,IAEb,OACE,mBAAC3G,GAAA,EAAD,CACEr2D,OAAQA,EACRY,UAAU,OACVm1D,UAAU,SACVnvD,QAASA,EACTvG,UAAU,iBACV4hB,oBAAqBrb,EACrBuqD,aAAelqD,EAAAA,QAAkC3G,EAAnB0wE,EAC9BM,aAAerqE,EAAAA,QAAkC3G,EAAnB2wE,EAC9BM,mBAAoBtqE,EAAAA,GACpBuqE,WAAS,GAERW,EAAY7uD,KAAK2uD,GAChB,mBAAC,GAAD,CACEnoE,IAAKmoE,EAAWzU,QAChByU,WAAYA,EACZ1xE,QAASi0B,UCiDnB,IAAer2B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SAAEszC,GAAatzC,EAAOszC,SAAS+gC,SAErC,MAAO,CAAE/gC,SAAAA,KAJOvzC,EAlE8B,IAM5C,IAN6C,OACjD2M,EADiD,SAEjDC,EAFiD,OAGjDhL,EAHiD,gBAIjD4tE,EAJiD,SAKjDj8B,GACI,EACJ,MAAM,sBAAEghC,IAA0BvzE,EAAAA,EAAAA,MAG5BqQ,GAAerL,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9I,OAAQM,OAAWA,GAAW,GACzFsyE,GAAe74D,EAAAA,EAAAA,GAAY43B,GAAU,GACrCkhC,EAAoBlhC,GAAYihC,EAChChE,GAAoBC,EAAAA,GAAAA,GAAqB9jE,EAAQC,IAGrDo0B,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS9vB,EAAc+vB,WApBzB,OAsB5B59B,EAAAA,EAAAA,KAAU,IAAO5B,GAAS6gB,EAAAA,EAAAA,GAAsB8xD,QAAyBryE,GAAY,CAACN,EAAQ2yE,IAE9F,MAYMtyE,GAAYmC,EAAAA,EAAAA,GAChB,gDACAoG,IACEiqE,MAAAA,GAAAA,EAAmB90E,SAAW,UAGlC,OACE,0BACE+H,IAAK2J,EACLpP,UAAWA,EACX8wD,aAAelqD,EAAAA,QAAkC3G,EAtB5B,KACvBlF,SAASuJ,KAAKrJ,UAAUC,IAAI,cAsB1B+1E,aAAerqE,EAAAA,QAAkC3G,EAf5B,KACvBlF,SAASuJ,KAAKrJ,UAAUsJ,OAAO,cAe7BsF,YApBoB,KACtB0kE,EAAkB,CAAEx0D,KAAM,oBAqBvB1R,GAAgBmqE,EACfA,EAAkBvvD,KAAK0uB,GACrB,mBAACD,GAAA,EAAD,CACEjoC,IAAKkoC,EAAQp1C,GACbo1C,QAASA,EACT7xC,KAAM4tE,EAAAA,EACN7tC,oBAAqBA,EACrB3/B,QAASqtE,EACTnvC,SAAUuT,MAGZtpC,EACF,mBAACmb,GAAA,EAAD,WACEvjB,OCjDV,IAAenC,EAAAA,EAAAA,KA1BsB,IAE/B,IAFgC,OACpC6B,EADoC,eAC5B2lE,GAAiB,EADW,aACJ1C,EADI,eACU2C,EADV,QAC0Bh/D,EAD1B,oBACmCqb,GACnE,EACJ,MAAO+uD,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAelxE,EAAQ4G,GAE9DjH,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACy2D,GAAA,EAAD,CACEr2D,OAAQA,EACR+xE,WAAS,EACTnxE,UAAU,QACVm1D,UAAW4P,EAAiB,MAAQ,SACpCtlE,UAAU,iBACVuG,QAASA,EACTqb,oBAAqBA,EACrBkvC,aAAelqD,EAAAA,QAAkC3G,EAAnB0wE,EAC9BM,aAAerqE,EAAAA,QAAkC3G,EAAnB2wE,EAC9BM,mBAAoBtqE,EAAAA,IAEnBg8D,GAAgB,mBAACpiE,EAAA,EAAD,CAAUC,KAAK,OAAOP,QAAS0iE,GAAetjE,EAAK,qBACnEimE,GAAkB,mBAAC/kE,EAAA,EAAD,CAAUC,KAAK,WAAWP,QAASqlE,GAAiBjmE,EAAK,wB,qCCiBlF,MAsEA,IAAexB,EAAAA,EAAAA,KAtEoB,IAM7B,IAN8B,OAClC6B,EADkC,OAElC2mE,EAFkC,QAGlC//D,EAHkC,cAIlCggE,EAJkC,eAKlC/D,GACI,EAEJ,MAAMpzD,GAAerL,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9I,OAAQM,OAAWA,GAAW,GACzFwyE,GAAsBC,EAAAA,GAAAA,GAAuBpM,EAAO5oE,OAAS4oE,OAASrmE,EAhDvD,MAgDqF,GAEpG0yE,GAAoBtzE,EAAAA,EAAAA,KAAa8qE,IACrC5D,EAAc4D,EAAMC,QACpB5H,EAAe,CAAE2H,MAAOA,EAAM5tE,OAC7B,CAACimE,EAAgB+D,IAEdpyC,GAAc90B,EAAAA,EAAAA,KAAY,CAAC+qE,EAAgB7tE,KAC/CgqE,EAAc6D,GACd5H,EAAe,CAAE2H,MAAO5tE,MACvB,CAACimE,EAAgB+D,IAEdqM,EAAgBvS,GAAsB,CAC1C/0D,SAAU3L,EACV+/D,cAAc,EACd98C,MAAO0jD,EACPruC,SAAU06C,EACVpsE,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,MAlEZ,SAAwBof,EAAevR,GACrC,MAAMnT,EAAYmT,EAAalL,QAC/B,IAAKjI,EACH,OAGF,MAAM,eAAE6jE,EAAF,YAAkBD,GAAgBR,GACtCpjE,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAK4jE,EAAYniE,SAAWmiE,EAAYl/C,GACtC,OAEF,MAAMu/C,EAAQJ,EAAe,GAC7B,IAAKA,EAAetjE,SAASmkB,IACvBA,IAAUu/C,IAAUC,GAAelkE,EAAW4jE,EAAYK,IAAQ,GAAQ,CAC9E,MACMmM,EAAuB,UADZ1rD,EAAQm/C,EAAeA,EAAepiE,OAAS,GAAK,QAAU,OAxBxD,GAyBgBijB,EAA6B,GAEpE4rD,EAAAA,GAAAA,GAA2BtwE,EAAWowE,IA2CtCwG,CAAeD,EAAexjE,KAC7B,CAACwjE,IAEJ,MAQM5yE,GAAYmC,EAAAA,EAAAA,GAChB,gDACAoG,GAGF,OACE,0BACE9C,IAAK2J,EACLpP,UAAWA,EACX8wD,aAAelqD,EAAAA,QAAkC3G,EAjB5B,KACvBlF,SAASuJ,KAAKrJ,UAAUC,IAAI,cAiB1B+1E,aAAerqE,EAAAA,QAAkC3G,EAd5B,KACvBlF,SAASuJ,KAAKrJ,UAAUsJ,OAAO,eAe5B8D,GAAgBoqE,EACfA,EAAWxvD,KAAI,CAACknD,EAAOxpD,IACrB,mBAAC,GAAD,CACElX,IAAK0gE,EAAM5tE,GACX4tE,MAAOA,EACPx7B,MAAOikC,IAAkBjyD,EACzBzgB,QAASi0B,MAGX9rB,EACF,mBAACmb,GAAA,EAAD,WACEvjB,MC5DV,IAAenC,EAAAA,EAAAA,KAxCkB,IAQ3B,IAR4B,MAChC8oB,EADgC,YAEhCgK,EAFgC,UAGhCslB,EAHgC,SAIhC48B,EAJgC,MAKhCnkC,EALgC,qBAMhCpmC,EAAuB,GANS,QAOhCrI,GACI,EACAiR,EAA8B,GAElC,MAAM4hE,GAAmBhmE,EAAAA,EAAAA,GAASmpC,EAAa,eAAcA,EAAUjwC,WAAQhG,GAW/E,OAVA6yE,EAAWA,GAAYC,EAEnBD,EACF3hE,EACE,0BAAK3V,IAAKs3E,EAAU9yE,UAAWuI,EAAsBsG,IAAI,GAAGmkE,SAAS,QAAQ33E,UAAU,UAEhFurB,IACTzV,GAAU+/B,EAAAA,GAAAA,IAAgBtqB,EAAO,IAIjC,mBAACzD,GAAA,EAAD,CACEwrB,MAAOA,EACP3uC,UAAU,iCACVgY,YAAas3D,GAAAA,EACbpvE,QAASA,GAET,2BAAMF,UAAU,SACM,iBAAZmR,GAAuBgI,EAAAA,GAAAA,GAAWhI,GAAWA,GAEvD,0BAAKnR,UAAU,iBACZ4mB,GAAU,0BAAK5mB,UAAU,SAAS4mB,GAClCgK,GAAgB,0BAAK5wB,UAAU,eAAe4wB,QCavD,IAAe9yB,EAAAA,EAAAA,KAjDmB,IAE5B,UACA6N,EACAuqC,EACA+8B,GAL6B,MACjCtkC,EADiC,aAC1BukC,EAD0B,aACZC,EADY,QACEjzE,GAC/B,EAKA,UAAWizE,IACbxnE,EAAQwnE,EAAaxnE,OAGnB,cAAewnE,IACjBj9B,EAAYi9B,EAAaj9B,WAEvB,iBAAkBi9B,GAAgBD,IACpCD,EAAeE,EAAaF,cAG9B,MAAMF,GAAmBhmE,EAAAA,EAAAA,GAASkmE,EAAgB,eAAcA,EAAahtE,WAAQhG,GAC/E06B,GAAe5tB,EAAAA,EAAAA,GAASpB,GAAU,QAAOA,EAAMpP,aAC/CgM,GAAuByoC,EAAAA,GAAAA,GAAmBrW,GAE1CxG,GAAc90B,EAAAA,EAAAA,KAAY,KAC9Ba,EAAQizE,KACP,CAACA,EAAcjzE,IAEA,QAAlB,GAAIgzE,EACF,OACE,0BAAKlzE,UAAU,kCAAkCE,QAASi0B,GACxD,0BAAK34B,KAAK,UAACmQ,SAAD,iBAAC,EAAOuqC,iBAAR,aAAC,EAAkBC,UAAY48B,EAAkBlkE,IAAI,KAC/D,0BAAKrT,IAAKm/B,EAAc36B,WAAWmC,EAAAA,EAAAA,GAAe,aAAcoG,GAAuBsG,IAAI,MAKjG,MAAM,MAAE+X,EAAF,YAASgK,GAAgBuiD,EAE/B,OACE,mBAAC,GAAD,CACExkC,MAAOA,EACPmkC,SAAUn4C,IAA0B,QAAT,EAAAub,SAAA,eAAWC,UAAW48B,EACjDxqE,qBAAsBA,EACtBqe,MAAOA,EACPgK,YAAaA,EACb1wB,QAASi0B,OCjCf,IAAer2B,EAAAA,EAAAA,KApBqB,IAAsC,IAArC,MAAE6wC,EAAF,aAASwkC,EAAT,QAAuBjzE,GAAc,EACxE,MAAM,MACJ0mB,EADI,IACG3gB,EADH,YACQ2qB,EADR,aACqBqiD,GACvBE,EAEEh/C,GAAc90B,EAAAA,EAAAA,KAAY,KAC9Ba,EAAQizE,KACP,CAACA,EAAcjzE,IAElB,OACE,mBAAC,GAAD,CACEyuC,MAAOA,EACPuH,UAAW+8B,EACXrsD,MAAOA,GAAS3gB,EAChB2qB,YAAaA,EACb1wB,QAASi0B,OCYf,IAAer2B,EAAAA,EAAAA,KAvBiB,IAE1B,IAF2B,aAC/Bq1E,EAD+B,oBACjBtzC,EADiB,QACI3/B,GAC/B,EACJ,MAAM,IAAEgvE,GAAQiE,EAEVh/C,GAAc90B,EAAAA,EAAAA,KAAY,KAC9Ba,EAAQizE,KACP,CAACA,EAAcjzE,IAElB,GAAKgvE,EAIL,OACE,mBAAC,GAAD,CACEA,IAAKA,EACLrvC,oBAAqBA,EACrB7/B,UAAU,sBACVE,QAASi0B,OCCf,IAAer2B,EAAAA,EAAAA,KApBqB,IAAoD,IAAnD,aAAEq1E,EAAF,oBAAgBtzC,EAAhB,QAAqC3/B,GAAc,EACtF,MAAM,QAAEyxC,GAAYwhC,EAEpB,GAAKxhC,EAIL,OACE,mBAACD,GAAA,EAAD,CACEC,QAASA,EACT7xC,KAAMszE,EAAAA,GACNvzC,oBAAqBA,EACrBjZ,MAAO+qB,EAAQw4B,MACfnqE,UAAU,sBACVE,QAASA,EACTk+B,SAAU+0C,OCHV15C,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAK,GAyKjD,IAAe57B,EAAAA,EAAAA,KA5JwB,IASjC,IATkC,OACtC6B,EADsC,MAEtCqyE,EAFsC,UAGtCqB,EAHsC,iBAItCC,EAJsC,SAKtCC,EALsC,SAMtC9xD,EANsC,QAOtClb,EAPsC,eAQtCitE,GACI,EACJ,MAAM,SACJv/C,EADI,SAEJw/C,IACE10E,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB9I,OAAQM,OAAWA,GAAW,IAE7F8+B,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9vB,EACT0gE,WApC6B,IAqC7B9U,YAAar7D,IAGT21B,GAAiBj2B,EAAAA,EAAAA,KAAY,IAAqD,IAApD,UAAEqS,GAAkD,EAClFA,IAAckkB,EAAAA,GAAAA,WAChB6D,GAAahY,KAEd,CAACA,IAEEmxD,EAAgBvS,GAAsB,CAC1C/0D,SAAU3L,EACV4gE,6BAA8B8S,EAC9B7S,kBAAmB6S,EACnBzwD,MAAO0wD,EACPr7C,SAAUu7C,EACVjtE,QAAAA,KAGFhF,EAAAA,EAAAA,KAAU,KACR0+D,GAAsB,uBAAwB2S,EAAexjE,KAC5D,CAACwjE,IAEJ,MAAMc,GAAer0E,EAAAA,EAAAA,KAAY,KAC/B40B,EAAS,CAAE13B,GAAIy1E,IACfyB,EAAS,CAAEzB,MAAAA,EAAOx9B,MAAO++B,EAAUI,eAClC,CAAC3B,EAAO/9C,EAAUw/C,EAAUF,IAEzBK,GAAuBl6D,EAAAA,EAAAA,GAC3B45D,MAAAA,GAAAA,EAAkB51E,OACd41E,OACArzE,EACJoI,GAEIwrE,EAA2BP,IAAqBA,EAAiB51E,OACnEk2E,EACAN,EAEJ,IAAKjrE,KAAkBwrE,MAAAA,GAAAA,EAA0Bn2E,QAAU61E,GACzD,OAGF,MAAMvzE,GAAYmC,EAAAA,EAAAA,GAChB,oCACAyE,EAAAA,GAAe,eAAiB,gBAChCysE,GAAa,UACb9qE,GAwEF,OACE,mBAACoa,GAAA,EAAD,CACEld,IAAK2J,EACLpP,UAAWA,EACX4iB,MAAOixD,EACPn0C,aAAa,uBACb1B,YAAU,EACVnb,WAAYyS,EACZw+C,cAAe,KAEdP,GA7ED,mBAACpwD,GAAA,EAAD,CAAUxd,QAAM,EAAC3F,UAAU,wBAAwBE,QAASwzE,GAC1D,2BAAM1zE,UAAU,SAASuzE,EAAUtyE,QA6EpC4yE,MAAAA,OAAA,EAAAA,EAA0Bn2E,SAvEtBm2E,EAA0B5wD,KAAI,CAAC8wD,EAAiBpzD,KACrD,OAAQozD,EAAgBh6D,MACtB,IAAK,MACH,OACE,mBAAC,GAAD,CACEtQ,IAAKsqE,EAAgBx3E,GACrB42E,aAAcY,EACdl0C,oBAAqBA,EACrB3/B,QAASszE,IAIf,IAAK,QACH,OACE,mBAAC,GAAD,CACE/pE,IAAKsqE,EAAgBx3E,GACrB22E,aAAcG,EACdF,aAAcY,EACd7zE,QAASszE,IAIf,IAAK,UACH,OACE,mBAAC,GAAD,CACE/pE,IAAKsqE,EAAgBx3E,GACrB42E,aAAcY,EACdl0C,oBAAqBA,EACrB3/B,QAASszE,IAIf,IAAK,QACL,IAAK,OACL,IAAK,OACH,OACE,mBAAC,GAAD,CACE/pE,IAAKsqE,EAAgBx3E,GACrBoyC,MAAOikC,IAAkBjyD,EACzBwyD,aAAcY,EACd7zE,QAASszE,IAGf,IAAK,UACL,IAAK,QACH,OACE,mBAAC,GAAD,CACE/pE,IAAKsqE,EAAgBx3E,GACrBoyC,MAAOikC,IAAkBjyD,EACzBwyD,aAAcY,EACd7zE,QAASszE,IAIf,QACE,eClDV,IAAe11E,EAAAA,EAAAA,KAjGkB,IAM3B,IAN4B,OAChC6B,EADgC,QAEhC4G,EAFgC,OAGhCmE,EAHgC,iBAIhCspE,EAJgC,UAKhCC,GACI,EACJ,MAAM,kBAAEC,IAAsBn1E,EAAAA,EAAAA,MAGxBmmB,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAC9BC,GAAYwB,EAAAA,EAAAA,MAAY1B,MAAMC,KAE9BpkB,GAAOC,EAAAA,EAAAA,KAEP6P,GAAerL,EAAAA,EAAAA,IAAuB,OAErC4sE,EAAkBC,EAAkBuD,IAAmBtD,EAAAA,GAAAA,GAAelxE,EAAQ4G,OAAStG,IAE9FsB,EAAAA,EAAAA,KAAU,KACJ5B,GACFw0E,MAED,CAACx0E,EAAQw0E,IAEZ,MAAMzS,GAAmBriE,EAAAA,EAAAA,KAAa9C,IACpCgK,IACA2tE,EAAkB,CAAExpE,OAAAA,EAAQ0pE,SAAU73E,MACrC,CAACmO,EAAQnE,EAAS2tE,IAEfG,EAAsBhU,GAAsB,CAChD/0D,SAAU3L,EACVijB,MAAOqxD,EACPh8C,SAAUypC,EACVjB,mBAAmB,EACnBH,kCAAkC,EAClC/5D,QAAAA,IAaF,OAVAhF,EAAAA,EAAAA,KAAU,KACR0+D,GAAsB,uBAAwBoU,EAAqBjlE,KAClE,CAACilE,KAEJ9yE,EAAAA,EAAAA,KAAU,KACJ0yE,IAAcA,EAAUv2E,QAC1B6I,MAED,CAAC0tE,EAAW1tE,IAGb,mBAACyvD,GAAA,EAAD,CACEr2D,OAAQA,EACRY,UAAU,OACVm1D,UAAU,SACVnvD,QAASA,EACTvG,UAAU,aACV4hB,oBAAqBrb,EACrBuqD,aAAelqD,EAAAA,QAAkC3G,EAAnB0wE,EAC9BM,aAAerqE,EAAAA,QAAkC3G,EAAnB2wE,EAC9BM,mBAAoBtqE,EAAAA,GACpBuqE,WAAS,GAET,0BAAKnxE,UAAU,gBAAgBsC,IAAI,QAAQhD,EAAK,uBAC/C4lB,GAAavB,IAAaswD,MAAAA,OAA1B,EAA0BA,EAAWhxD,KAAI,CAAC1mB,EAAIokB,KAC7C,MAAM1H,GAAOV,EAAAA,EAAAA,IAAShc,GAAM2oB,EAAU3oB,QAAM0D,EACtCiZ,EAAQD,OAAuBhZ,EAAhB0jB,EAAUpnB,GACzBy5B,EAAW/c,GAAOgd,EAAAA,EAAAA,IAAgBhd,GAAQC,MAAAA,OAA3B,EAA2BA,EAAM0N,MAEtD,OACE,mBAACzD,GAAA,EAAD,CACE1Z,IAAKlN,EACLyD,UAAU,yDACVE,QAAS,IAAMwhE,EAAiBnlE,GAChCoyC,MAAO0lC,IAAwB1zD,GAE/B,mBAAC3H,GAAA,EAAD,CACElZ,KAAK,QACLmZ,KAAMA,EACNC,KAAMA,EACNlZ,WAAWmC,EAAAA,EAAAA,GAAe6xE,IAAqBz3E,GAAM,cAEvD,0BAAKyD,UAAU,QACb,0BAAKA,UAAU,SACb,yBAAIsC,IAAI,QAAQ0zB,IAAY7c,EAAAA,GAAAA,GAAW6c,KAEzC,2BAAMh2B,UAAU,YAAYiZ,EACxB3Z,EAAK,4BACLA,EAAK,cAAe4Z,MAAAA,OAAhB,EAAgBA,EAAM6oC,aAAc,gB,eCnE1D,MA4HA,IAAejkD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAC1B4pE,EAAep7D,IAAQsB,EAAAA,EAAAA,IAAmBxc,EAAQkb,EAAK3c,IAC7D,IAAK2c,IAASo7D,EACZ,MAAO,GAGT,MAAM,MAAEt3C,EAAF,QAAS9H,IAAY6oC,EAAAA,EAAAA,IAAwB//D,IAAW,IACxD,WAAEsgD,EAAF,SAAczjC,GAAaqa,GAAW,GAE5C,MAAO,CACLhc,KAAAA,EACAo7D,aAAAA,EACAt3C,MAAAA,EACAshB,WAAAA,EACAzjC,SAAAA,KAhBc9c,EA5H2B,IAUzC,IAV0C,OAC9C2M,EAD8C,SAE9CC,EAF8C,QAG9CpE,EAH8C,SAI9C+E,EAJ8C,KAK9C4N,EAL8C,aAM9Co7D,EAN8C,MAO9Ct3C,EAP8C,WAQ9CshB,EAR8C,SAS9CzjC,GACI,EACJ,MAAM,wBACJqjD,EADI,aAEJxlD,IACE3Z,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,MAEtCzE,GAAOC,EAAAA,EAAAA,MACbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAOsb,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBm8C,EAAyBrjD,GAEpE05D,GAAkB90E,EAAAA,EAAAA,KAAQ,IACzBu9B,GAAUnb,MAAAA,GAAAA,EAAankB,QAAW42E,EAIhCzyD,EAAYoB,KAAK1mB,IACtB,MAAMY,EAAUm3E,EAAa/3E,GAC7B,IAAKY,EACH,OAGF,MAAMq3E,EAAar3E,EAAQ6N,UAAWE,EAAAA,EAAAA,KAAWia,EAAAA,EAAAA,MAAahoB,EAAQ6N,eAAY/K,EAElF,IAAIw0E,EACJ,GAAIv7D,IAAQsW,EAAAA,EAAAA,IAActW,GACxBu7D,EAAav7D,OACR,GAAI/b,EAAQu3E,YAAa,CAC9B,MAAM,cAAEC,EAAF,WAAiBr0D,GAAenjB,EAAQu3E,YAC9CD,EAAaE,GAAiBr0D,GAAanV,EAAAA,EAAAA,KAAWga,EAAAA,EAAAA,MAAa7E,QAAcrgB,OAEjFw0E,EAAat3E,EAAQ6N,UAAWG,EAAAA,EAAAA,KAAWga,EAAAA,EAAAA,MAAahoB,EAAQ6N,eAAY/K,EAG9E,MAAO,CACL9C,QAAAA,EACAq3E,WAAAA,EACAC,WAAAA,EACAv0E,QAAS,IAAMwY,EAAa,CAAEhO,OAAAA,EAAQC,SAAAA,EAAUC,UAAWrO,QAE5DglB,OAAOpa,SA3BDi2B,GAAAA,GA4BR,CAACJ,EAAOnb,EAAayyD,EAAcp7D,EAAMR,EAAchO,EAAQC,IAE5DmW,GAAgBqB,EAAAA,GAAAA,GAA0B/S,GAAc,GAAOuR,IACnE,MAAMi0D,EAAcL,MAAAA,OAAH,EAAGA,GAA6B,IAAX5zD,EAAe,EAAIA,GACrDi0D,GACFA,EAAY10E,YAEb,oBAAoB,GAkCjB20E,GAAUhzD,MAAAA,OAAA,EAAAA,EAAc,OAAOhH,MAAAA,OAArB,EAAqBA,EAAW,IAEhD,OACE,mBAAC8H,GAAA,EAAD,CACEld,IAAK2J,EACLpP,UAAU,4BACV4iB,MAAO2xD,EACPO,iBAAkB,EAClBjyD,WAAYf,EACZQ,UAAWxB,GAEV+zD,GACC,wBAAGprE,IAAI,cAAczJ,UAAU,cAAcsC,IAAI,QAC7C06B,EAEkB,IAAfshB,GAAqBi2B,EAAgB72E,OAEvB,IAAf4gD,EACF,kBAEC,GAAGi2B,EAAgB72E,SAAW4gD,GAAci2B,EAAgB72E,yBAJ7D4B,EAAK,yBAFLA,EAAK,gCAUVi1E,EAAgBtxD,KAxDM,IAOrB,IAPsB,QAC1B9lB,EAD0B,WACjBq3E,EADiB,WACLC,EADK,QACOv0E,GAM7B,EACJ,MAAM0mB,EAAQ6tD,GAAaz5C,EAAAA,EAAAA,GAAa17B,EAAMm1E,IAAcx+C,EAAAA,EAAAA,IAAgBu+C,GACtEvzE,GAAOo6B,EAAAA,EAAAA,GAAqB/7B,EAAMnC,OAAS8C,EAAW+8B,GAE5D,OACE,mBAAC7Z,GAAA,EAAD,CACE1Z,IAAKtM,EAAQZ,GACbw4E,eAAgB53E,EAAQkc,KACxBrZ,UAAU,gDACVE,QAASA,GAET,mBAAC8Y,GAAA,EAAD,CAAQE,KAAMu7D,EAAYx7D,KAAMu7D,IAChC,0BAAKx0E,UAAU,QACb,0BAAKA,UAAU,SACb,yBAAIsC,IAAI,QAAQskB,IAASzN,EAAAA,GAAAA,GAAWyN,IACpC,mBAACouD,GAAA,EAAD,CAAiB73E,QAASA,KAE5B,0BAAK6C,UAAU,WAAWsC,IAAI,QAC3BrB,a,eCzGb,MAuFA,IAAenD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA0C,IAAjC,aAAE48D,GAA+B,EACxC,MAAO,CACLgU,KAAKjU,EAAAA,EAAAA,IAAiB38D,EAAQ48D,GAC9BsT,YAAY+G,EAAAA,EAAAA,IAAyBj3E,MAJvBD,EArFgC,IAG9C,IAH+C,aACnD68D,EADmD,oBACrC/6B,EADqC,IAChB+uC,EADgB,WACXV,EADW,gBAEnDgH,EAFmD,cAElCC,GACb,EACJ,MAAM,aAAEra,EAAF,iBAAgBC,IAAqBh8D,EAAAA,EAAAA,MAErCO,GAAOC,EAAAA,EAAAA,KACP61E,EAAUxG,GAAOznE,QAAQynE,EAAI/6B,eAC7BwhC,EAAoBluE,QAAQynE,MAAAA,OAAD,EAACA,EAAKt9B,WAEhCjrB,EAAaC,EAAWC,IAAc5B,EAAAA,GAAAA,MAE7C2wD,EAAAA,GAAAA,IAAY,KACVH,EAAc9uD,KACb,CAACA,EAAa8uD,IAEjB,MAAM3C,GAAoB/yE,EAAAA,EAAAA,KAAQ,KAChC,IAAKmvE,EACH,MAAO,GAGT,MAAM2G,GAAmB3G,EAAI4G,QAAU,IAAIvyD,KAAI,QAAC,GAAE1mB,GAAH,SAAYA,KACrDk5E,EAAgB7G,EAAIt9B,SAAWs9B,EAAIt9B,SAAS/vB,QAAO,QAAC,GAAEhlB,GAAH,SAAag5E,EAAgB/4E,SAASD,MAAO,GAEtG,MAAO,IAAKqyE,EAAI4G,QAAU,MAAQC,GAAex0C,MAAM,EA1B/B,KA2BvB,CAAC2tC,KAEJrtE,EAAAA,EAAAA,KAAU,MAEH8zE,GAAqB7C,EAAkB90E,OA/BpB,GAgCtBo9D,EAAa,CAAEF,aAAAA,MAEhB,CAACya,EAAmB7C,EAAkB90E,OAAQo9D,EAAcF,IAE/D,MAAM8a,GAAiBr2E,EAAAA,EAAAA,KAAY,KACjC07D,EAAiB,CAAEH,aAAAA,MAClB,CAACG,EAAkBH,IAEtB,IAAKgU,EACH,OAGF,MAAM+G,EAAoBnD,EAAkB90E,OAAS,EAErD,OACE,0BAAK+L,IAAKmlE,EAAIryE,GAAIyD,UAAU,cAAcsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAClE,0BAAKD,UAAU,sBACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,QAAQsC,IAAI,QAAQssE,EAAIhoD,OACtC,wBAAG5mB,UAAU,QAAQsC,IAAI,QAAQhD,EAAK,WAAYsvE,EAAI35C,MAAO,OAE/D,mBAACr1B,EAAA,EAAD,CACEI,UAAWo1E,EAAU,gBAAan1E,EAClCF,MAAM,UACND,KAAK,OACLsrC,MAAI,EACJC,OAAK,EACLnrC,QAASw1E,GAERp2E,EAAK81E,EAAU,qBAAuB,sBAG3C,0BAAKp1E,UAAU,qBACX21E,GAAqB,mBAAChnE,EAAA,EAAD,MACtBgnE,GAAqBnD,EAAkBvvD,KAAK0uB,GAC3C,mBAACD,GAAA,EAAD,CACEC,QAASA,EACT7xC,KAAM81E,EAAAA,GACN/1C,oBAAqBA,EACrB8tC,WAAYO,GAAc7nD,GAAe6uD,EACzCh1E,QAASomB,OAIdqvD,GACC,mBAAC,KAAD,CACEh2E,OAAQ0mB,EACRytB,YAAa0+B,EAAkB,GAC/BjsE,QAASggB,SClFbkT,IAAe33B,EAAAA,EAAAA,KAAU43B,GAAOA,KAAM,KAAO,GA2EnD,IAAe57B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM2c,GAAgBk7D,EAAAA,EAAAA,IAA2B73E,IAC3C,MAAEg/B,EAAF,UAAS84C,GAAcn7D,GAAiB,IACxC,SAAEo7D,GAAa/3E,EAAOszC,SAE5B,MAAO,CACLtU,MAAAA,EACAg5C,YAAaD,EAAS/jC,OACtB8jC,UAAAA,KATc/3E,EAzE6B,IAM3C,IAN4C,QAChDwI,EADgD,SAEhD+E,EAFgD,MAGhD0xB,EAHgD,YAIhDg5C,EAJgD,UAKhDF,GACI,EACJ,MAAM,qBAAEG,IAAyBl3E,EAAAA,EAAAA,MAG3BqQ,GAAerL,EAAAA,EAAAA,IAAuB,MAEtCzE,GAAOC,EAAAA,EAAAA,MAEN8mB,EAAa6vD,IAAkB50E,EAAAA,EAAAA,KAAS,IAG7Cy9B,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS9vB,EAAc+vB,WAtBzB,MAsE5B,OA5CA59B,EAAAA,EAAAA,KAAU,KACRk4B,IAAa,KACXw8C,WAIJp1D,EAAAA,EAAAA,IAAevV,EAAU/E,GAuCvB,0BAAKd,IAAK2J,EAAcpP,UAAU,8BAA8BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GArC5F,WACE,QAAcA,IAAV+8B,EAIJ,OAAKA,GAASg5C,EACLA,EAAY/yD,KAAK1mB,GACtB,mBAAC,GAAD,CACEkN,IAAKlN,EACLq+D,aAAcr+D,EACdsjC,oBAAqBA,EACrBq1C,gBAAiB7uD,EACjB8uD,cAAee,MAKjBJ,EACGA,EAAUp4E,OAIRo4E,EAAU7yD,KAAK1mB,GACpB,mBAAC,GAAD,CACEkN,IAAKlN,EACLq+D,aAAcr+D,EACdsjC,oBAAqBA,EACrBq1C,gBAAiB7uD,EACjB8uD,cAAee,MATV,wBAAGl2E,UAAU,cAAcsC,IAAI,QAA/B,kBAcJ,mBAACkhB,GAAA,EAAD,MAKJwtD,QCyBP,IAAelzE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM2c,GAAgBw7D,EAAAA,EAAAA,IAAuBn4E,IACvC,MAAEg/B,EAAF,QAAS9H,GAAYva,GAAiB,IACtC,OAAEjQ,IAAWyjB,EAAAA,EAAAA,IAAyBnwB,IAAW,GACjDkb,EAAOxO,GAASS,EAAAA,EAAAA,IAAWnN,EAAQ0M,QAAUzK,EAGnD,MAAO,CACL+8B,MAAAA,EACA9H,QAAAA,EACAhc,KAAAA,EACAk9D,cANoBl9D,GAAOm9D,EAAAA,EAAAA,IAAoBr4E,EAAQkb,QAAQjZ,KANjDlC,EAnFyB,IAOvC,IAPwC,QAC5CwI,EAD4C,SAE5C+E,EAF4C,MAG5C0xB,EAH4C,QAI5C9H,EAJ4C,KAK5Chc,EAL4C,cAM5Ck9D,GACI,EACJ,MAAM,eACJE,EADI,YAEJnwD,EAFI,kBAGJowD,IACEx3E,EAAAA,EAAAA,MAGEqQ,GAAerL,EAAAA,EAAAA,IAAuB,OAG1Cg7B,QAASc,IACPZ,EAAAA,GAAAA,IAAwB,CAAEC,QAAS9vB,EAAc0gE,WArBzB,OAuBtB,YAAEH,IAAgBlV,EAAAA,EAAAA,IAA4BvhD,EAAMk9D,GAEpDI,GAAiBn3E,EAAAA,EAAAA,KAAa6vE,IAC9BS,GACFxpD,EAAY,CAAE+oD,IAAAA,IAGZtoE,EAAAA,IACF2vE,EAAkB,CAAEv5C,WAAO/8B,MAE5B,CAAC0vE,EAAaxpD,EAAaowD,IAExBj3E,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GA6BzB,MAAMkwE,EAAatvE,aAAkBlH,IAAV+8B,GAAuB9H,GAAWA,EAAQx3B,QAErE,OACE,0BAAKsC,UAAU,YAAYsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACnD,mBAAC0iB,GAAA,EAAD,CACEld,IAAK2J,EACLpP,WAAWmC,EAAAA,EAAAA,GAAe,8BAA+Bs0E,GAAc,QACvE7zD,MAAOsS,EACPwK,aAAa,aACbo1C,iBA5EkB,GA6ElB92C,YAAU,EACVnb,WAAYyzD,GAtClB,WACE,QAAcr2E,IAAV+8B,EAIJ,OAAK9H,EAMAA,EAAQx3B,OAMNw3B,EAAQjS,KAAKisD,GAClB,mBAAC,GAAD,CACEzlE,IAAKylE,EAAI3yE,GACT2yE,IAAKA,EACLrvC,oBAAqBA,EACrB3/B,QAASs2E,MATT,wBAAGx2E,UAAU,cAAcsC,IAAI,QAAQhD,EAAK,gBAN5C,mBAACkkB,GAAA,EAAD,MAiCCwtD,SCcT,IAAelzE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA8C,IAArC,OAAE04E,GAAmC,EAC5C,MAAM,OAAEC,EAAF,QAAUC,GAAY54E,EAAO64E,YAEnC,MAAO,CACLF,OAAQA,MAAAA,OAAF,EAAEA,EAASD,EAAOxgB,QACxBtkD,QAASglE,MAAAA,OAAD,EAACA,EAAUF,EAAOxgB,UAAY,MANxBn4D,EA/FiC,IAQ/C,IARgD,KACpDmb,EADoD,QAEpD/b,EAFoD,OAGpDu5E,EAHoD,WAIpDI,EAJoD,YAKpDC,EALoD,OAMpDJ,EANoD,OAOpD/kE,GACI,EACJ,MAAM,sBACJolE,EADI,SAEJ/iD,EAFI,iBAGJgjD,IACEl4E,EAAAA,EAAAA,MAEEm4E,GAAkBx9D,EAAAA,EAAAA,GAAoBo9D,EAAWK,cAChDx4C,EAAWy4C,IAAgB91E,EAAAA,EAAAA,KAAkB,GAC9C+1E,EAAkBlwE,QAAQwvE,IAC1B,OAAEzgB,EAAF,KAAUj1D,GAASy1E,EACnBp3E,GAAOC,EAAAA,EAAAA,MAEbgC,EAAAA,EAAAA,KAAU,KAEH81E,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB99D,KAAAA,EAAMtO,UAAWzN,EAAQZ,GAAI25D,OAAAA,EAAQtkD,OAAAA,EAAQ0lE,MA5B/B,EA4BqDC,mBAAmB,MAIzF,CAACT,EAAWK,YAAaE,IAE5B,MAAMG,GAAsBn4E,EAAAA,EAAAA,KAAY,KACtC+3E,GAAa,GACbJ,EAAsB,CACpB99D,KAAAA,EAAMtO,UAAWzN,EAAQZ,GAAI25D,OAAAA,EAAQtkD,OAAAA,EAAQ0lE,MApC3B,OAsCnB,CAACp+D,EAAM89D,EAAuB75E,EAAQZ,GAAIqV,EAAQskD,KAErD30D,EAAAA,EAAAA,KAAU,KACR61E,GAAa,KACZ,CAACT,IAEJ,MAAMc,GAAoBp4E,EAAAA,EAAAA,KAAa9C,IACrC03B,EAAS,CAAE13B,GAAAA,IACX06E,MACC,CAACA,EAAkBhjD,IAetB,OACE,0BAAKj0B,UAAU,qBACb,0BAAKA,UAAU,eACZ22E,EACGA,EAAO1zD,KAAK1mB,GACZ,mBAAC4mB,GAAA,EAAD,CACE1Z,IAAKlN,EACLyD,UAAU,sBACVE,QAAS,IAAMu3E,EAAkBl7E,IAEjC,mBAAC6mB,GAAA,EAAD,CACEmW,WAAW,OACXjW,OAAQ/mB,EACR0nC,eAAa,EACb5P,kBAAgB,OAIpB,mBAAC7Q,GAAA,EAAD,MACHmzD,GAhCP,WACE,MAAMe,EAAkBZ,EAAWK,YAAcR,EAAQj5E,OAEzD,OAAOo5E,EAAWK,YArDA,GAqD+BO,EAAkB,GACjE,mBAAC,GAAD,CACEziD,MAAOyiD,EACPlsC,SAAS,QACT7M,UAAWA,EACXz+B,QAASs3E,IAwBEG,IAEb,0BAAK33E,UAAU,cAAcsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACrD,2BAAMD,UAAU,eAAesC,IAAI,QAAQrB,GAC3C,2BAAMjB,UAAU,iBAAiBsC,IAAKhD,EAAK2hB,MAAQ,YAAShhB,IAQ7CgQ,EAPE6mE,EAAWK,aAOES,EAPWb,GAQhC,GAAM9mE,EAAQ2nE,EAAS,KAAK50E,UAAY,GATjD,OAQR,IAAuBiN,EAAe2nE,MC5DtC,IAAe95E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE64E,aAAa,OAAEnsE,EAAF,UAAUE,GADnB,aAEJ2vB,GACEv8B,EAEJ,OAAK0M,GAAWE,EAOT,CACLsO,MAJW/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAK9BvN,SAJc4N,EAAAA,EAAAA,IAAkB/M,EAAQ0M,EAAQE,GAKhD2vB,aAAAA,GATO,KAROx8B,EAzC2B,IAMzC,IAN0C,QAC9CwI,EAD8C,SAE9C+E,EAF8C,KAG9C4N,EAH8C,QAI9C/b,EAJ8C,aAK9Co9B,GACI,EACJ,MAAMj7B,GAAOC,EAAAA,EAAAA,KAGb,IAFAshB,EAAAA,EAAAA,IAAevV,EAAU/E,IAEpBpJ,IAAY+b,EACf,OAAO,mBAACsK,GAAA,EAAD,MAGT,MAAM,QAAEmlD,EAAF,QAAWzzC,IAAY2iD,EAAAA,EAAAA,IAAe16E,GAC5C,IAAK+3B,EAAQA,QACX,OAGF,MAAM4iD,GAAkBC,EAAAA,GAAAA,IAAqB7iD,EAAQA,QAAS,UAE9D,OACE,0BAAKl1B,UAAU,cAAcsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACrD,yBAAID,UAAU,gBAAgBsC,IAAI,SAAQ6W,EAAAA,GAAAA,GAAWwvD,EAAQ3B,SAAU,CAAC,QAAS,QACjF,0BAAKhnE,UAAU,mCACZu6B,GAAgBouC,EAAQC,QAAQ3lD,KAAKyzD,GACpC,mBAAC,GAAD,CACEjtE,IAAM,GAAEtM,EAAQZ,MAAMm6E,EAAOxgB,SAC7Bh9C,KAAMA,EACN/b,QAASA,EACTu5E,OAAQA,EACRI,WAAYgB,EAAgBpB,EAAOxgB,QACnC6gB,YAAa7hD,EAAQ6hD,iBAGvBx8C,GAAgB,mBAAC/W,GAAA,EAAD,YCvBpBgiB,GAA2B,4BA+JjC,IAAe1nC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEslB,GAAyB,EAClC,MAAMrK,GAAO/N,EAAAA,EAAAA,IAAWlN,EAAQslB,GAC1BpK,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQslB,IAC1B,SAAExiB,GAAa9C,EAAOg6E,WAG5B,MAAO,CACL/+D,KAAAA,EAAMnY,SAAAA,EAAUy3B,SAHFC,EAAAA,EAAAA,IAAkBtf,GAAMuf,EAAAA,EAAAA,IAAqBz6B,IAAS06B,EAAAA,EAAAA,IAAuB16B,OAL7ED,EA7J0B,IAOxC,IAPyC,OAC7CulB,EAD6C,KAE7CrK,EAF6C,SAG7CnY,EAH6C,QAI7Cy3B,EAJ6C,QAK7ChyB,EAL6C,SAM7C+E,GACI,EACJ,MAAM,cACJ2sE,EADI,cAEJC,EAFI,gBAGJC,IACEp5E,EAAAA,EAAAA,OAEGq5E,EAAoBC,EAAkBC,IAAqB3zD,EAAAA,GAAAA,MAC3D4hB,EAAwBC,IAA6BllC,EAAAA,EAAAA,KAAS,IAC9DskB,EAAO6gB,IAAYnlC,EAAAA,EAAAA,MACpBhC,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAMq/B,EAAmB3sB,GAAQA,EAAK0sB,WAAmB,GACnDG,EAAkB7sB,GAAQA,EAAK4sB,UAAkB,IAEhDF,EAAWgB,IAAgBrlC,EAAAA,EAAAA,IAASskC,IACpCC,EAAUe,IAAetlC,EAAAA,EAAAA,IAASwkC,IAClCyyC,EAAwBC,IAA6Bl3E,EAAAA,EAAAA,KAAUi3B,IAEtEh3B,EAAAA,EAAAA,KAAU,KACRi3E,GAA2BjgD,KAC1B,CAACA,KAEJh3B,EAAAA,EAAAA,KAAU,KACRilC,GAA0B,GAC1B8xC,MACC,CAACA,EAAmBh1D,KAEvB/hB,EAAAA,EAAAA,KAAU,KACRolC,EAAaf,GACbgB,EAAYd,KACX,CAACF,EAAkBE,EAAiB7sB,KAEvC1X,EAAAA,EAAAA,KAAU,KACJT,IAAa23E,EAAAA,GAAAA,WACfjyC,GAA0B,GAC1BC,OAASxmC,GACTq4E,OAED,CAACA,EAAmBx3E,IAEvB,MAAMsmC,GAAwB/nC,EAAAA,EAAAA,KAAa+C,IACzCukC,EAAavkC,EAAE8G,OAAO+G,OACtBu2B,GAA0B,KACzB,IAEGa,GAAuBhoC,EAAAA,EAAAA,KAAa+C,IACxCwkC,EAAYxkC,EAAE8G,OAAO+G,OACrBu2B,GAA0B,KACzB,IAEGkyC,GAA2Br5E,EAAAA,EAAAA,KAAa+C,IAC5Co2E,EAA0Bp2E,EAAE8G,OAAOqgC,SACnC/C,GAA0B,KACzB,IAEGe,GAAoBloC,EAAAA,EAAAA,KAAY,KACpC,MAAMmoC,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAE5BqC,EAAiB9pC,QACpB+oC,EAASjB,IAGXyyC,EAAc,CACZ30D,OAAAA,EACAiV,SAAUggD,EACV5yC,UAAW6B,EACX3B,SAAU4B,MAEX,CAAC9B,EAAWE,EAAUoyC,EAAe30D,EAAQi1D,IAE1CI,GAAsBt5E,EAAAA,EAAAA,KAAY,KACtC64E,EAAc,CAAE50D,OAAAA,IAChBg1D,IACAH,MACC,CAACG,EAAmBH,EAAiBD,EAAe50D,IAEvD,IAAKrK,EACH,OAGF,MAAM0lB,EAAY79B,IAAa23E,EAAAA,GAAAA,WAE/B,OACE,0BAAKz4E,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACojB,GAAA,EAAD,CACEE,OAAQrK,EAAK1c,GACbg9B,WAAW,QACXlW,OAAO,gBACPu1D,cAAY,IAEd,mBAACv2D,GAAA,EAAD,CACE9lB,GAAG,kBACH40B,MAAO7xB,EAAK,iCACZ0a,SAAUotB,EACVn3B,MAAO01B,EACP/f,MAAOA,IAAU4f,GAA2B5f,OAAQ3lB,IAEtD,mBAACoiB,GAAA,EAAD,CACE9lB,GAAG,iBACH40B,MAAO7xB,EAAK,gCACZ0a,SAAUqtB,EACVp3B,MAAO41B,IAET,0BAAK7lC,UAAU,gCACb,mBAACspC,GAAA,EAAD,CACEC,QAASgvC,EACTpnD,MAAO7xB,EAAK,iBACZwzC,SAAUxzC,EAAKi5E,EACX,gCACA,kCACJv+D,SAAU0+D,MAIhB,0BAAK14E,UAAU,WACb,mBAACmjB,GAAA,EAAD,CAAU1iB,KAAK,SAASkF,QAAM,EAACkuB,aAAW,EAAC3zB,QAASm4E,GACjD/4E,EAAK,oBAIZ,mBAACuoC,GAAA,EAAD,CACEtuB,QAASgtB,EACTrmC,QAASqnC,EACT1tB,SAAU8kB,EACVx+B,UAAWb,EAAK,SAEfq/B,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,gBAGjB,mBAACooB,GAAA,EAAD,CACEzoB,OAAQy4E,EACR7xE,QAAS+xE,EACTr3E,KAAM3B,EAAK,2BACX+oB,aAAc/oB,EAAK,iBACnBgpB,eAAgBqwD,EAChB/0C,sBAAoB,SC9ItBi1C,GAAoB,6BAsV1B,IAAe/6E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,YAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IAC1B,SAAE5J,GAAa9C,EAAOg6E,WACtBc,EAAmB3xE,QAAO,UAAC+R,EAAK6sB,gBAAN,aAAC,EAAe61B,cAC1Cmd,GAAerqD,EAAAA,EAAAA,IAAiBxV,IAChC,QAAE8/D,GAAYh7E,EAAOg6E,WAAW17C,SAAS5xB,IAAW,GAE1D,MAAO,CACLwO,KAAAA,EACApY,SAAAA,EACAi4E,aAAAA,EACAD,iBAAAA,EACAG,cAAeF,EAAe7/D,EAAKggE,WAAYC,EAAAA,EAAAA,IAAiBjgE,EAAM,cACtEkgE,YAAaL,EAAe7/D,EAAKggE,WAAYC,EAAAA,EAAAA,IAAiBjgE,EAAM,YACpEmgE,UAAWN,EAAe7/D,EAAKggE,WAAYC,EAAAA,EAAAA,IAAiBjgE,EAAM,eAClEogE,gBAAiBN,EACjBz+C,aAAcv8B,EAAOu8B,aACrBg/C,wBAAuB,UAAEv7E,EAAOkrD,0BAAT,aAAE,EAA2B3nC,QAAQiU,IAAOA,EAAE6zB,aAAY3rD,UAlBnEK,EAhV2B,IAezC,oBAf0C,OAC9C2M,EAD8C,KAE9CwO,EAF8C,SAG9CpY,EAH8C,aAI9Ci4E,EAJ8C,iBAK9CD,EAL8C,cAM9CG,EAN8C,YAO9CG,EAP8C,UAQ9CC,EAR8C,eAS9Cz2C,EAT8C,QAU9Cr8B,EAV8C,SAW9C+E,EAX8C,gBAY9CguE,EAZ8C,aAa9C/+C,EAb8C,wBAc9Cg/C,GACI,EACJ,MAAM,uBACJC,EADI,WAEJC,EAFI,WAGJC,EAHI,aAIJC,EAJI,cAKJC,EALI,gBAMJzB,EANI,SAOJlkD,EAPI,wBAQJ4lD,EARI,qBASJC,IACE/6E,EAAAA,EAAAA,OAEGq5E,EAAoBC,EAAkBC,IAAqB3zD,EAAAA,GAAAA,KAC5Do1D,EAAe7gE,EAAK0N,MACpBozD,EAAe9gE,EAAK6sB,UAAY7sB,EAAK6sB,SAASlf,OAAe,IAE5D0f,EAAwBC,IAA6BllC,EAAAA,EAAAA,KAAS,IAC9DslB,EAAOulC,IAAY7qD,EAAAA,EAAAA,IAASy4E,GAAgB,KAC5ClzD,EAAOulC,IAAY9qD,EAAAA,EAAAA,IAAS04E,IAC5BruE,EAAO+6B,IAAYplC,EAAAA,EAAAA,OACnBskB,EAAO6gB,IAAYnlC,EAAAA,EAAAA,MACpB24E,IAAYptE,EAAAA,EAAAA,IAAkBqM,GAC9B4tB,IAAuB/5B,EAAAA,EAAAA,GAASktE,IAAW,EAAOjtE,EAAAA,GAAAA,SAClDktE,GAAgBhhE,EAAKyrB,UAAYm0C,EACjCx5E,IAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,IAEzBhF,EAAAA,EAAAA,KAAU,KACJg5B,GAAgB8+C,IAClBQ,EAAwB,CAAEnvE,OAAAA,IAC1BmvE,EAAwB,CAAEnvE,OAAAA,EAAQyvE,WAAW,IAC7CL,EAAqB,CAAEpvE,OAAAA,OAExB,CAACA,EAAQmvE,EAAyBt/C,EAAc8+C,EAAWS,KAE9Dv4E,EAAAA,EAAAA,KAAU,KACJT,IAAa23E,EAAAA,GAAAA,WACfjyC,GAA0B,GAC1BC,OAASxmC,MAEV,CAACa,IAEJ,MAAMs5E,IAAsB/6E,EAAAA,EAAAA,KAAY,KACtCujC,EAAey3C,EAAAA,GAAAA,mBACd,CAACz3C,IAEE03C,IAAwBj7E,EAAAA,EAAAA,KAAY,KACxCujC,EAAey3C,EAAAA,GAAAA,cACd,CAACz3C,IAEE23C,IAAuBl7E,EAAAA,EAAAA,KAAY,KACvCujC,EAAey3C,EAAAA,GAAAA,aACd,CAACz3C,IAEE43C,IAAyBn7E,EAAAA,EAAAA,KAAY,KACzCujC,EAAey3C,EAAAA,GAAAA,oBACd,CAACz3C,IAEE63C,IAA4Bp7E,EAAAA,EAAAA,KAAY,KAC5CujC,EAAey3C,EAAAA,GAAAA,sBACd,CAACz3C,IAUE83C,IAAiBr7E,EAAAA,EAAAA,KAAaylE,IAClCp+B,EAASo+B,GACTt+B,GAA0B,KACzB,IAEGimB,IAAoBptD,EAAAA,EAAAA,KAAa+C,IACrC+pD,EAAS/pD,EAAE8G,OAAO+G,OAClBu2B,GAA0B,KACzB,IAEGm0C,IAAoBt7E,EAAAA,EAAAA,KAAa+C,IACrCgqD,EAAShqD,EAAE8G,OAAO+G,OAClBu2B,GAA0B,KACzB,IAEGo0C,IAAoBv7E,EAAAA,EAAAA,KAAY,KACpC,MAAMw7E,EAAej0D,EAAMue,OACrB21C,EAAej0D,EAAMse,OAEtB01C,EAAan9E,OAKlB+7E,EAAW,CACT/uE,OAAAA,EACAkc,MAAOi0D,EACPh0D,MAAOi0D,EACPnvE,MAAAA,IARA86B,EAASoyC,MAUV,CAAChyD,EAAOnc,EAAQiB,EAAOib,EAAO6yD,IAE3BsB,IAAqB17E,EAAAA,EAAAA,KAAY,KACrCujC,EAAey3C,EAAAA,GAAAA,gBACd,CAACz3C,IAEEo4C,IAAyB37E,EAAAA,EAAAA,KAAY,KACzC,IAAK6Z,EAAK6sB,SACR,OAGF,MAAM,mBAAEk1C,GAAuB/hE,EAAK6sB,SAEpCyzC,EAAuB,CAAE9uE,OAAQwO,EAAK3c,GAAI2+E,WAAYD,MACrD,CAAC/hE,EAAMsgE,IAEJ2B,IAAwB,UAAAjiE,EAAK6sB,gBAAL,mBAAegrB,wBAAf,eAAiCrzD,SAAU,EAEnE09E,IAA0B37E,EAAAA,EAAAA,KAAQ,KACtC,IAAKyZ,EAAKmiE,oBACR,OAAO,EAGT,IAAI/8B,EAAa,CACf,eACA,YACA,aACA,YACA,aACA,cACA,eACA/8B,QACC9X,IAASyP,EAAKmiE,oBAAqB5xE,KACpC/L,OAEF,MAAM,aAAE49E,EAAF,SAAgBC,GAAariE,EAAKmiE,oBAOxC,OAJKC,GAAiBC,IACpBj9B,GAAc,GAGTA,IACN,CAACplC,IAEEsiE,IAAc,UAACtiE,EAAK6sB,gBAAN,iBAAC,EAAe01C,oBAAhB,aAAC,EAA6B/9E,SAAW,EAEvDg+E,IAAoBr8E,EAAAA,EAAAA,KAAY,KAChC05E,EACFW,EAAW,CAAEhvE,OAAQwO,EAAK3c,KAChB2c,EAAKggE,UAGfU,EAAc,CAAElvE,OAAQwO,EAAK3c,KAF7Bo9E,EAAa,CAAEjvE,OAAQwO,EAAK3c,KAI9B+7E,IACAH,IACAlkD,EAAS,CAAE13B,QAAI0D,MACd,CACD84E,EAAc7/D,EAAKggE,UAAWhgE,EAAK3c,GACnC+7E,EAAmBH,EAAiBwB,EAAcC,EAAeF,EAAYzlD,IAG/E,GAAI/a,EAAKoiD,aACP,OAGF,MAAM38B,GAAY79B,IAAa23E,EAAAA,GAAAA,WAE/B,OACE,0BAAKz4E,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC2nC,GAAA,EAAD,CACEb,qBAAsBA,GACtB9sB,SAAU0gE,GACV7gE,UAAWo/D,IAEb,mBAAC52D,GAAA,EAAD,CACE9lB,GAAG,cACH40B,MAAO7xB,GAAK,aACZ0a,SAAUyyC,GACVx8C,MAAO2W,EACPhB,MAAOA,IAAUizD,GAAoBjzD,OAAQ3lB,EAC7C4Z,UAAWo/D,IAEb,mBAAC52D,GAAA,EAAD,CACE9lB,GAAG,cACHyD,UAAU,OACVmxB,MAAO7xB,GAAK,0BACZ0a,SAAU2gE,GACV1qE,MAAO4W,EACPhN,UAAWo/D,IAEZ//D,EAAKggE,WACJ,mBAAC/1D,GAAA,EAAD,CAAU1iB,KAAK,OAAO8qC,WAAS,EAACrrC,QAASk6E,IACvC,2BAAMp6E,UAAU,SAASV,GAAK,cAC9B,2BAAMU,UAAU,YAAYkZ,EAAKyrB,SAAWrlC,GAAK,cAAgBA,GAAK,iBAGzEw5E,GACC,mBAAC31D,GAAA,EAAD,CACE1iB,KAAK,UACL8qC,WAAS,EACTrrC,QAASo6E,IAET,2BAAMt6E,UAAU,SAASV,GAAK,kBAC9B,2BAAMU,UAAU,YAAYV,GAAK,sBAGrC,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,cACL8qC,WAAS,EACTrrC,QAASs6E,GACT3gE,UAAWu/D,GAEX,2BAAMp5E,UAAU,SAASV,GAAK,uBAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5B84E,GADH,IA5OoB,IAiPtB,mBAACj4D,GAAA,EAAD,CACE1iB,KAAK,YACL8qC,WAAS,EACTrrC,QAASq6E,GACT1gE,UAAWo/D,GAEX,2BAAMj5E,UAAU,SAASV,GAAK,cAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5B64E,GADH,IAC2B5B,IAG7B,mBAACp2D,GAAA,EAAD,CACE1iB,KAAK,QACL8qC,WAAS,EACTrrC,QAASu6E,IAET,2BAAMz6E,UAAU,SAASV,GAAK,0BAC9B,2BAAMU,UAAU,aAAY27E,EAAAA,GAAAA,IAAcH,MAE3CnC,GACC,mBAACl2D,GAAA,EAAD,CACE1iB,KAAK,OACLP,QAtLe,KACzB0iC,EAAey3C,EAAAA,GAAAA,UAsLL9uC,WAAS,EACT1xB,UAAWy/D,GAEX,2BAAMt5E,UAAU,SAASV,GAAK,0BAC9B,2BAAMU,UAAU,YACbs5E,GAAkBqC,EAAAA,GAAAA,IAAcrC,EAAgB57E,QAAU4B,GAAK,aAIrE6H,QAAO,UAAC+R,EAAK0iE,oBAAN,aAAC,EAAmBl+E,SAC1B,mBAACylB,GAAA,EAAD,CACE1iB,KAAK,kBACLP,QA/LgB,KAC1B0iC,EAAey3C,EAAAA,GAAAA,eA+LL9uC,WAAS,GAET,2BAAMvrC,UAAU,SAASV,GAAK,mBAC9B,2BAAMU,UAAU,aACb27E,EAAAA,GAAAA,IAAcziE,EAAK0iE,aAAcl+E,WAK1C,0BAAKsC,UAAU,WACb,mBAACmjB,GAAA,EAAD,CAAU1iB,KAAK,QAAQ8qC,WAAS,EAACrrC,QAAS66E,IACxC,2BAAM/6E,UAAU,SAASV,GAAK,iBAC9B,2BAAMU,UAAU,aAAY27E,EAAAA,GAAAA,IAAa,UAACziE,EAAK6oC,oBAAN,QAAsB,MAG/Dm4B,IAAiBhhE,EAAK6sB,UACtB,0BAAK/lC,UAAU,gCACb,mBAACspC,GAAA,EAAD,CACEC,SAAUrwB,EAAK6sB,SAASk1C,mBACxB9pD,MAAO7xB,GAAK,eACZ0a,SAAUghE,GACVnhE,UAAWu/D,MAKnB,0BAAKp5E,UAAU,WACb,mBAACmjB,GAAA,EAAD,CAAU1iB,KAAK,SAASkF,QAAM,EAACkuB,aAAW,EAAC3zB,QAASm4E,GACjD/4E,GAAK,iBAIZ,mBAACuoC,GAAA,EAAD,CACEtuB,QAASgtB,EACTrmC,QAAS06E,GACT/gE,SAAU8kB,GACVx+B,UAAWb,GAAK,SAEfq/B,GACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,gBAGjB,mBAACooB,GAAA,EAAD,CACEzoB,OAAQy4E,EACR7xE,QAAS+xE,EACTjqE,WAAW8K,EAAAA,GAAAA,GACT4/D,IAAiB7/D,EAAKggE,UAClB55E,GAAK,2BACLA,GAAK,oCAAqC4Z,EAAK0N,OACnD,CAAC,KAAM,oBAETyB,aAAc0wD,IAAiB7/D,EAAKggE,UAAY55E,GAAK,cAAgBA,GAAK,qBAC1EgpB,eAAgBozD,GAChB93C,sBAAoB,SCxF5B,IAAe9lC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAGlC,MAAO,CAAEwO,MAFI/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAEjB0W,cAAepjB,EAAOojB,iBAJrBrjB,EAlPsC,IAOpD,IAPqD,eACzD6kC,EADyD,mBAEzDi5C,EAFyD,KAGzD3iE,EAHyD,cAIzDkI,EAJyD,QAKzD7a,EALyD,SAMzD+E,GACI,EACJ,MAAM,8BAAEwwE,IAAkC/8E,EAAAA,EAAAA,OAEnCg9E,EAAaC,IAAkB16E,EAAAA,EAAAA,IAA8B,KAC7D26E,EAAuBC,IAA4B56E,EAAAA,EAAAA,KAAS,IAC5Dq9B,EAAWy4C,IAAgB91E,EAAAA,EAAAA,KAAS,GACrChC,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAM41E,GAA0B98E,EAAAA,EAAAA,KAAY,KAC1CujC,EAAey3C,EAAAA,GAAAA,qBACd,CAACz3C,IAEEw5C,GAA0B/8E,EAAAA,EAAAA,KAAY,KAC1CujC,EAAey3C,EAAAA,GAAAA,8BACd,CAACz3C,IAEEy5C,GAA6Bh9E,EAAAA,EAAAA,KAAawiE,IAC9Cga,EAAmBha,EAAOv+C,OAAQu+C,EAAOya,mBAAqBl7D,GAC9DwhB,EAAey3C,EAAAA,GAAAA,wBACd,CAACj5D,EAAey6D,EAAoBj5C,KAEvCrhC,EAAAA,EAAAA,KAAU,KACRy6E,GAAgB9iE,MAAAA,OAAD,EAACA,EAAMmiE,sBAAwB,IAC9Ca,GAAyB,GACzB93E,YAAW,KACTgzE,GAAa,KA3D0B,OA6DxC,CAACl+D,IAEJ,MAAMqjE,GAAyBl9E,EAAAA,EAAAA,KAAa+C,IAC1C,MAAM,KAAE+e,GAAS/e,EAAE8G,OAEnB,SAASszE,EAA0BvsE,GACjC,OAAOA,QAAQhQ,EAGjB+7E,GAAgB1mC,IAAD,IACVA,EACH,CAACn0B,GAAOq7D,EAA0BlnC,EAAEn0B,OACvB,iBAATA,GAA2B,CAC7Bo6D,SAAUiB,EAA0BlnC,EAAEn0B,SAG1C+6D,GAAyB,KACxB,IAEGO,GAAwBp9E,EAAAA,EAAAA,KAAY,KACnC6Z,IAILk+D,GAAa,GACb0E,EAA8B,CAAEpxE,OAAQwO,EAAK3c,GAAImgF,aAAcX,OAC9D,CAAC7iE,EAAM6iE,EAAaD,IAEjBa,GAAoBl9E,EAAAA,EAAAA,KAAQ,IAC3ByZ,GAASA,EAAK6sB,UAAa7sB,EAAK6sB,SAAS62C,cAIvC1jE,EAAK6sB,SAAS62C,cAAcl/E,OAH1B,GAIR,CAACwb,IAEE2jE,GAAmBp9E,EAAAA,EAAAA,KAAQ,IAC1ByZ,GAASA,EAAK6sB,UAAa7sB,EAAK6sB,SAAS+2C,QAIvC5jE,EAAK6sB,SAAS+2C,QAAQv7D,QAAO,QAAC,aAAEm7D,GAAH,SAAsBv1E,QAAQu1E,MAHzD,IAIR,CAACxjE,IAEE6jE,GAAsB19E,EAAAA,EAAAA,KAAawiE,IACvC,MAAM,aAAE6a,GAAiB7a,EACzB,IAAK6a,IAAiBxjE,EACpB,OAGF,MAAM,oBAAEmiE,GAAwBniE,EAEhC,OAAOnc,OAAOw5B,KAAKmmD,GAAc76B,QAAO,CAACC,EAAQr4C,KAC/C,IACGizE,EAAajzE,IACV4xE,MAAAA,GAAAA,EAAsB5xE,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAOq4C,EAGT,MAAMk7B,EAxHZ,SAAqCvzE,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,QACE,QAqGgBwzE,CAA4BxzE,GAE5C,IAAKuzE,EACH,OAAOl7B,EAGT,MAAMo7B,EAAmB59E,EAAK09E,GAE9B,MAAQ,GAAEl7B,IAAUA,EAAOpkD,OAA6B,KAAIw/E,IAAxBA,MACnC,MACF,CAAChkE,EAAM5Z,IAEV,OACE,0BAAKU,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,yBAAIA,UAAU,kBAAkBsC,IAAI,QAAQhD,EAAK,6BAEjD,0BAAKU,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,eACLooB,SAAUwyC,EAAYoB,aACtBhsD,MAAO7xB,EAAK,wBACZ89E,UAAQ,EACRpjE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,YACLooB,SAAUwyC,EAAYsB,UACtBlsD,MAAO7xB,EAAK,6BACZ89E,UAAQ,EACRpjE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,eACLooB,SAAUwyC,EAAYT,eAAiBS,EAAYR,SACnDpqD,MAAO7xB,EAAK,gCACZ89E,UAAQ,EACRpjE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,YACLooB,SAAUwyC,EAAYuB,UACtBnsD,MAAO7xB,EAAK,6BACZ89E,UAAQ,EACRpjE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAUwyC,EAAYwB,WACtBpsD,MAAO7xB,EAAK,8BACZ89E,UAAQ,EACRpjE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,cACLooB,SAAUwyC,EAAYyB,YACtBrsD,MAAO7xB,EAAK,+BACZ89E,UAAQ,EACRpjE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,cACLooB,SAAUwyC,EAAY0B,YACtBtsD,MAAO7xB,EAAK,+BACZ89E,UAAQ,EACRpjE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAUwyC,EAAY2B,WACtBvsD,MAAO7xB,EAAK,8BACZ89E,UAAQ,EACRpjE,SAAUuiE,MAKhB,0BAAKv8E,UAAU,WACb,mBAACmjB,GAAA,EAAD,CACE1iB,KAAK,cACL8qC,WAAS,EACTD,QAAM,EACNprC,QAASi8E,GAET,2BAAMn8E,UAAU,SAASV,EAAK,wBAC9B,2BAAMU,UAAU,YAAY28E,KAIhC,0BAAK38E,UAAU,WACb,yBAAIA,UAAU,kBAAkBsC,IAAI,QAAQhD,EAAK,sBAEjD,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,WACLP,QAASk8E,GAER98E,EAAK,wBAGPu9E,EAAiB55D,KAAK4+C,GACrB,mBAAC1+C,GAAA,EAAD,CACE1Z,IAAKo4D,EAAOv+C,OACZtjB,UAAU,wCACVE,QAAS,IAAMm8E,EAA2Bxa,IAE1C,mBAACz+C,GAAA,EAAD,CACEE,OAAQu+C,EAAOv+C,OACfD,OAAQ05D,EAAoBlb,UAOtC,mBAACh6B,GAAA,EAAD,CACEtuB,QAAS0iE,EACT/7E,QAASu8E,EACTt8E,UAAWb,EAAK,QAChBua,SAAU8kB,GAETA,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,qBC1NvB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEojB,GAAkBpjB,EAE1B,MAAO,CAAEojB,cAAAA,KAJOrjB,EAnDoC,IAKlD,UALmD,KACvDmb,EADuD,cAEvDkI,EAFuD,OAGvDzhB,EAHuD,QAIvD4G,GACI,EACJ,MAAM,gBACJo3E,EADI,iBAEJC,IACE7+E,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNgiB,EAAQiD,IAAaljB,EAAAA,EAAAA,IAAS,IAE/BggB,GAAYvd,EAAAA,EAAAA,IAAyB,MAErC85E,GAAUp+E,EAAAA,EAAAA,KAAQ,KAAM,MAC5B,MAAMq+E,IAAsB,UAAA5kE,EAAK6sB,gBAAL,eAAe+2C,UAAW,IACnDj7B,QAAO,CAACk8B,EAAelc,KACjBA,EAAOmc,SAAYnc,EAAOoc,SAAWpc,EAAOv+C,SAAWlC,GAC1D28D,EAAI7xD,KAAK21C,EAAOv+C,QAEXy6D,IACN,IAGC74D,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAEpC,OAAO6B,EAAAA,EAAAA,IAAkBu4D,EAAoB54D,EAAW3D,KACvD,WAACrI,EAAK6sB,gBAAN,aAAC,EAAe+2C,QAAS17D,EAAeG,IAErC6iC,GAAmB/kD,EAAAA,EAAAA,KAAaikB,IACpCs6D,EAAiB,CAAElzE,OAAQwO,EAAK3c,GAAI+mB,OAAAA,IACpC/c,MACC,CAAC2S,EAAK3c,GAAIqhF,EAAkBr3E,IAE/B,OACE,mBAAC,GAAD,CACE5G,OAAQA,EACR0hB,cAAew8D,EACfv8D,UAAWA,EACXE,kBAAmBliB,EAAK,oBACxBiiB,OAAQA,EACRG,eAAgB8C,EAChB/C,SAAUk8D,EACVh8D,mBAAoByiC,EACpB79C,QAASA,QCyDf,IAAezI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IACxBgZ,KAAMwB,GAAclnB,EAAOonB,MAGnC,MAAO,CACLlM,KAAAA,EACAgM,UAAAA,EACAg5D,iBALuBhlE,KAASigE,EAAAA,EAAAA,IAAiBjgE,EAAM,aAAeA,EAAKggE,WAM3EnyD,UAAW7N,IAAQsW,EAAAA,EAAAA,IAActW,MAVnBnb,EA9FsC,IAOpD,IAPqD,KACzDmb,EADyD,UAEzDgM,EAFyD,iBAGzDg5D,EAHyD,UAIzDn3D,EAJyD,QAKzDxgB,EALyD,SAMzD+E,GACI,EACJ,MAAM,6BAAE6yE,IAAiCp/E,EAAAA,EAAAA,MAEnCO,GAAOC,EAAAA,EAAAA,MACN6+E,EAAuBC,EAAqBC,IAAwB35D,EAAAA,GAAAA,MAE3E9D,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAMg4E,GAAiB9+E,EAAAA,EAAAA,KAAQ,IACxByZ,GAASA,EAAK6sB,UAAa7sB,EAAK6sB,SAAS62C,cAIvC1jE,EAAK6sB,SAAS62C,cAHZ,IAIR,CAAC1jE,IAEEslE,GAAen/E,EAAAA,EAAAA,KAAawiE,IAChC,IAAKA,EAAO4c,eACV,OAGF,MAAMC,EAAex5D,EAAU28C,EAAO4c,gBACtC,OAAKC,EAIEp/E,EAAK,iBAAiB22B,EAAAA,EAAAA,IAAgByoD,SAJ7C,IAKC,CAACp/E,EAAM4lB,IAEJy5D,GAAoBt/E,EAAAA,EAAAA,KAAawiE,IACrC,GAAK3oD,EAIL,MAAO,CAAC,CACN0N,MAAOtnB,EAAK,WACZmB,KAAM,SACNozB,aAAa,EACb0vB,QAAS,IAAM46B,EAA6B,CAC1CzzE,OAAQwO,EAAK3c,GACb+mB,OAAQu+C,EAAOv+C,OACfo5D,aAAc,SAGjB,CAACp9E,EAAM4Z,EAAMilE,IAEhB,OACE,0BAAKn+E,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjD,wBAAGD,UAAU,cAAcV,EAAKynB,EAAY,oBAAsB,oBAEjEw3D,EAAet7D,KAAK4+C,GACnB,mBAAC1+C,GAAA,EAAD,CACE1Z,IAAKo4D,EAAOv+C,OACZtjB,UAAU,sBACV2F,QAAM,EACNuzB,eAAgBylD,EAAkB9c,IAElC,mBAACz+C,GAAA,EAAD,CACEE,OAAQu+C,EAAOv+C,OACfD,OAAQm7D,EAAa3c,QAI1Bqc,GACC,mBAACr2C,GAAA,EAAD,CACEtuB,SAAO,EACPrZ,QAASm+E,EACTl+E,UAAWb,EAAK,0CAEhB,wBAAGU,UAAU,0BAGhBkZ,GAAQglE,GACP,mBAAC,GAAD,CACEhlE,KAAMA,EACNvZ,OAAQy+E,EACR73E,QAAS+3E,WCvEjBM,GAAsB,+BAkS5B,IAAe9gF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IAC1B,SAAE5J,GAAa9C,EAAOg6E,WACtB6G,EAAoB13E,QAAQ+R,MAAAA,OAAD,EAACA,EAAM2lE,oBAClC,QAAE7F,GAAYh7E,EAAOg6E,WAAW17C,SAAS5xB,IAAW,GAE1D,MAAO,CACLwO,KAAAA,EACApY,SAAAA,EACA+9E,kBAAAA,EACA5F,eAAeE,EAAAA,EAAAA,IAAiBjgE,EAAM,cACtCmgE,WAAWF,EAAAA,EAAAA,IAAiBjgE,EAAM,eAClCqhB,aAAcv8B,EAAOu8B,aACrB++C,gBAAiBN,EACjBO,wBAAuB,UAAEv7E,EAAOkrD,0BAAT,aAAE,EAA2B3nC,QAAQiU,IAAOA,EAAE6zB,aAAY3rD,UAfnEK,EAhS6B,IAa3C,0BAb4C,OAChD2M,EADgD,KAEhDwO,EAFgD,SAGhDpY,EAHgD,kBAIhD+9E,EAJgD,cAKhD5F,EALgD,UAMhDI,EANgD,gBAOhDC,EAPgD,aAQhD/+C,EARgD,wBAShDg/C,EATgD,eAUhD32C,EAVgD,QAWhDr8B,EAXgD,SAYhD+E,GACI,EACJ,MAAM,WACJmuE,EADI,iBAEJqF,EAFI,gBAGJ3G,EAHI,aAIJwB,EAJI,cAKJC,EALI,SAMJ3lD,EANI,wBAOJ4lD,EAPI,qBAQJC,IACE/6E,EAAAA,EAAAA,MAEEg7E,EAAe7gE,GAAQA,EAAK0N,OAAe,GAC3CozD,EAAe9gE,MAAAA,GAAAA,EAAM6sB,UAAY7sB,EAAK6sB,SAASlf,OAAe,GAC9D80C,EAAgBziD,MAAAA,GAAH,UAAGA,EAAM6sB,gBAAT,aAAG,EAAgB61B,cAE/Bwc,EAAoBC,EAAkBC,IAAqB3zD,EAAAA,GAAAA,MAC3D4hB,EAAwBC,IAA6BllC,EAAAA,EAAAA,KAAS,IAC9DslB,EAAOulC,IAAY7qD,EAAAA,EAAAA,IAASy4E,IAC5BlzD,EAAOulC,IAAY9qD,EAAAA,EAAAA,IAAS04E,IAC5BruE,EAAO+6B,IAAYplC,EAAAA,EAAAA,OACnBskB,EAAO6gB,KAAYnlC,EAAAA,EAAAA,MACpB24E,GAAY/gE,IAAQrM,EAAAA,EAAAA,IAAkBqM,GACtC4tB,IAAuB/5B,EAAAA,EAAAA,GAASktE,IAAW,EAAOjtE,EAAAA,GAAAA,SAClD1N,IAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,IAEzBhF,EAAAA,EAAAA,KAAU,KACJg5B,IACFs/C,EAAwB,CAAEnvE,OAAAA,IAC1BmvE,EAAwB,CAAEnvE,OAAAA,EAAQyvE,WAAW,IAC7CL,EAAqB,CAAEpvE,OAAAA,OAExB,CAACA,EAAQmvE,EAAyBt/C,EAAcu/C,KAEnDv4E,EAAAA,EAAAA,KAAU,KACJT,IAAa23E,EAAAA,GAAAA,WACfjyC,GAA0B,GAC1BC,QAASxmC,MAEV,CAACa,IAEJ,MAAM06E,IAAetiE,MAAAA,GAAD,UAACA,EAAM6sB,gBAAP,iBAAC,EAAgB01C,oBAAjB,aAAC,EAA8B/9E,SAAW,EACxDi/E,IAAqBzjE,MAAAA,GAAD,UAACA,EAAM6sB,gBAAP,iBAAC,EAAgB62C,qBAAjB,aAAC,EAA+Bl/E,SAAW,EAE/D08E,IAAsB/6E,EAAAA,EAAAA,KAAY,KACtCujC,EAAey3C,EAAAA,GAAAA,mBACd,CAACz3C,IAEE03C,IAAwBj7E,EAAAA,EAAAA,KAAY,KACxCujC,EAAey3C,EAAAA,GAAAA,cACd,CAACz3C,IAEE23C,IAAuBl7E,EAAAA,EAAAA,KAAY,KACvCujC,EAAey3C,EAAAA,GAAAA,aACd,CAACz3C,IAEE63C,IAA4Bp7E,EAAAA,EAAAA,KAAY,KAC5CujC,EAAey3C,EAAAA,GAAAA,sBACd,CAACz3C,IAUE83C,IAAiBr7E,EAAAA,EAAAA,KAAaylE,IAClCp+B,EAASo+B,GACTt+B,GAA0B,KACzB,IAEGimB,IAAoBptD,EAAAA,EAAAA,KAAa+C,IACrC+pD,EAAS/pD,EAAE8G,OAAO+G,OAClBu2B,GAA0B,KACzB,IAEGm0C,IAAoBt7E,EAAAA,EAAAA,KAAa+C,IACrCgqD,EAAShqD,EAAE8G,OAAO+G,OAClBu2B,GAA0B,KACzB,IAEGu4C,IAAsB1/E,EAAAA,EAAAA,KAAY,KACtC,MAAMw7E,EAAej0D,EAAMue,OACrB21C,EAAej0D,EAAMse,OAEtB01C,EAAan9E,OAKlB+7E,EAAW,CACT/uE,OAAAA,EACAkc,MAAOi0D,EACPh0D,MAAOi0D,EACPnvE,MAAAA,IARA86B,GAASm4C,MAUV,CAAC/3D,EAAOnc,EAAQiB,EAAOib,EAAO6yD,IAE3BuF,IAAyB3/E,EAAAA,EAAAA,KAAY,KACzCy/E,EAAiB,CAAEp0E,OAAAA,EAAQwwE,WAAY2D,MACtC,CAACn0E,EAAQm0E,EAAmBC,IAEzBG,IAAyB5/E,EAAAA,EAAAA,KAAY,KACzCujC,EAAey3C,EAAAA,GAAAA,sBACd,CAACz3C,IAEEu5C,IAA0B98E,EAAAA,EAAAA,KAAY,KAC1CujC,EAAey3C,EAAAA,GAAAA,uBACd,CAACz3C,IAEEs8C,IAAsB7/E,EAAAA,EAAAA,KAAY,KAClC6Z,EAAKggE,UACPU,EAAc,CAAElvE,OAAQwO,EAAK3c,KAE7Bo9E,EAAa,CAAEjvE,OAAQwO,EAAK3c,KAG9B+7E,IACAH,IACAlkD,EAAS,CAAE13B,QAAI0D,MACd,CAACiZ,EAAKggE,UAAWhgE,EAAK3c,GAAI+7E,EAAmBH,EAAiBwB,EAAcC,EAAe3lD,IAExFknD,IAAwB,UAAAjiE,EAAK6sB,gBAAL,mBAAegrB,wBAAf,eAAiCrzD,SAAU,EAEzE,GAAIwb,EAAKoiD,aACP,OAGF,MAAM38B,GAAY79B,IAAa23E,EAAAA,GAAAA,WAE/B,OACE,0BAAKz4E,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC2nC,GAAA,EAAD,CACEb,qBAAsBA,GACtB9sB,SAAU0gE,GACV7gE,UAAWo/D,IAEb,mBAAC52D,GAAA,EAAD,CACE9lB,GAAG,gBACH40B,MAAO7xB,GAAK,oBACZ0a,SAAUyyC,GACVx8C,MAAO2W,EACPhB,MAAOA,IAAUg5D,GAAsBh5D,OAAQ3lB,EAC/C4Z,UAAWo/D,IAEb,mBAAC52D,GAAA,EAAD,CACE9lB,GAAG,gBACHyD,UAAU,OACVmxB,MAAO7xB,GAAK,0BACZ0a,SAAU2gE,GACV1qE,MAAO4W,EACPhN,UAAWo/D,IAEZ//D,EAAKggE,WACJ,mBAAC/1D,GAAA,EAAD,CAAU1iB,KAAK,OAAO8qC,WAAS,EAACrrC,QAASk6E,IACvC,2BAAMp6E,UAAU,SAASV,GAAK,gBAC9B,2BAAMU,UAAU,YAAYkZ,EAAKyrB,SAAWrlC,GAAK,cAAgBA,GAAK,iBAG1E,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,UACL8qC,WAAS,EACTrrC,QAASo6E,GACTzgE,UAAWo/D,GAEX,2BAAMj5E,UAAU,SAASV,GAAK,eAC9B,2BAAMU,UAAU,YAA4BV,GAAhBq8D,EAAqB,mBAA2B,SAE7E0d,GACC,mBAACl2D,GAAA,EAAD,CACE1iB,KAAK,OACLP,QAnHe,KACzB0iC,EAAey3C,EAAAA,GAAAA,UAmHL9uC,WAAS,EACT1xB,UAAWy/D,GAEX,2BAAMt5E,UAAU,SAASV,GAAK,0BAC9B,2BAAMU,UAAU,YACbs5E,GAAkBqC,EAAAA,GAAAA,IAAcrC,EAAgB57E,QAAU4B,GAAK,aAIrE6H,QAAO,UAAC+R,EAAK0iE,oBAAN,aAAC,EAAmBl+E,SAC1B,mBAACylB,GAAA,EAAD,CACE1iB,KAAK,kBACLP,QA5HgB,KAC1B0iC,EAAey3C,EAAAA,GAAAA,eA4HL9uC,WAAS,GAET,2BAAMvrC,UAAU,SAASV,GAAK,sBAC9B,2BAAMU,UAAU,aACb27E,EAAAA,GAAAA,IAAcziE,EAAK0iE,aAAcl+E,UAIxC,mBAACylB,GAAA,EAAD,CACE1iB,KAAK,YACL8qC,WAAS,EACTrrC,QAASq6E,GACT1gE,UAAWo/D,GAEX,2BAAMj5E,UAAU,SAASV,GAAK,cAC9B,2BAAMU,UAAU,WAAWsC,IAAI,QAC5B64E,GADH,IAC2B5B,IAG7B,0BAAKv5E,UAAU,gCACb,mBAACspC,GAAA,EAAD,CACEC,QAASs1C,EACT1tD,MAAO7xB,GAAK,uBACZ0a,SAAUglE,OAIhB,0BAAKh/E,UAAU,WACb,mBAACmjB,GAAA,EAAD,CACE1iB,KAAK,QACL8qC,WAAS,EACTrrC,QAASu6E,IAET,2BAAMz6E,UAAU,SAASV,GAAK,0BAC9B,2BAAMU,UAAU,YAAYw7E,KAE9B,mBAACr4D,GAAA,EAAD,CACE1iB,KAAK,QACL8qC,WAAS,EACTrrC,QAAS++E,IAET,2BAAMj/E,UAAU,QAAQsC,IAAI,QAAQhD,GAAK,uBACzC,2BAAMU,UAAU,WAAWsC,IAAI,QAAQhD,GAAK,cAAD,UAAgB4Z,EAAK6oC,oBAArB,QAAqC,EAAG,OAErF,mBAAC5+B,GAAA,EAAD,CACE1iB,KAAK,cACL8qC,WAAS,EACTD,QAAM,EACNprC,QAASi8E,IAET,2BAAMn8E,UAAU,SAASV,GAAK,wBAC9B,2BAAMU,UAAU,YAAY28E,MAGhC,0BAAK38E,UAAU,WACb,mBAACmjB,GAAA,EAAD,CAAU1iB,KAAK,SAASkF,QAAM,EAACkuB,aAAW,EAAC3zB,QAASm4E,GACjDn/D,EAAKggE,UAAY55E,GAAK,iBAAmBA,GAAK,mBAIrD,mBAACuoC,GAAA,EAAD,CACEtuB,QAASgtB,EACTrmC,QAAS6+E,GACTllE,SAAU8kB,GACVx+B,UAAWb,GAAK,SAEfq/B,GACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,gBAGjB,mBAACooB,GAAA,EAAD,CACEzoB,OAAQy4E,EACR7xE,QAAS+xE,EACTr3E,KAAMiY,EAAKggE,UAAY55E,GAAK,sBAAwBA,GAAK,qBACzD+oB,aAAcnP,EAAKggE,UAAY55E,GAAK,iBAAmBA,GAAK,gBAC5DgpB,eAAgB42D,GAChBt7C,sBAAoB,S,aClS5B,MAgKA,IAAe9lC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IAC1B,oBAAE+5B,IAAwB06C,EAAAA,EAAAA,IAAiBnhF,EAAQ0M,GAEzD,MAAO,CACLwO,KAAAA,EACA6N,WAAWyI,EAAAA,EAAAA,IAActW,GACzBpY,SAAU9C,EAAOg6E,WAAWl3E,SAC5B2jC,oBAAAA,EACAtmC,YAAa+a,MAAAA,OAAF,EAAEA,EAAM/a,eAVLJ,EAhKqC,IAQnD,UARoD,KACxDmb,EADwD,QAExD3S,EAFwD,SAGxD+E,EAHwD,UAIxDyb,EAJwD,SAKxDjmB,EALwD,oBAMxD2jC,EANwD,YAOxDtmC,GACI,EACJ,MAAM,gBACJihF,EADI,iBAEJC,EAFI,kBAGJC,EAHI,kBAIJC,IACExgF,EAAAA,EAAAA,MAEE+pE,EAAW3hE,QAAQ+R,EAAKyrB,UACxB66C,EAAW,UAAGtmE,EAAK6sB,gBAAR,aAAG,EAAe05C,YAE5BC,EAAaC,IAAkBr+E,EAAAA,EAAAA,IAAsBwnE,EAAW,SAAW,YAC3EnkC,EAAUC,IAAetjC,EAAAA,EAAAA,OACzBs+E,EAA2BC,EAAyBC,IAA4Bn7D,EAAAA,GAAAA,KAEjFo7D,EAAY54E,QACC,WAAhBu4E,GAA4B/6C,GAAYF,GACrB,YAAhBi7C,GAA6B5W,IAGnCjoD,EAAAA,EAAAA,IAAevV,EAAU/E,IAEzBhF,EAAAA,EAAAA,KAAU,KACJm+E,IAAgBF,GAClBF,MAED,CAACI,EAAaF,EAAaF,IAE9B,MAAMU,GAAqB3gF,EAAAA,EAAAA,KAAa4Q,IACtC0vE,EAAe1vE,KACd,IAEGgwE,GAA+B5gF,EAAAA,EAAAA,KAAa4Q,IAChDsvE,EAAkB,CAChB70E,OAAQwO,EAAK3c,GACb4B,YAAuB,cAAV8R,MAEd,CAACiJ,EAAK3c,GAAIgjF,IAEPW,GAAa7gF,EAAAA,EAAAA,KAAY,KAC7BggF,EAAiB,CAAE16C,SAA0B,WAAhB+6C,EAA2B/6C,EAAW,OAClE,CAAC+6C,EAAaL,EAAkB16C,IAE7Bw7C,GAA0B9gF,EAAAA,EAAAA,KAAY,KAC1CygF,IACAR,MACC,CAACQ,EAA0BR,IAExBhgF,GAAOC,EAAAA,EAAAA,KACP6gF,EAAcr5D,EAAY,UAAY,OACtCs5D,EAAct5D,EAAY,UAAY,QAEtCsK,EAAU,CACd,CAAEphB,MAAO,UAAWkhB,MAAO7xB,EAAM,GAAE8gF,YAAuBttC,SAAUxzC,EAAM,GAAE8gF,iBAC5E,CAAEnwE,MAAO,SAAUkhB,MAAO7xB,EAAM,GAAE8gF,WAAsBttC,SAAUxzC,EAAM,GAAE8gF,iBAGtEE,EAAoB,CAAC,CACzBrwE,MAAO,UACPkhB,MAAO7xB,EAAK,yCACX,CACD2Q,MAAO,YACPkhB,MAAO7xB,EAAK,2CAGRq/B,EAAY79B,IAAa23E,EAAAA,GAAAA,WAE/B,OACE,0BAAKz4E,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjD,yBAAID,UAAU,mBAAmBV,EAAM,GAAE+gF,UACzC,mBAACjvD,GAAA,EAAD,CACEE,SAAUouD,EACVv+D,KAAK,eACLkQ,QAASA,EACTrX,SAAUgmE,KAGG,YAAhBN,EACC,0BAAK1/E,UAAU,UAAUsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAChDu/E,EACC,sCACE,mBAACe,GAAA,EAAD,CAAUt6E,IAAKu5E,EAAax/E,UAAU,aAAaiB,KAAMu+E,IACzD,wBAAGx/E,UAAU,eAAesC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACnDX,EAAM,GAAE8gF,qBAGX,mBAACj9D,GAAA,EAAD,CAAU1iB,KAAK,SAASkF,QAAM,EAACkuB,aAAW,EAAC3zB,QAAS2/E,GACjDvgF,EAAK,eAER,mBAAC8oB,GAAA,EAAD,CACEzoB,OAAQigF,EACRr5E,QAASu5E,EACT7+E,KAAM3B,EAAK,eACX+oB,aAAc/oB,EAAK,gBACnBgpB,eAAgB63D,EAChBv8C,sBAAoB,KAIxB,mBAACpgB,GAAA,EAAD,OAIJ,0BAAKxjB,UAAU,qBACb,mBAAC4nC,GAAD,CACEpD,QAAM,EACND,gBAAiBrrB,EAAKyrB,SACtBhG,UAAWA,EACX8F,oBAAqBA,EACrBC,cAAe06C,EACfplE,SAAU4qB,IAEZ,wBAAG5kC,UAAU,eAAesC,IAAI,QAC7BhD,EAAM,GAAE+gF,qCAIf,0BAAKrgF,UAAU,UAAUsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjD,yBAAID,UAAU,mBACXV,EAAKynB,EAAY,4CAA8C,4CAElE,mBAACqK,GAAA,EAAD,CACEE,SAAUnzB,EAAc,YAAc,UACtCgjB,KAAK,kBACLkQ,QAASivD,EACTtmE,SAAUimE,IAEZ,wBAAGjgF,UAAU,gBAEPV,EADHynB,EACQ,2CACA,6CAIf,mBAAC8gB,GAAA,EAAD,CACEtuB,QAASwmE,EACTlmE,SAAU8kB,EACVx+B,UAAWb,EAAK,QAChBY,QAASggF,GAERvhD,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,qBCqEvB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IAC1B,iBAAE81E,EAAkB98D,KAAM4gC,GAAetmD,EAAOylB,MAKtD,MAAO,CACLvK,KAAAA,EACAorC,WAAAA,EACAk8B,iBAAAA,EACAC,WARiBvnE,MAAAA,GAAA,UAAAA,EAAM6sB,gBAAN,SAAgB61B,cAC/BzwD,EAAAA,EAAAA,IAAWnN,EAAQkb,EAAK6sB,SAAS61B,mBACjC37D,EAOF8mB,UAAW7N,IAAQsW,EAAAA,EAAAA,IAActW,MAbnBnb,EA9NgC,IAU9C,IAV+C,KACnDmb,EADmD,QAEnD3S,EAFmD,SAGnD+E,EAHmD,OAInDZ,EAJmD,WAKnD45C,EALmD,WAMnDm8B,EANmD,iBAOnDD,EAPmD,UAQnDz5D,EARmD,eASnD6b,GACI,EACJ,MAAM,wBACJ89C,EADI,oBAEJC,EAFI,sBAGJC,IACE7hF,EAAAA,EAAAA,OAEG8hF,EAAeC,IAAoBx/E,EAAAA,EAAAA,OACnCq2B,EAAe4S,IAAoBjpC,EAAAA,EAAAA,OACnCkpC,EAAmBC,IAAwBnpC,EAAAA,EAAAA,KAAS,GACrDopC,GAAsBrrC,EAAAA,EAAAA,KAAY,IAAMorC,GAAqB,IAAO,KACnEs2C,EAAgCC,EAA8BC,IAAiCt8D,EAAAA,GAAAA,MAC/Fu8D,EAA8BC,EAA4BC,IAA+Bz8D,EAAAA,GAAAA,KAC1FrlB,GAAOC,EAAAA,EAAAA,KACPq8D,EAAe6kB,MAAAA,OAAH,EAAGA,EAAYlkF,IAEjCskB,EAAAA,EAAAA,IAAevV,EAAU/E,IAEzBhF,EAAAA,EAAAA,KAAU,KACRm/E,MACC,CAACA,KAEJn/E,EAAAA,EAAAA,KAAU,KACHo2B,IACHN,EAAAA,GAAAA,GAAiB,oBAAoBC,KAAKiT,KAE3C,CAAC5S,IAEJ,MAAM0pD,GAA4BhiF,EAAAA,EAAAA,KAAY,KAC5C4hF,IACAL,EAAsB,CAAEU,UAAWv6D,EAAYrc,EAASkxD,IACnD70C,GACH6b,EAAey3C,EAAAA,GAAAA,WAEhB,CAAC4G,EAA+BL,EAAuB75D,EAAWrc,EAAQkxD,EAAch5B,IAErF2+C,GAA0BliF,EAAAA,EAAAA,KAAY,KAC1C+hF,IACAT,EAAoB,CAAEW,UAAW52E,EAAQA,OAAQm2E,MAChD,CAACO,EAA6BT,EAAqBj2E,EAAQm2E,IAqJ9D,OACE,0BAAK7gF,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,gBACZ23B,GACC,mBAACD,GAAA,EAAD,CACEn7B,GAAG,wBACHuD,KAAM0hF,EAAAA,GACN7pD,cAAeA,EACfC,KAAM4S,EACNzS,QAAM,EACNC,OAAQ0S,KAIb+1C,GA7FL,8BACE,mBAACt9D,GAAA,EAAD,CACEnjB,UAAU,sBACVguC,UAAQ,GAER,mBAACzqB,GAAA,EAAD,CAAe7Y,OAAQ+1E,EAAYlkF,MAErC,mBAAC4mB,GAAA,EAAD,CACE1iB,KAAK,SACLkF,QAAM,EACNkuB,aAAW,EACX3zB,QAAS8gF,GAER1hF,EAAKynB,EAAY,wBAA0B,4BAE9C,mBAACqB,GAAA,EAAD,CACEzoB,OAAQohF,EACRx6E,QAAS06E,EACTv+D,OAjFJ,0BAAK1iB,UAAU,gBACb,mBAACgZ,GAAA,EAAD,CACElZ,KAAK,OACLoZ,KAAMunE,IAER,0BAAKzgF,UAAU,eACZV,EAAKynB,EAAY,wBAA0B,6BA4E5C1Y,WAAW8K,EAAAA,GAAAA,GACT7Z,EAAKynB,EAAY,+BAAiC,6BAA8B05D,EAAY75D,OAC5F,CAAC,KAAM,oBAETyB,aAAc/oB,EAAKynB,EAAY,wBAA0B,2BACzDuB,eAAgB+4D,EAChBz9C,sBAAoB,MAqElB68C,GA7DN,8BACE,wBAAGzgF,UAAU,eAAesC,IAAI,QAAQhD,EAAK,0BAE7C,0BAAKmiF,eAAa,GAChB,mBAACt+D,GAAA,EAAD,CACE1Z,IAAI,eACJhJ,KAAK,QACLkF,QAAM,EACNovE,cAAe,EACf/0E,UAAU,mBAETV,EAAK,0BAEPkhF,EACCA,EAAiBv9D,KAAI,CAAC1mB,EAAI2mB,IACxB,mBAACC,GAAA,EAAD,CACE1Z,IAAKlN,EACLw4E,cAAe7xD,EAAI,EACnBljB,UAAU,kCACVE,QAAS,KAzHrB4gF,EA0HgCvkF,GAzHhC4kF,MA4HY,mBAAC59D,GAAA,EAAD,CAAe7Y,OAAQnO,OAI3B,mBAAC0hC,GAAA,EAAD,CAAcx0B,IAAI,gBAAgBsrE,cAAe,EAAG9zE,KAAK,gCAG7D,wBAAGjB,UAAU,yBAAyBsC,IAAI,QAAQhD,EAAK,2BACvD,mBAAC8oB,GAAA,EAAD,CACEzoB,OAAQuhF,EACR36E,QAAS66E,EACT1+D,OAtHR,WACE,MAAMg/D,EAAcp9B,EAAWu8B,GAE/B,GAAKa,EAIL,OACE,0BAAK1hF,UAAU,gBACb,mBAACgZ,GAAA,EAAD,CACElZ,KAAK,OACLoZ,KAAMwoE,IAER,0BAAK1hF,UAAU,eACZV,EAAK,uCAwGEqiF,GACRtzE,UAnGR,WACE,MAAMqzE,EAAcp9B,EAAWu8B,GAE/B,GAAKa,EAIL,OAAIA,EAAYE,gBACPzoE,EAAAA,GAAAA,GACJ,yBAAwBuoE,EAAY96D,sCAAsC1N,EAAM0N,WACjF,CAAC,KAAM,qBAQJzN,EAAAA,GAAAA,GAEJ,yBAAwBuoE,EAAY96D,sCAAsC1N,EAAM0N,kFACjF,CAAC,KAAM,oBA8EQi7D,GACXx5D,aAAc/oB,EAAK,uBACnBgpB,eAAgBi5D,EAChBO,mBAAiB,YC2B3B,IAAehkF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA6D,IAApD,OAAE0M,EAAF,wBAAUq3E,GAA0C,EAC3D,MAAM7oE,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAGhC,MAAO,CAAEwO,KAAAA,EAAM8oE,sBAFe9oE,EAAKggE,WAAa6I,MAHhChkF,EAhO0C,IAOxD,IAPyD,KAC7Dmb,EAD6D,qBAE7D+oE,EAF6D,eAG7Dr/C,EAH6D,oBAI7Do/C,EAJ6D,QAK7Dz7E,EAL6D,SAM7D+E,GACI,EACJ,MAAM,6BAAE6yE,IAAiCp/E,EAAAA,EAAAA,OAElCg9E,EAAaC,IAAkB16E,EAAAA,EAAAA,IAA8B,KAC7D26E,EAAuBC,IAA4B56E,EAAAA,EAAAA,KAAS,IAC5Dq9B,EAAWy4C,IAAgB91E,EAAAA,EAAAA,KAAS,IACpC4gF,EAA6BC,EAA2BC,IAA8Bz9D,EAAAA,GAAAA,KACvFrlB,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAM87E,GAAqB5iF,EAAAA,EAAAA,KAAQ,KACjC,GAAKyZ,GAASA,EAAK6sB,UAAa7sB,EAAK6sB,SAAS+2C,QAI9C,OAAO5jE,EAAK6sB,SAAS+2C,QAAQhnD,MAAK,QAAC,OAAExS,GAAH,SAAgBA,IAAW2+D,OAC5D,CAAC/oE,EAAM+oE,KAEV1gF,EAAAA,EAAAA,KAAU,KACJ2X,MAAAA,GAAAA,EAAM6sB,UAAYk8C,IAAyBI,GAC7Cz/C,EAAey3C,EAAAA,GAAAA,oBAEhB,CAACnhE,EAAM0pB,EAAgBy/C,EAAoBJ,KAE9C1gF,EAAAA,EAAAA,KAAU,KACRy6E,GAAgBqG,MAAAA,OAAD,EAACA,EAAoB3F,gBAAkBxjE,MAAAA,OAAvC,EAAuCA,EAAMmiE,sBAAwB,IACpFa,GAAyB,GACzB9E,GAAa,KACZ,CAACl+D,EAAMmpE,IAEV,MAAM9F,GAAyBl9E,EAAAA,EAAAA,KAAa+C,IAC1C,MAAM,KAAE+e,GAAS/e,EAAE8G,OAEnB,SAASszE,EAA0BvsE,GACjC,OAAOA,QAAQhQ,EAGjB+7E,GAAgB1mC,IAAD,IACVA,EACH,CAACn0B,GAAOq7D,EAA0BlnC,EAAEn0B,OACvB,iBAATA,GAA2B,CAC7Bo6D,SAAUiB,EAA0BlnC,EAAEn0B,SAG1C+6D,GAAyB,KACxB,IAEGO,GAAwBp9E,EAAAA,EAAAA,KAAY,KACnC6Z,GAAS+oE,IAId7K,GAAa,GACb+G,EAA6B,CAC3BzzE,OAAQwO,EAAK3c,GACb+mB,OAAQ2+D,EACRvF,aAAcX,OAEf,CAAC7iE,EAAM+oE,EAAsBlG,EAAaoC,IAEvCmE,GAAqBjjF,EAAAA,EAAAA,KAAY,KAChC6Z,GAAS+oE,GAId9D,EAA6B,CAC3BzzE,OAAQwO,EAAK3c,GACb+mB,OAAQ2+D,EACRvF,aAAc,CACZ6F,cAAc,OAGjB,CAACrpE,EAAM+oE,EAAsB9D,IAE1BqE,GAAuBnjF,EAAAA,EAAAA,KAAaoK,KACpCu4E,MAIC9oE,IAASA,EAAKmiE,sBAIZniE,EAAKmiE,oBAAoB5xE,IAC/B,CAACyP,EAAM8oE,IAEV,GAAKK,EAIL,OACE,0BAAKriF,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACmjB,GAAA,EAAD,CAAU6qB,UAAQ,EAAChuC,UAAU,uBAC3B,mBAACojB,GAAA,EAAD,CAAiBE,OAAQ++D,EAAmB/+D,UAG9C,yBAAItjB,UAAU,uBAAuBsC,IAAI,QAAQhD,EAAK,0BAEtD,0BAAKU,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,eACLooB,SAAUwyC,EAAYoB,aACtBhsD,MAAO7xB,EAAK,wBACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,gBAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,YACLooB,SAAUwyC,EAAYsB,UACtBlsD,MAAO7xB,EAAK,6BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,aAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,eACLooB,SAAUwyC,EAAYT,eAAiBS,EAAYR,SACnDpqD,MAAO7xB,EAAK,gCACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,gBAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,YACLooB,SAAUwyC,EAAYuB,UACtBnsD,MAAO7xB,EAAK,6BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,aAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAUwyC,EAAYwB,WACtBpsD,MAAO7xB,EAAK,8BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,cAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,cACLooB,SAAUwyC,EAAYyB,YACtBrsD,MAAO7xB,EAAK,+BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,eAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,cACLooB,SAAUwyC,EAAY0B,YACtBtsD,MAAO7xB,EAAK,+BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,eAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAUwyC,EAAY2B,WACtBvsD,MAAO7xB,EAAK,8BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,cAC/BxoE,SAAUuiE,OAKdyF,GACA,0BAAKhiF,UAAU,WACb,mBAACmjB,GAAA,EAAD,CAAU1iB,KAAK,cAAckF,QAAM,EAACkuB,aAAW,EAAC3zB,QAASiiF,GACtD7iF,EAAK,4BAMd,mBAACuoC,GAAA,EAAD,CACEtuB,QAAS0iE,EACT/7E,QAASu8E,EACTt8E,UAAWb,EAAK,QAChBua,SAAU8kB,GAETA,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,gBAIjB,mBAACooB,GAAA,EAAD,CACEzoB,OAAQuiF,EACR37E,QAAS67E,EACTnhF,KAAK,oEACLonB,aAAa,SACbC,eAAgBg6D,EAChB1+C,sBAAoB,SCnH5B,IAAe9lC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAEhC,MAAO,CACLwO,KAAAA,EACAkI,cAAepjB,EAAOojB,cACtB2F,WAAWyI,EAAAA,EAAAA,IAActW,MAPXnb,EA1GwC,IAQtD,IARuD,KAC3Dmb,EAD2D,UAE3D6N,EAF2D,cAG3D3F,EAH2D,eAI3DwhB,EAJ2D,mBAK3Di5C,EAL2D,QAM3Dt1E,EAN2D,SAO3D+E,GACI,EACJ,MAAMhM,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GAMzB,MAAMk1E,GAAeh8E,EAAAA,EAAAA,KAAQ,IACtByZ,EAAK6sB,UAAa7sB,EAAK6sB,SAAS01C,aAI9BviE,EAAK6sB,SAAS01C,aAAah+C,MAAK,CAACC,EAAGC,IACrCD,EAAEugD,SACI,EACCtgD,EAAEsgD,QACJ,EAGF,IAVA,IAYR,CAAC/kE,IAEEupE,GAAyBpjF,EAAAA,EAAAA,KAAawiE,IAC1Cga,EAAmBha,EAAOv+C,OAAQu+C,EAAOya,mBAAqBl7D,GAC9DwhB,EAAey3C,EAAAA,GAAAA,mBACd,CAACj5D,EAAey6D,EAAoBj5C,IAEjC8/C,GAAsBrjF,EAAAA,EAAAA,KAAY,KACtCujC,EAAey3C,EAAAA,GAAAA,kBACd,CAACz3C,IAEE+/C,GAAkBtjF,EAAAA,EAAAA,KAAawiE,IACnC,GAAIA,EAAOoc,QACT,OAAO3+E,EAAK,kBAId,MAAM4lB,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAC9Bk/D,EAAiB/gB,EAAOya,iBAAmBp3D,EAAU28C,EAAOya,uBAAoBr8E,EAEtF,OAAI2iF,EACKtjF,EAAK,uBAAuB22B,EAAAA,EAAAA,IAAgB2sD,IAG9CtjF,EAAK,kBACX,CAACA,IAEJ,OACE,0BAAKU,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACmjB,GAAA,EAAD,CACE1iB,KAAK,SACL8qC,WAAS,EACTrrC,QApDV,WACE0iC,EAAey3C,EAAAA,GAAAA,sBAqDP,2BAAMr6E,UAAU,SAASV,EAAK,aAC9B,2BAAMU,UAAU,YAAYV,EAAKynB,EAAY,4BAA8B,yBAI/E,0BAAK/mB,UAAU,UAAUsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjD,wBAAGD,UAAU,aAAasC,IAAI,QAC3BykB,EACG,8DACA,6DAGL00D,EAAax4D,KAAK4+C,GACjB,mBAAC1+C,GAAA,EAAD,CACE1Z,IAAKo4D,EAAOv+C,OACZtjB,UAAU,sBACVE,QAAS,IAAMuiF,EAAuB5gB,IAEtC,mBAACz+C,GAAA,EAAD,CACEE,OAAQu+C,EAAOv+C,OACfD,OAAQs/D,EAAgB9gB,GACxB59B,eAAa,OAKnB,mBAAC4D,GAAA,EAAD,CACEtuB,SAAO,EACPrZ,QAASwiF,EACTviF,UAAWb,EAAK,oCAEhB,wBAAGU,UAAU,iCCqBzB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAGlC,MAAO,CAAEwO,MAFI/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,MAFhB3M,EA9HwC,IAAiC,IAAhC,KAAEmb,EAAF,QAAQ3S,EAAR,SAAiB+E,GAAe,EAC3F,MAAMhM,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAMk1E,GAAeh8E,EAAAA,EAAAA,KAAQ,IACtByZ,GAASA,EAAK6sB,UAAa7sB,EAAK6sB,SAAS01C,aAIvCviE,EAAK6sB,SAAS01C,aAAah+C,MAAK,CAACC,EAAGC,IACrCD,EAAEugD,SACI,EACCtgD,EAAEsgD,QACJ,EAGF,IAVA,IAYR,CAAC/kE,IAEEypE,GAAkBtjF,EAAAA,EAAAA,KAAawiE,GAC/BA,EAAOoc,QACF3+E,EAAK,kBAGPA,EAAK,iBACX,CAACA,IAEJ,OACE,0BAAKU,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,0BAA0BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjE,yBAAID,UAAU,kBAAkBsC,IAAI,QAApC,WAEA,0BAAKtC,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,qBACZ0a,cAAU/Z,KAGd,0BAAKD,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,2BACZ0a,cAAU/Z,KAGd,0BAAKD,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,4BACZ0a,cAAU/Z,KAGd,0BAAKD,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,6BACZ0a,cAAU/Z,KAGd,0BAAKD,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,iCACZ0a,cAAU/Z,KAGd,0BAAKD,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,gCACZ0a,cAAU/Z,KAGd,0BAAKD,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,gCACZ0a,cAAU/Z,MAKhB,0BAAKD,UAAU,0BAA0BsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GACjE,yBAAID,UAAU,kBAAkBsC,IAAI,QAAQhD,EAAK,6BAEjD,0BAAKU,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,SAAS,EACTpY,MAAO7xB,EAAK,qBACZ0a,cAAU/Z,KAIbw7E,EAAax4D,KAAK4+C,GACjB,mBAAC1+C,GAAA,EAAD,CACE1Z,IAAKo4D,EAAOv+C,OACZtjB,UAAU,uCACVE,aAASD,EACT0F,QAAM,GAEN,mBAAC2jC,GAAA,EAAD,CAAUnY,MAAM,GAAGoY,SAAS,IAC5B,mBAACnmB,GAAA,EAAD,CACEE,OAAQu+C,EAAOv+C,OACfD,OAAQs/D,EAAgB9gB,GACxB59B,eAAa,cCgO7B,IAAenmC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAA6D,IAApD,OAAE0M,EAAF,wBAAUq3E,GAA0C,EAC3D,MAAM7oE,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IACxBgZ,KAAMwB,GAAclnB,EAAOonB,OAC7B,cAAEhE,GAAkBpjB,EAI1B,MAAO,CACLkb,KAAAA,EACAgM,UAAAA,EACA9D,cAAAA,EACA2F,WAPgByI,EAAAA,EAAAA,IAActW,GAQ9B8oE,sBAP4B9oE,EAAKggE,WAAa6I,GAQ9Cc,cAAe3pE,EAAK4pE,eAdN/kF,EAjUsC,IAYpD,UAZqD,WACzDglF,EADyD,eAEzDC,EAFyD,cAGzDH,EAHyD,eAIzDjgD,EAJyD,KAKzD1pB,EALyD,UAMzDgM,EANyD,cAOzD9D,EAPyD,UAQzD2F,EARyD,oBASzDi7D,EATyD,QAUzDz7E,EAVyD,SAWzD+E,GACI,EACJ,MAAM,gBAAE23E,IAAoBlkF,EAAAA,EAAAA,OAErBg9E,EAAaC,IAAkB16E,EAAAA,EAAAA,IAA6B,KAC5D4sC,EAAWg1C,IAAgB5hF,EAAAA,EAAAA,IAAS6F,QAAQ47E,KAC5CpkD,EAAWy4C,IAAgB91E,EAAAA,EAAAA,KAAS,IACpC6hF,EAAiCC,EAA+BC,IAAkC1+D,EAAAA,GAAAA,MAClG2+D,EAAaC,IAAkBjiF,EAAAA,EAAAA,IAAS,IACzChC,GAAOC,EAAAA,EAAAA,MAEbshB,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAM87E,GAAqB5iF,EAAAA,EAAAA,KAAQ,KAAM,QACvC,MAAM+jF,EAAmB,UAAGtqE,EAAK6sB,gBAAR,iBAAG,EAAe01C,oBAAlB,aAAG,EAA6B3lD,MAAK,QAAC,OAAExS,GAAH,SAAgBA,IAAW0/D,KAIzF,IAAID,IAAeS,GAAwBR,EAA3C,CAIA,GAAID,EAAY,CACd,MAAM9pE,GAAOkM,EAAAA,EAAAA,MAAYC,MAAM1B,KAAKs/D,GAEpC,OAAO/pE,EAAO,CACZqK,OAAQrK,EAAK1c,GACbumF,YAAaD,EACbS,YAAahkF,EAAK,gBAClB2+E,SAAS,EACT3B,sBAAkBr8E,QAChBA,EAGN,OAAOujF,KACN,WAACtqE,EAAK6sB,gBAAN,aAAC,EAAe01C,aAAcoH,EAAeE,EAAYzjF,EAAM0jF,KAElEzhF,EAAAA,EAAAA,KAAU,KACJ2X,MAAAA,GAAAA,EAAM6sB,UAAYi9C,IAAmBX,GACvCz/C,EAAey3C,EAAAA,GAAAA,sBAEhB,CAACnhE,EAAM0pB,EAAgBy/C,EAAoBW,KAE9CzhF,EAAAA,EAAAA,KAAU,KACRy6E,GAAeqG,MAAAA,OAAA,EAAAA,EAAoBS,cAAe,IAClDS,IAAgBlB,MAAAA,OAAA,EAAAA,EAAoBiB,cAAe,IAAI/iC,OAAO,EA1DlC,KA2D5B2iC,EAAa/7E,QAAQ47E,IACrB3L,GAAa,KACZ,CAACyL,EAAeE,EAAYV,IAE/B,MAAM9F,GAAyBl9E,EAAAA,EAAAA,KAAa+C,IAC1C,MAAM,KAAE+e,GAAS/e,EAAE8G,OAMnB8yE,GAAgB1mC,IAAD,UACVA,EACH,CAACn0B,IANgClR,EAMCqlC,EAAEn0B,IAL7BlR,QAAQhQ,IADjB,IAAmCgQ,KAQnCizE,GAAa,KACZ,IAEGzG,GAAwBp9E,EAAAA,EAAAA,KAAY,KACnC2jF,IAIL5L,GAAa,GACb6L,EAAgB,CACdv4E,OAAQwO,EAAK3c,GACb+mB,OAAQ0/D,EACRF,YAAa/G,EACbuH,YAAAA,OAED,CAACN,EAAgBC,EAAiB/pE,EAAK3c,GAAIw/E,EAAauH,IAErDG,GAAqBpkF,EAAAA,EAAAA,KAAY,KAChC2jF,IAILC,EAAgB,CACdv4E,OAAQwO,EAAK3c,GACb+mB,OAAQ0/D,EACRF,YAAa,KAEfO,OACC,CAACnqE,EAAK3c,GAAI8mF,EAAgCL,EAAgBC,IAEvDT,GAAuBnjF,EAAAA,EAAAA,KAAaoK,MACpCilB,EAAAA,EAAAA,IAAiBxV,KAIjB8oE,GAAwB9oE,EAAK4pE,aAIzB5pE,EAAK4pE,YAAar5E,KACzB,CAACyP,EAAM8oE,IAEJ0B,GAAejkF,EAAAA,EAAAA,KAAQ,KAC3B,GAAIsjF,IAAeV,EACjB,OAGF,GAAIA,EAAmBpE,QACrB,OAAO3+E,EAAK,kBAGd,MAAMsjF,EAAiBP,EAAmB/F,iBACtCp3D,EAAUm9D,EAAmB/F,uBAC7Br8E,EAEJ,OAAI2iF,EACKtjF,EAAK,uBAAuB22B,EAAAA,EAAAA,IAAgB2sD,IAG9CtjF,EAAK,kBACX,CAACyjF,EAAYV,EAAoBn9D,EAAW5lB,IAEzCqkF,GAA0BtkF,EAAAA,EAAAA,KAAa+C,IAC3C,MAAM,MAAE6N,GAAU7N,EAAE8G,OACpBq6E,EAAetzE,GACfizE,GAAa,KACZ,IAEH,GAAKb,EAIL,OACE,0BAAKriF,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACmjB,GAAA,EAAD,CAAU6qB,UAAQ,EAAChuC,UAAU,uBAC3B,mBAACojB,GAAA,EAAD,CACEE,OAAQ++D,EAAmB/+D,OAC3BD,OAAQqgE,EACRz/C,eAAa,KAIjB,yBAAIjkC,UAAU,uBAAuBsC,IAAI,QAAQhD,EAAK,uBAEtD,0BAAKU,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,QAASpiC,QAAQ40E,EAAY2B,YAC7BvsD,MAAO7xB,EAAKynB,EAAY,6BAA+B,4BACvDq2D,UAAQ,EACRvjE,SAAU2oE,EAAqB,cAC/BxoE,SAAUuiE,KAGbx1D,GACC,0BAAK/mB,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,eACLooB,QAASpiC,QAAQ40E,EAAY6H,cAC7BzyD,MAAO7xB,EAAK,yBACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,gBAC/BxoE,SAAUuiE,KAIfx1D,GACC,0BAAK/mB,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,eACLooB,QAASpiC,QAAQ40E,EAAY8H,cAC7B1yD,MAAO7xB,EAAK,yBACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,gBAC/BxoE,SAAUuiE,KAIhB,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,iBACLooB,QAASpiC,QAAQ40E,EAAYjtD,gBAC7BqC,MAAO7xB,EAAKynB,EAAY,0BAA4B,gCACpDq2D,UAAQ,EACRvjE,SAAU2oE,EAAqB,kBAC/BxoE,SAAUuiE,MAGZx1D,GACA,0BAAK/mB,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,WACLooB,QAASpiC,QAAQ40E,EAAY+H,UAC7B3yD,MAAO7xB,EAAK,qBACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,YAC/BxoE,SAAUuiE,KAIhB,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,cACLooB,QAASpiC,QAAQ40E,EAAYyB,aAC7BrsD,MAAO7xB,EAAK,qBACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,eAC/BxoE,SAAUuiE,MAGZx1D,GACA,0BAAK/mB,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,cACLooB,QAASpiC,QAAQ40E,EAAY0B,aAC7BtsD,MAAO7xB,EAAK,wBACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,eAC/BxoE,SAAUuiE,KAIhB,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,YACLooB,QAASpiC,QAAQ40E,EAAYgI,WAC7B5yD,MAAO7xB,EAAK,sBACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,aAC/BxoE,SAAUuiE,KAGd,0BAAKv8E,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,aACLooB,QAASpiC,QAAQ40E,EAAYiI,YAC7B7yD,MAAO7xB,EAAK,2BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,cAC/BxoE,SAAUuiE,MAGZx1D,GACA,0BAAK/mB,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,YACLooB,QAASpiC,QAAQ40E,EAAYkI,WAC7B9yD,MAAO7xB,EAAK,4BACZ89E,UAAQ,EACRvjE,SAAU2oE,EAAqB,aAC/BxoE,SAAUuiE,KAKfyF,GACC,wBAAGhiF,UAAU,oBAAoBsC,IAAI,QAClChD,EAAK,kCAIRynB,GACA,mBAAC1E,GAAA,EAAD,CACE9lB,GAAG,cACH40B,MAAO7xB,EAAK,iBACZ0a,SAAU2pE,EACV1zE,MAAOqzE,EACPzpE,SAAUmoE,EACVkC,UA5RkB,KAgSrB9iE,IAAkB4hE,IAAmBhB,IAAwBe,GAC5D,mBAAC5/D,GAAA,EAAD,CAAU1iB,KAAK,SAASkF,QAAM,EAACkuB,aAAW,EAAC3zB,QAASkjF,GACjD9jF,EAAK,2BAMd,mBAACuoC,GAAA,EAAD,CACEtuB,QAAS20B,EACThuC,QAASu8E,EACTt8E,UAAWb,EAAK,QAChBua,SAAU8kB,GAETA,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,iBAIf+iF,GACA,mBAAC36D,GAAA,EAAD,CACEzoB,OAAQwjF,EACR58E,QAAS88E,EACTpiF,KAAK,+CACLonB,aAAc/oB,EAAK,yBACnBgpB,eAAgBm7D,EAChB7/C,sBAAoB,SClK9B,IAAe9lC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,YAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IACxBugD,aAAcC,GAAqBltD,EAAOonB,MAC5C03D,EAAU5jE,MAAAA,GAAH,UAAGA,EAAM6sB,gBAAT,aAAG,EAAgB+2C,QAC1BrB,EAAeviE,MAAAA,GAAH,UAAGA,EAAM6sB,gBAAT,aAAG,EAAgB01C,aAC/B10D,EAAY7N,IAAQsW,EAAAA,EAAAA,IAActW,IAChCmL,QAASyX,GAAoB99B,EAAOomB,aAAe,IAGzD4Y,MAAOvC,EADH,eAEJsB,EAFI,cAGJI,EAHI,aAIJE,GACEr+B,EAAO0lD,WAEX,MAAO,CACLo5B,QAAAA,EACArB,aAAAA,EACAvwB,iBAAAA,EACAnkC,UAAAA,EACA+U,gBAAAA,EACArB,YAAAA,EACA6wB,YAAavvB,EACbI,cAAAA,EACAE,aAAAA,EACA8uB,iBAAkBntD,EAAOmtD,oBA1BXptD,EApJkC,IAgBhD,IAhBiD,SACrDomF,EADqD,QAErDrH,EAFqD,aAGrDrB,EAHqD,iBAIrDvwB,EAJqD,UAKrDnkC,EALqD,SAMrDzb,EANqD,cAOrD6wB,EAPqD,gBAQrDL,EARqD,aASrDO,EATqD,YAUrDivB,EAVqD,YAWrD7wB,EAXqD,iBAYrD0wB,EAZqD,QAarD5kD,EAbqD,eAcrDq8B,EAdqD,mBAerDi5C,GACI,EACJ,MAAM,SAAE5nD,EAAF,mBAAY0vB,EAAZ,gBAAgC1pB,IAAoBl7B,EAAAA,EAAAA,MACpDO,GAAOC,EAAAA,EAAAA,KAEPoa,GAAW5V,EAAAA,EAAAA,IAAyB,MAEpCqL,GAAerL,EAAAA,EAAAA,IAAuB,MAEtCqgF,GAAW3kF,EAAAA,EAAAA,KAAQ,IAChB0kF,IAAW1I,MAAAA,OAAA,EAAAA,EAAcx4D,KAAI,QAAC,OAAEK,GAAH,SAAgBA,OAAgB,IACnE,CAACm4D,EAAc0I,IAEZpwD,GAAYt0B,EAAAA,EAAAA,KAAQ,KAExB,MAAMylB,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KACpC,IAAKo5D,IAAY53D,EACf,MAAO,GAGT,MAAMb,GAAUgnC,EAAAA,EAAAA,IACdyxB,EAAQ75D,KAAI,QAAC,OAAEK,GAAH,SAAgBA,KAC5B4B,EACAgmC,OACAjrD,EACAkrD,GAGF,OAAOg5B,EAAW9/D,EAAQ9C,QAAQ+B,IAAY8gE,EAAS5nF,SAAS8mB,KAAWe,IAC1E,CAACy4D,EAAS5xB,EAAkBC,EAAkBg5B,EAAUC,IAErDx0C,GAAenwC,EAAAA,EAAAA,KAAQ,KAE3B,MAAMylB,GAAYC,EAAAA,EAAAA,MAAYC,MAAM1B,KAC9BC,GAAYwB,EAAAA,EAAAA,MAAY1B,MAAMC,KAC9B2gE,EAAyBl9E,QAAQszB,GACjC6pD,EAAaD,EAEdvoD,GAAkBvW,EAAAA,EAAAA,IAAkBuW,EAAiB5W,EAAWuV,GAAe,GADhF1G,EAGJ,OAAO1O,EAAAA,EAAAA,KACLP,EAAAA,GAAAA,IAAO,IACFw/D,KACCD,GAAyBhoD,GAAqB,MAC9CgoD,GAAyBloD,GAAsB,KAClD5a,QAAQwiC,IACT,MAAM9qC,EAAOiM,EAAU6+B,GACvB,OAAK9qC,IAIG8N,GAAa9N,EAAK0yC,uBAAwBC,EAAAA,EAAAA,IAAU3yC,OACrDkrE,IAAaC,EAAS5nF,SAASunD,OAExCpgC,GACA,KAED,CAACoQ,EAAW+H,EAAiBrB,EAAa4B,EAAcF,EAAepV,EAAWo9D,EAAUC,KAExFviE,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBkY,EAAiB2V,EAAczoC,QAAQszB,IAElFg9C,GAAoBp4E,EAAAA,EAAAA,KAAa9C,IACjC4nF,GACFtI,EAAoBt/E,GAAI,GACxBqmC,EAAgBy3C,EAAAA,GAAAA,qBAEhBpmD,EAAS,CAAE13B,GAAAA,MAEZ,CAAC4nF,EAAUtI,EAAoBj5C,EAAgB3O,IAE5C/R,GAAqB7iB,EAAAA,EAAAA,KAAa+C,IACtCuhD,EAAmB,CAAE3mB,MAAO56B,EAAE8G,OAAO+G,UACpC,CAAC0zC,IACE7iC,GAAgBqB,EAAAA,GAAAA,GAA0B/S,EAAc9D,GAAWqV,IACnEkB,GAAeA,EAAYnkB,OAAS,GACtC+5E,EAAkB51D,GAAuB,IAAXlB,EAAe,EAAIA,MAElD,oBAAoB,GAiBvB,OAfAE,EAAAA,EAAAA,IAAevV,EAAU/E,GAgBvB,0BAAKvG,UAAU,cACZmkF,GAbD,0BAAKnkF,UAAU,qBAAqBsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAC5D,mBAACoiB,GAAA,EAAD,CACE5c,IAAKkU,EACL1J,MAAOwqB,EACPzgB,SAAUkI,EACVK,YAAajjB,EAAK,aAStB,0BAAKU,UAAU,iBACb,0BAAKA,UAAU,WACZ6hB,MAAAA,GAAAA,EAAankB,OACZ,mBAACilB,GAAA,EAAD,CACE3iB,UAAU,4BACV4iB,MAAOgtB,EACP/sB,WAAYf,EACZyiE,gBAAiBp9E,QAAQszB,GACzBh1B,IAAK2J,EACLkT,UAAWxB,GAEVe,EAAYoB,KAAK1mB,GAChB,mBAAC4mB,GAAA,EAAD,CACE1Z,IAAKlN,EACLyD,UAAU,kCACVE,QAAS,IAAMu3E,EAAkBl7E,IAEjC,mBAAC6mB,GAAA,EAAD,CAAiBE,OAAQ/mB,EAAI0nC,eAAa,QAI7CqnB,IAAezpC,GAAgBA,EAAYnkB,OAO9C,mBAAC8lB,GAAA,EAAD,MANA,mBAACya,GAAA,EAAD,CACE82C,cAAe,EACftrE,IAAI,gBACJxI,KAAM8lB,EAAY,uBAAyB,4BC5FzD,IAAejpB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,IACxBgZ,KAAMwB,EAAW+lC,aAAcC,GAAqBltD,EAAOonB,MAInE,MAAO,CACL03D,QAJc5jE,MAAAA,GAAH,UAAGA,EAAM6sB,gBAAT,aAAG,EAAgB+2C,QAK9B53D,UAAAA,EACAgmC,iBAAAA,EACAnkC,UANgB7N,IAAQsW,EAAAA,EAAAA,IAActW,GAOtCiyC,iBAAkBntD,EAAOmtD,oBAZXptD,EA5DgD,IAU9D,IAV+D,UACnEmnB,EADmE,iBAEnEgmC,EAFmE,QAGnE4xB,EAHmE,UAInE/1D,EAJmE,eAKnE6b,EALmE,mBAMnEi5C,EANmE,QAOnEt1E,EAPmE,SAQnE+E,EARmE,iBASnE6/C,GACI,GACJtqC,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAMwtB,GAAYt0B,EAAAA,EAAAA,KAAQ,KACxB,GAAKq9E,GAAY53D,EAIjB,OAAOmmC,EAAAA,EAAAA,IACLyxB,EAAQv7D,QAAQsgD,IAAYA,EAAOoc,UAASh7D,KAAI,QAAC,OAAEK,GAAH,SAAgBA,KAChE4B,EACAgmC,OACAjrD,EACAkrD,KAED,CAAC2xB,EAAS3xB,EAAkBjmC,EAAWgmC,IAEpCmxB,GAA6Bh9E,EAAAA,EAAAA,KAAamlF,IAC9C3I,EAAmB2I,GACnB5hD,EAAey3C,EAAAA,GAAAA,wBACd,CAACwB,EAAoBj5C,IAExB,OACE,0BAAK5iC,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUyhF,eAAa,GACnC1tD,EACCA,EAAU9Q,KAAI,CAAC1mB,EAAI2mB,IACjB,mBAACC,GAAA,EAAD,CACE1Z,IAAKlN,EACLw4E,cAAe7xD,EACfljB,UAAU,kCACVE,QAAS,IAAMm8E,EAA2B9/E,IAE1C,mBAAC6mB,GAAA,EAAD,CAAiBE,OAAQ/mB,EAAI0nC,eAAa,OAI9C,mBAAChG,GAAA,EAAD,CACE82C,cAAe,EACftrE,IAAI,gBACJxI,KAAM8lB,EAAY,uBAAyB,4B,0BCpCzD,SAAS09D,GAAiBC,EAAuBC,GAC/C,MAAQC,YAAaC,EAAeC,MAAOC,EAAU,EAAG1rE,KAAM2rE,GAAWN,GACjEE,YAAaK,EAAeH,MAAOI,EAAU,EAAG7rE,KAAM8rE,GAAWR,EACzE,OAAIE,GAAiBI,EAAsBhrE,OAAO4qE,GAAiB5qE,OAAOgrE,GACtEF,GAAWG,EAAgBA,EAAUH,EAClCI,EAASH,EAGlB,MAgWA,IAAelnF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAM,QAAEsuE,EAAF,eAAWoM,GAAmBpnF,EAAOg6E,WAAW17C,SAAS5xB,GACzDwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAC1Bqc,EAAY7N,IAAQsW,EAAAA,EAAAA,IAActW,GAExC,MAAO,CACLogE,gBAAiBN,EACjBqM,uBAAwBD,EACxBlsE,KAAAA,EACAiyC,iBAAkBntD,EAAOmtD,iBACzBpkC,UAAAA,KAXchpB,EAhW6B,IAU3C,IAV4C,OAChD2M,EADgD,KAEhDwO,EAFgD,gBAGhDogE,EAHgD,uBAIhD+L,EAJgD,SAKhD/5E,EALgD,UAMhDyb,EANgD,iBAOhDokC,EAPgD,QAQhD5kD,EARgD,eAShDq8B,GACI,EACJ,MAAM,yBACJ0iD,EADI,iBAEJl/D,EAFI,uBAGJm/D,EAHI,yBAIJC,EAJI,iCAKJC,EALI,oBAMJC,IACE3mF,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAENomF,EAA6BC,EAA2BC,IAA8BlhE,EAAAA,GAAAA,MACtFmhE,EAAoBC,EAAkBC,IAAqBrhE,EAAAA,GAAAA,MAC3DshE,EAAgBC,IAAqB5kF,EAAAA,EAAAA,OACrC82E,EAAoBC,EAAkBC,IAAqB3zD,EAAAA,GAAAA,MAC3DwhE,EAAgBC,IAAqB9kF,EAAAA,EAAAA,OAErCq2B,EAAe4S,IAAoBjpC,EAAAA,EAAAA,OACnCkpC,EAAmBC,IAAwBnpC,EAAAA,EAAAA,KAAS,GACrDopC,GAAsBrrC,EAAAA,EAAAA,KAAY,IAAMorC,GAAqB,IAAO,KAE1ElpC,EAAAA,EAAAA,KAAU,KACHo2B,IACHN,EAAAA,GAAAA,GAAiB,UAAUC,KAAKiT,KAEjC,CAAC5S,KAEJ9W,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAM8/E,GAAuB5mF,EAAAA,EAAAA,KAAQ,KACnC,GAAK65E,EACL,OAAOA,EACJtiB,MAAK,QAAC,WAAEsvB,GAAH,SACJA,GAAeA,GAAaC,EAAAA,GAAAA,GAAcp7B,GAAoBq7B,EAAAA,GAAsB,SAEvF,CAAClN,EAAiBnuB,IACfr7C,GAAcC,EAAAA,EAAAA,MACpB02E,EAAAA,GAAAA,IAAY,KACV32E,MACCu2E,EAAuB,SAAOpmF,GAEjC,MAAMymF,EAAgBpN,MAAAA,OAAH,EAAGA,EAAiBxjD,MAAK,QAAC,YAAE8uD,GAAH,SAAqBA,KAC3D+B,EAAoBztE,MAAAA,GAAAA,EAAMyrB,SAAY,QAAOzrB,EAAKyrB,WAAa+hD,MAAAA,OAA3C,EAA2CA,EAAeE,KAC9EC,GAAkBpnF,EAAAA,EAAAA,KAAQ,KAC9B,MAAMu5E,EAAU9/D,MAAAA,GAAAA,EAAMyrB,SAAW20C,EAAkBA,MAAAA,OAAnC,EAAmCA,EAAiB/3D,QAAO,QAAC,YAAEqjE,GAAH,SAAsBA,KACjG,OAAO5L,MAAAA,OAAP,EAAOA,EAASv7C,KAAKgnD,MACpB,CAACvrE,MAAAA,OAAD,EAACA,EAAMyrB,SAAU20C,IAOdwN,GAAeznF,EAAAA,EAAAA,KAAaqnB,IAChC,MAAM,KACJkgE,EADI,MACEhgE,EADF,gBACSI,EADT,WAC0Bs/D,EAD1B,WACsCS,GACxCrgE,EACJ6+D,EAAuB,CACrB76E,OAAAA,EACAk8E,KAAAA,EACAhgE,MAAAA,EACAI,gBAAAA,EACAs/D,WAAAA,EACAS,WAAAA,EACA5M,WAAW,MAEZ,CAACzvE,EAAQ66E,IAENyB,GAAc3nF,EAAAA,EAAAA,KAAaqnB,IAC/Bw/D,EAAkBx/D,GAClBq/D,MACC,CAACA,IAEEkB,IAAe5nF,EAAAA,EAAAA,KAAY,KAC1B4mF,IACLa,EAAab,GACbC,OAAkBjmF,GAClB+lF,OACC,CAACA,EAAmBc,EAAcb,IAE/BiB,IAAuB7nF,EAAAA,EAAAA,KAAY,KACvCujC,EAAey3C,EAAAA,GAAAA,cACd,CAACz3C,IAEEukD,IAAsB9nF,EAAAA,EAAAA,KAAY,KAClCqnF,GACFM,EAAYN,KAEb,CAACM,EAAaN,IAEXU,IAAyB/nF,EAAAA,EAAAA,KAAY,KACzComF,EAAiC,CAAE/6E,OAAAA,IACnCm7E,MACC,CAACn7E,EAAQm7E,EAA4BJ,IAElC4B,IAAiBhoF,EAAAA,EAAAA,KAAaqnB,IAClCg/D,EAAoB,CAAEh7E,OAAAA,EAAQgc,OAAAA,IAC9Bkc,EAAey3C,EAAAA,GAAAA,cACd,CAAC3vE,EAAQk4B,EAAgB8iD,IAEtB4B,IAAejoF,EAAAA,EAAAA,KAAaqnB,IAChC8+D,EAAyB,CAAE96E,OAAAA,EAAQk8E,KAAMlgE,EAAOkgE,SAC/C,CAACl8E,EAAQ86E,IAEN+B,IAAcloF,EAAAA,EAAAA,KAAaqnB,IAC/B0/D,EAAkB1/D,GAClB2xD,MACC,CAACA,IAEEj/C,IAAe/5B,EAAAA,EAAAA,KAAY,KAC1B8mF,IACLmB,GAAanB,GACbC,OAAkBnmF,GAClBq4E,OACC,CAACA,EAAmBgP,GAAcnB,IAE/BqB,IAAWnoF,EAAAA,EAAAA,KAAaunF,KAC5BpyB,EAAAA,GAAAA,IAAoBoyB,GACpBxgE,EAAiB,CACfjpB,QAASmC,EAAK,kBAEf,CAACA,EAAM8mB,IAEJqhE,IAA2BpoF,EAAAA,EAAAA,KAAY,KAC3CmoF,GAASb,KACR,CAACa,GAAUb,IAERe,GAAoBhhE,IACxB,MAAM,MACJo+D,EAAQ,EADJ,WACOiC,EADP,WACmBT,EADnB,YAC+B1B,EAD/B,UAC4C+C,EAD5C,UACuDxN,GACzDzzD,EACJ,IAAIzlB,EAAO,GASX,GAPEA,GADGk5E,GAAa4M,GAAcjC,EAAQiC,EAC/BznF,EAAK,UAAWynF,EAAajC,GAC3BA,EACFxlF,EAAK,eAAgBwlF,GAErBxlF,EAAK,eAGV66E,EAEF,OADAl5E,GAAS,MAAa3B,EAAK,aACpB2B,EAOT,GAJI0mF,IACF1mF,GAAS,MAAa3B,EAAK,eAAgBqoF,WAG1B1nF,IAAf8mF,GAA4BjC,IAAUiC,EACxC9lF,GAAS,MAAa3B,EAAK,2BACtB,GAAIgnF,EAAY,CACrB,MAAMsB,EAAwD,KAAhDtB,GAAaC,EAAAA,GAAAA,GAAcp7B,IACzClqD,GAAS,MAEPA,GADE2mF,EAAO,EACDtoF,EAAK,wBAAwBuoF,EAAAA,EAAAA,GAAgBvoF,EAAMsoF,IAEnDtoF,EAAK,2BAENslF,IACT3jF,GAAS,MAAa3B,EAAK,gBAG7B,OAAO2B,GAGH6mF,GAAyBphE,IAC7B,MAAMqhE,EAAU,GA8BhB,OA7BAA,EAAQ77D,KAAK,CACXtF,MAAOtnB,EAAK,QACZmB,KAAM,OACN8iD,QAAS,IAAMikC,GAAS9gE,EAAOkgE,QAG5BlgE,EAAOk+D,aAAgBl+D,EAAOyzD,WACjC4N,EAAQ77D,KAAK,CACXtF,MAAOtnB,EAAK,QACZmB,KAAM,OACN8iD,QAAS,IAlIK78B,CAAAA,IAClB4+D,EAAyB,CAAE56E,OAAAA,EAAQgc,OAAAA,IACnCkc,EAAey3C,EAAAA,GAAAA,aAgII2N,CAAWthE,KAIzBA,EAAOyzD,UAQV4N,EAAQ77D,KAAK,CACXtF,MAAOtnB,EAAK,cACZmB,KAAM,SACN8iD,QAAS,IAAMgkC,GAAY7gE,GAC3BmN,aAAa,IAXfk0D,EAAQ77D,KAAK,CACXtF,MAAOtnB,EAAK,gBACZmB,KAAM,SACN8iD,QAAS,IAAMyjC,EAAYtgE,GAC3BmN,aAAa,IAUVk0D,GAGHE,IAAyExoF,EAAAA,EAAAA,KAAQ,IAC9E,QAAC,UAAEC,EAAF,OAAaC,GAAd,SACL,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL8F,QAASvF,EAAAA,GACTN,KAAK,UACLC,MAAM,cACNC,UAAWL,EAAS,SAAW,GAC/BO,QAASR,EACTS,UAAU,WAEV,wBAAGH,UAAU,iBAGhB,IAEH,OACE,0BAAKA,UAAU,4BACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,gBACZ23B,GACC,mBAACD,GAAA,EAAD,CACEn7B,GAAG,aACHuD,KAAMooF,EAAAA,GACNvwD,cAAeA,EACfC,KAAM4S,EACNxS,OAAQ0S,KAId,wBAAG1qC,UAAU,cAA0BV,EAAZynB,EAAiB,yBAAiC,qBAE9E4/D,GACC,0BAAK3mF,UAAU,WACb,wBAAGA,UAAU,cACVkZ,MAAAA,GAAAA,EAAMyrB,SAAWrlC,EAAK,cAAgBA,EAAK,oCAE9C,0BAAKU,UAAU,gBACb,4BACEA,UAAU,kCACViQ,MAAO02E,EACPphD,UAAQ,EACRrlC,QAASunF,KAEX,mBAACpnF,EAAA,EAAD,CACEL,UAAU,yBACVM,QAAS2nF,GACT1nF,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,OAAOP,QAASunF,IAA2BnoF,EAAK,WAC7D4Z,MAAAA,GAAAA,EAAMyrB,WACN,mBAACnkC,EAAA,EAAD,CAAUC,KAAK,SAASP,QAASinF,GAAqBtzD,aAAW,GAAEv0B,EAAK,mBAI9E,mBAACM,EAAA,EAAD,CAAQM,QAASunF,IAA2BnoF,EAAK,cAGrD,0BAAKU,UAAU,UAAUyhF,eAAa,GACpC,mBAAC7hF,EAAA,EAAD,CAAQynB,QAAM,EAAC5d,IAAI,SAASzJ,UAAU,cAAcE,QAASgnF,IAC1D5nF,EAAK,oBAELunF,IAAoBA,EAAgBnpF,SAAW,mBAACugC,GAAA,EAAD,CAAch9B,KAAK,iBAAiBwI,IAAI,YACzFo9E,MAAAA,OALH,EAKGA,EAAiB5jE,KAAKyD,GACrB,mBAACvD,GAAA,EAAD,CACE1iB,KAAK,OACL0nF,cAAc,OACd58C,WAAS,EACTrrC,QAAS,IAAMmnF,GAAe3gE,GAC9BwS,eAAgB4uD,GAAsBphE,GACtCjd,IAAKid,EAAOkgE,MAEZ,2BAAM5mF,UAAU,sBAAsB0mB,EAAOE,OAASF,EAAOkgE,MAC7D,2BAAM5mF,UAAU,WAAWsC,IAAI,QAC5BolF,GAAiBhhE,OAIxB,wBAAG1mB,UAAU,kBAAkByJ,IAAI,cAAcnK,EAAK,yBAEvD+lF,GAA0Bl+E,QAAQk+E,EAAuB3nF,SACxD,0BAAKsC,UAAU,UAAUyhF,eAAa,GACpC,wBAAGzhF,UAAU,aAAayJ,IAAI,SAASnK,EAAK,iBAC5C,mBAAC6jB,GAAA,EAAD,CACE1iB,KAAK,SACLozB,aAAW,EACXpqB,IAAI,SACJvJ,QAAS0lF,GAET,2BAAM5lF,UAAU,SAASV,EAAK,2BAE/B+lF,MAAAA,OAVH,EAUGA,EAAwBpiE,KAAKyD,GAC5B,mBAACvD,GAAA,EAAD,CACE1iB,KAAK,OACL0nF,cAAc,OACd58C,WAAS,EACTrrC,QAAS,IAAMmnF,GAAe3gE,GAC9BwS,eAAgB4uD,GAAsBphE,GACtCjd,IAAKid,EAAOkgE,MAEZ,2BAAM5mF,UAAU,SAAS0mB,EAAOE,OAASF,EAAOkgE,MAChD,2BAAM5mF,UAAU,WAAWsC,IAAI,QAC5BolF,GAAiBhhE,SAO9B,mBAAC0B,GAAA,EAAD,CACEzoB,OAAQgmF,EACRp/E,QAASs/E,EACTj/D,MAAOtnB,EAAK,yBACZ2B,KAAM3B,EAAK,4BACXskC,sBAAoB,EACpBvb,aAAc/oB,EAAK,aACnBgpB,eAAgB8+D,KAElB,mBAACh/D,GAAA,EAAD,CACEzoB,OAAQmmF,EACRv/E,QAASy/E,EACTp/D,MAAOtnB,EAAK,cACZ2B,KAAM3B,EAAK,eACXskC,sBAAoB,EACpBvb,aAAc/oB,EAAK,gBACnBgpB,eAAgB2+D,KAElB,mBAAC7+D,GAAA,EAAD,CACEzoB,OAAQy4E,EACR7xE,QAAS+xE,EACT1xD,MAAOtnB,EAAK,cACZ2B,KAAM3B,EAAK,kBACXskC,sBAAoB,EACpBvb,aAAc/oB,EAAK,UACnBgpB,eAAgB8Q,UC1XlBgvD,GAAuB,CAAC,EAAG,GAAI,KAC/BC,GAAsB,CAC1BC,KAAM,KACN1/D,IAAK,MACL2/D,KAAM,QAEFC,GAA6BH,GAAoBC,KA2OvD,IAAexqF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAM,cAAE+9E,GAAkBzqF,EAAOg6E,WAAW17C,SAAS5xB,GAErD,MAAO,CACL+9E,cAAAA,EACAt9B,iBAAkBntD,EAAOmtD,oBANXptD,EA7N4B,IAO1C,IAP2C,OAC/C2M,EAD+C,cAE/C+9E,EAF+C,SAG/Cn9E,EAH+C,iBAI/C6/C,EAJ+C,QAK/C5kD,EAL+C,eAM/Cq8B,GACI,EACJ,MAAM,uBAAE2iD,EAAF,iBAA0BmD,IAAqB3pF,EAAAA,EAAAA,MAE/CO,GAAOC,EAAAA,EAAAA,MACNopF,EAAkBlwB,EAAcC,IAAiB/zC,EAAAA,GAAAA,MACjDqC,EAAiB4hE,IAAsBtnF,EAAAA,EAAAA,KAAS,IAChDslB,EAAOulC,IAAY7qD,EAAAA,EAAAA,IAAS,KAC5BunF,EAAkBC,IAAuBxnF,EAAAA,EAAAA,IAAiB+P,KAAKC,MAAQk3E,KACvEO,EAAsBC,IAA2B1nF,EAAAA,EAAAA,IAAS,cAC1D2nF,EAAkBC,IAAuB5nF,EAAAA,EAAAA,IAA6B,KACtE6nF,EAAqBC,IAA0B9nF,EAAAA,EAAAA,IAAS,MACxD+nF,EAAiBC,IAAsBhoF,EAAAA,EAAAA,KAAS,IAEvDuf,EAAAA,EAAAA,IAAevV,EAAU/E,IAEzB+uE,EAAAA,GAAAA,IAAY,IAAwB,IAAtBiU,GAAsB,EAClC,GAAIA,IAAqBd,EACzB,GAAKA,EAOE,CACL,MACE7hE,MAAO4iE,EADH,WACiBzC,EADjB,WAC6BT,EAAYt/D,gBAAiByiE,GAC5DhB,EAMJ,GALIe,GAAcr9B,EAASq9B,GACvBzC,IACFqC,EAAuBhB,GAAqB5rF,SAASuqF,GAAcA,EAAWhvE,WAAa,UAC3FmxE,EAAoBnC,IAElBT,EAAY,CACd,MAAMoD,GAAcnD,EAAAA,GAAAA,GAAcp7B,GAAoBq9B,GACtDQ,EAAwB,UACxBF,EAAwD,IAApCpoF,KAAKqE,IAAIuhF,EAAYoD,IAEvCD,GACFb,GAAmB,QArBrBz8B,EAAS,IACT68B,EAAwB,aACxBI,EAAuB,KACvBN,EAAsD,KAAlCvC,EAAAA,GAAAA,GAAcp7B,GAA2Bq9B,IAC7DU,EAAoB,IACpBN,GAAmB,KAmBpB,CAACH,EAAet9B,IAEnB,MAAMw+B,GAAwBtqF,EAAAA,EAAAA,KAAa+C,IACzCwmF,EAAmBxmF,EAAE8G,OAAOqgC,WAC3B,IAEGkjB,GAAoBptD,EAAAA,EAAAA,KAAa+C,IACrC+pD,EAAS/pD,EAAE8G,OAAO+G,SACjB,IAEG25E,GAA+BvqF,EAAAA,EAAAA,KAAa+C,IAChD8mF,EAAoBjvE,OAAOw6B,SAASryC,EAAE8G,OAAO+G,MAAO,OACnD,IAEG45E,GAAyBxqF,EAAAA,EAAAA,KAAaga,IAC1CyvE,EAAoBzvE,EAAKgS,WACzBqtC,MACC,CAACA,IAEEoxB,GAAkBzqF,EAAAA,EAAAA,KAAY,KAClCiqF,GAAmB,GACnB,MAAMvC,EAAqC,WAAxBoC,EAAmCF,EAAmBE,EACzE,IAAI7C,EACJ,OAAQyC,GACN,IAAK,SACHzC,GAAaC,EAAAA,GAAAA,GAAcp7B,IAAqB09B,EAAmBx3E,KAAKC,OAAS,IACjF,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACHg1E,GAAaC,EAAAA,GAAAA,GAAcp7B,GAAoBk9B,GAAoBU,GAAwB,IAC3F,MAEF,QACEzC,OAAarmF,EAGbwoF,EACFlD,EAAuB,CACrBqB,KAAM6B,EAAc7B,KACpBl8E,OAAAA,EACAkc,MAAAA,EACAI,gBAAAA,EACAs/D,WAAAA,EACAS,WAAAA,IAGF2B,EAAiB,CACfh+E,OAAAA,EACAkc,MAAAA,EACAI,gBAAAA,EACAs/D,WAAAA,EACAS,WAAAA,IAGJnkD,EAAey3C,EAAAA,GAAAA,WACd,CACD3vE,EAAQm+E,EAAkBI,EAAkB1D,EAAwBkD,EACpEC,EAAkB1hE,EAAiB+hE,EAAsBI,EAAqBviE,EAAOgc,EACrFuoB,IAGF,OACE,0BAAKnrD,UAAU,2BACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACspC,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,qBACZwzC,SAAUxzC,EAAK,gCACfiqC,QAASviB,EACThN,SAAU2vE,KAGd,0BAAK3pF,UAAU,WACb,mBAACqiB,GAAA,EAAD,CACEriB,UAAU,YACVuiB,YAAajjB,EAAK,gBAClB2Q,MAAO2W,EACP5M,SAAUyyC,IAEZ,wBAAGzsD,UAAU,mBAAmBV,EAAK,kBAEvC,0BAAKU,UAAU,WACb,0BAAKA,UAAU,kBAAkBV,EAAK,kBACtC,mBAAC8xB,GAAA,EAAD,CACEjQ,KAAK,gBACLkQ,QAAS,CACP,CACEphB,MAAO,OACPkhB,MAAO7xB,EAAK,QAAS,IAEvB,CACE2Q,MAAO,MACPkhB,MAAO7xB,EAAK,OAAQ,IAEtB,CACE2Q,MAAO,OACPkhB,MAAO7xB,EAAK,QAAS,IAEvB,CACE2Q,MAAO,YACPkhB,MAAO7xB,EAAK,YAEd,CACE2Q,MAAO,SACPkhB,MAAO7xB,EAAK,oCAGhB0a,SAAUgvE,EACV13D,SAAUy3D,IAEc,WAAzBA,GACC,mBAACnpF,EAAA,EAAD,CAAQI,UAAU,eAAeqnB,QAAM,EAACnnB,QAASu4D,IAC9CsxB,EAAAA,EAAAA,IAAezqF,EAAMupF,GADxB,KAC4Cp8D,EAAAA,EAAAA,IAAWntB,EAAMupF,IAG/D,wBAAG7oF,UAAU,mBAAmBV,EAAK,oBAErC0nB,GACA,0BAAKhnB,UAAU,WACb,0BAAKA,UAAU,kBAAkBV,EAAK,sBACtC,mBAAC8xB,GAAA,EAAD,CACEjQ,KAAK,eACLkQ,QAAS,IACJ+2D,GAAqBnlE,KAAK+mE,IAAD,CAAU/5E,MAAO+5E,EAAEjyE,WAAYoZ,MAAO64D,MAClE,CACE/5E,MAAO,IACPkhB,MAAO7xB,EAAK,YAEd,CACE2Q,MAAO,SACPkhB,MAAO7xB,EAAK,mCAGhB0a,SAAUovE,EACV93D,SAAU63D,IAEa,WAAxBA,GACC,4BACEnpF,UAAU,2BACV+Z,KAAK,SACL/U,IAAI,IACJD,IAAI,QACJkL,MAAOg5E,EACPjvE,SAAU4vE,IAGd,wBAAG5pF,UAAU,mBAAmBV,EAAK,mBAGzC,mBAACuoC,GAAA,EAAD,CACEtuB,SAAO,EACPrZ,QAAS4pF,EACTjwE,SAAUwvE,EACVlpF,UAA2Bb,EAAhBmpF,EAAqB,WAAmB,eAEnD,wBAAGzoF,UAAU,iBAGjB,mBAAC,GAAD,CACEL,OAAQgpF,EACRj/D,cAAY,EACZE,gBAAc,EACdrjB,QAASmyD,EACT3uC,SAAU8/D,EACVtgE,WAAYs/D,EACZh/D,kBAAmBvqB,EAAK,eCxIhC,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,UAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAEhC,MAAO,CACLqmD,iBAAgB,UAAE73C,EAAK6sB,gBAAP,aAAE,EAAegrB,iBACjC7H,mBAAoBlrD,EAAOkrD,mBAC3BhwC,KAAAA,KAPcnb,EA9F+B,IAM7C,IAN8C,mBAClDmrD,EADkD,iBAElD6H,EAFkD,KAGlD73C,EAHkD,SAIlD5N,EAJkD,QAKlD/E,GACI,EACJ,MAAM,wBAAE0jF,IAA4BlrF,EAAAA,EAAAA,MAE9BO,GAAOC,EAAAA,EAAAA,MACN2uC,EAAWg1C,IAAgB5hF,EAAAA,EAAAA,KAAS,IACpCq9B,EAAWy4C,IAAgB91E,EAAAA,EAAAA,KAAS,IACpC4oF,EAAuBC,IAA4B7oF,EAAAA,EAAAA,IAASyvD,GAAoB,KAEvFlwC,EAAAA,EAAAA,IAAevV,EAAU/E,GAEzB,MAAM6jF,GAAsB/qF,EAAAA,EAAAA,KAAY,KACjC6Z,IACLk+D,GAAa,GAEb6S,EAAwB,CACtBv/E,OAAQwO,EAAK3c,GACbw0D,iBAAkBm5B,OAEnB,CAAChxE,EAAMgxE,EAAuBD,KAEjC1oF,EAAAA,EAAAA,KAAU,KACJwvD,IACFqmB,GAAa,GACb8L,GAAa,GACbiH,EAAyBp5B,MAE1B,CAACA,IAEJ,MAAMs5B,GAAuBhrF,EAAAA,EAAAA,KAAa+C,IACxC,IAAK8W,IAASgwC,EAAoB,OAElC,MAAM,KAAE/nC,EAAF,QAAQooB,GAAYnnC,EAAEgH,cACtBkhF,EAA+B,QAATnpE,EAAkBooB,EAAU2f,EAAmBjmC,KAAKuS,GAAMA,EAAEC,WAAY,GAC9F8T,EAEA,IAAI2gD,EAAuB/oE,GAD3B+oE,EAAsB3oE,QAAQiU,GAAMA,IAAMrU,IAGhDgpE,EAAyBG,GACzBpH,GAAa,KACZ,CAACh6B,EAAoBhwC,EAAMgxE,IAE9B,OACE,0BAAKlqF,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAK,MACLooB,SAAU2gD,GAAyBA,EAAsBxsF,OAAS,EAClEyzB,MAAO7xB,EAAK,mBACZ0a,SAAUqwE,KAGbnhC,MAAAA,OATH,EASGA,EAAoB3nC,QAAQiU,IAAOA,EAAE6zB,aAAYpmC,KAAI,QAAC,SAAEwS,EAAF,MAAY7O,GAAb,SACpD,0BAAK5mB,UAAU,yBACb,mBAACspC,GAAA,EAAD,CACEnoB,KAAMsU,EACN8T,SAAU2gD,IAAyBA,MAAAA,OAA1B,EAA0BA,EAAuB1tF,SAASi5B,IACnE5b,SAA4C,KAAlCqwE,MAAAA,OAAA,EAAAA,EAAuBxsF,QACjCyzB,MACE,0BAAKnxB,UAAU,YACb,mBAAC+1B,GAAA,EAAD,CAAqBN,SAAUA,IAC9B7O,GAGL5M,SAAUqwE,UAOpB,mBAACxiD,GAAA,EAAD,CACEtuB,QAAS20B,EACThuC,QAASkqF,EACTjqF,UAAWb,EAAK,QAChBua,SAAU8kB,GAETA,EACC,mBAAChwB,EAAA,EAAD,CAAS5O,MAAM,UAEf,wBAAGC,UAAU,qBC6DvB,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAM,WAAE6/E,GAAevsF,EAAOg6E,WAAW17C,SAAS5xB,IAC5C,OAAEgc,EAAF,UAAU8jE,EAAV,WAAqBC,GAAeF,GAAc,GAClDrxE,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAGhC,MAAO,CACLgc,OAAAA,EACA8jE,UAAAA,EACAC,WAAAA,EACA1jE,UANgB7N,IAAQsW,EAAAA,EAAAA,IAActW,GAOtCiyC,iBAAkBntD,EAAOmtD,oBAZXptD,EA7IgC,IAS9C,IAT+C,OACnD2M,EADmD,OAEnDgc,EAFmD,UAGnD8jE,EAHmD,WAInDC,EAJmD,UAKnD1jE,EALmD,SAMnDzb,EANmD,iBAOnD6/C,EAPmD,QAQnD5kD,GACI,EACJ,MAAM,iBACJ6f,EADI,wBAEJskE,EAFI,yBAGJC,EAHI,SAIJ12D,IACEl1B,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACP,MACJulF,EAAQ,EADJ,WACOiC,EADP,KACmBH,EADnB,QACyBgE,GAC3BlkE,GAAU,GACR4/D,GAAa5/D,MAAAA,OAAA,EAAAA,EAAQ4/D,aAAsE,KAAvD5/D,EAAO4/D,YAAaC,EAAAA,GAAAA,GAAcp7B,IAA4B95C,KAAKC,MACvGu5E,IAAcnkE,MAAAA,OAAA,EAAAA,EAAQ4/D,aAAc,IAAKC,EAAAA,GAAAA,GAAcp7B,GAAqB,GAElF5pD,EAAAA,EAAAA,KAAU,KACJqlF,IACF8D,EAAwB,CAAEhgF,OAAAA,EAAQk8E,KAAAA,IAClC+D,EAAyB,CAAEjgF,OAAAA,EAAQk8E,KAAAA,OAEpC,CAACl8E,EAAQk8E,EAAM8D,EAAyBC,IAE3C,MAAMG,GAAoBzrF,EAAAA,EAAAA,KAAY,MACpCm1D,EAAAA,GAAAA,IAAoB9tC,EAAQkgE,MAC5BxgE,EAAiB,CACfjpB,QAASmC,EAAK,kBAEf,CAAConB,EAAQpnB,EAAM8mB,IAwDlB,OAtDAvF,EAAAA,EAAAA,IAAevV,EAAU/E,GAuDvB,0BAAKvG,UAAU,+BACb,0BAAKA,UAAU,kBACX0mB,GACA,wBAAG1mB,UAAU,cAAcV,EAAK,YAEjConB,GACC,sCACE,0BAAK1mB,UAAU,WACb,yBAAIA,UAAU,cAAc0mB,EAAOE,OAASF,EAAOkgE,MACnD,4BACE5mF,UAAU,eACViQ,MAAOyW,EAAOkgE,KACdrhD,UAAQ,EACRrlC,QAAS4qF,IAEX,mBAAClrF,EAAA,EAAD,CAAQI,UAAU,YAAYE,QAAS4qF,GAAoBxrF,EAAK,aAC/DgnF,GACC,wBAAGtmF,UAAU,cACV6qF,EACGvrF,EAAK,eACLA,EAAK,gBAAkB,IAAEyqF,EAAAA,EAAAA,IAAezqF,EAAMgnF,OAAe75D,EAAAA,EAAAA,IAAWntB,EAAMgnF,QAIvFsE,GACC,0BAAK5qF,UAAU,WACb,4BAAIV,EAAK,mBACT,mBAAC6jB,GAAA,EAAD,CACEnjB,UAAU,6CACVE,QAAS,IAAM+zB,EAAS,CAAE13B,GAAIquF,KAE9B,mBAACxnE,GAAA,EAAD,CACEE,OAAQsnE,EACRvnE,QAAQjK,EAAAA,EAAAA,IAAoB9Z,EAAoB,IAAdonB,EAAOrN,MAAa,GACtD4qB,eAAa,MAvFP,MACtB,GAAKumD,MAAAA,GAAAA,EAAW9sF,QAAZ,MAAsB+sF,IAAAA,EAAY/sF,OACtC,OAAK8sF,EAEH,0BAAKxqF,UAAU,WACb,4BAAIwqF,EAAU9sF,OAAS4B,EAAK,eAAgBwlF,GAASxlF,EAAK,gBAC1D,wBAAGU,UAAU,eACTwqF,EAAU9sF,SACVqpF,EAAaznF,EAAK,4BAA6BynF,EAAajC,GAASxlF,EAAK,mBAE3EkrF,EAAUvnE,KAAK8nE,GACd,mBAAC5nE,GAAA,EAAD,CACEnjB,UAAU,6CACVE,QAAS,IAAM+zB,EAAS,CAAE13B,GAAIwuF,EAASznE,UAEvC,mBAACF,GAAA,EAAD,CACEE,OAAQynE,EAASznE,OACjBD,QAAQjK,EAAAA,EAAAA,IAAoB9Z,EAAsB,IAAhByrF,EAAS1xE,MAAa,GACxD4qB,eAAa,SAhBF,mBAACt1B,EAAA,EAAD,OA0Fdq8E,GAjEc,MACvB,GAAItkE,MAAAA,IAAAA,EAAQyzD,UAAZ,CACA,IAAKsQ,GAAcD,EAAW,OAAO,mBAAC77E,EAAA,EAAD,MACrC,GAAK87E,MAAAA,GAAAA,EAAY/sF,OACjB,OACE,0BAAKsC,UAAU,WACb,4BAAgBV,EAAZynB,EAAiB,oBAA4B,mBACjD,wBAAG/mB,UAAU,cACVyqF,EAAWxnE,KAAKgoE,GACf,mBAAC9nE,GAAA,EAAD,CACEnjB,UAAU,6CACVE,QAAS,IAAM+zB,EAAS,CAAE13B,GAAI0uF,EAAU3nE,UAExC,mBAACF,GAAA,EAAD,CACEE,OAAQ2nE,EAAU3nE,OAClBD,QAAQjK,EAAAA,EAAAA,IAAoB9Z,EAAuB,IAAjB2rF,EAAU5xE,MAAa,GACzD4qB,eAAa,WAkDhBinD,UC7Eb,IAAeptF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAEslB,GAAyB,EAGlC,MAAO,CACLrK,MAHW/N,EAAAA,EAAAA,IAAWlN,EAAQslB,GAI9B6nC,iBAAkBntD,EAAOmtD,oBANXptD,EA5D2B,IAQzC,IAR0C,OAC9CulB,EAD8C,MAE9CuD,EAF8C,KAG9CxN,EAH8C,UAI9C0N,EAJ8C,KAK9C9N,EAL8C,iBAM9CkyC,EAN8C,OAO9CzgD,GACI,EACJ,MAAM,SAAEupB,EAAF,oBAAYk3D,IAAwBpsF,EAAAA,EAAAA,MAEpCoD,GAAiB8tD,EAAAA,EAAAA,GAAuB,eACxC3wD,GAAOC,EAAAA,EAAAA,KAEPy2B,GAAWC,EAAAA,EAAAA,IAAgBhd,GAC3BmyE,EAAuD,KAA1C/xE,GAAOktE,EAAAA,GAAAA,GAAcp7B,IAA4B95C,KAAKC,MAEnE+5E,GAAaC,EAAAA,EAAAA,IAAQ,IAAIj6E,KAAK+5E,KAChC3+D,EAAAA,EAAAA,IAAWntB,EAAM8rF,IAAaG,EAAAA,EAAAA,IAAgBjsF,EAAM8rF,GAAW,GAAM,GAAO,GAM1EI,GAAsBnsF,EAAAA,EAAAA,KAAY,KACtC8rF,EAAoB,CAAEzgF,OAAAA,EAAQ4Y,OAAAA,EAAQmoE,YAAY,MACjD,CAAC/gF,EAAQygF,EAAqB7nE,IAE3BooE,GAAsBrsF,EAAAA,EAAAA,KAAY,KACtC8rF,EAAoB,CAAEzgF,OAAAA,EAAQ4Y,OAAAA,EAAQmoE,YAAY,MACjD,CAAC/gF,EAAQygF,EAAqB7nE,IAEjC,OACE,0BAAKtjB,UAAWmC,EAAe,MAC7B,0BAAKnC,UAAWmC,EAAe,QAC7B,0BAAKnC,UAAWmC,EAAe,QAASjC,QAftB,KACtB+zB,EAAS,CAAE13B,GAAI+mB,MAeT,mBAACtK,GAAA,EAAD,CACEvP,IAAK6Z,EACLxjB,KAAK,SACLmZ,KAAMA,IAER,0BAAKjZ,UAAWmC,EAAe,cAC7B,0BAAKnC,UAAWmC,EAAe,cAAe6zB,GAC9C,0BAAKh2B,UAAWmC,EAAe,kBAAmB0kB,KAGtD,0BAAK7mB,UAAWmC,EAAe,SAAUkpF,IAE3C,0BAAKrrF,UAAWmC,EAAe,YAC7B,mBAACvC,EAAA,EAAD,CAAQI,UAAWmC,EAAe,UAAWjC,QAASsrF,GACvClsF,EAAZynB,EAAiB,sBAA8B,sBAElD,mBAACnnB,EAAA,EAAD,CAAQI,UAAWmC,EAAe,UAAWklB,QAAM,EAACnnB,QAASwrF,GAC1DpsF,EAAK,yBCuDhB,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAD,KAAoC,IAA3B,OAAE0M,GAAyB,EAClC,MAAMwO,GAAO/N,EAAAA,EAAAA,IAAWnN,EAAQ0M,GAEhC,MAAO,CACLwO,KAAAA,EACAiyC,iBAAkBntD,EAAOmtD,iBACzBpkC,UAAW7N,IAAQsW,EAAAA,EAAAA,IAActW,MAPnBnb,EA1GkC,IAMhD,cANiD,KACrDmb,EADqD,OAErDxO,EAFqD,SAGrDY,EAHqD,UAIrDyb,EAJqD,QAKrDxgB,GACI,EACJ,MAAM,wBAAEolF,EAAF,qBAA2B7R,IAAyB/6E,EAAAA,EAAAA,OACnD6sF,EAAuBC,EAAqBC,IAAwBnnE,EAAAA,GAAAA,MACpEonE,EAAuBC,EAAqBC,IAAwBtnE,EAAAA,GAAAA,KAErErlB,GAAOC,EAAAA,EAAAA,MAENo4B,EAAe4S,IAAoBjpC,EAAAA,EAAAA,OACnCkpC,EAAmBC,IAAwBnpC,EAAAA,EAAAA,KAAS,GACrDopC,GAAsBrrC,EAAAA,EAAAA,KAAY,IAAMorC,GAAqB,IAAO,KAE1ElpC,EAAAA,EAAAA,KAAU,KACHo2B,IACHN,EAAAA,GAAAA,GAAiB,eAAeC,KAAKiT,KAEtC,CAAC5S,KAEJ9W,EAAAA,EAAAA,IAAevV,EAAU/E,IAEzBhF,EAAAA,EAAAA,KAAU,KACH2X,MAAAA,GAAAA,EAAM0iE,eAAiBrjE,EAAAA,EAAAA,IAAS7N,IACnCovE,EAAqB,CAAEpvE,OAAAA,MAExB,CAACwO,EAAMxO,EAAQovE,IAElB,MAAMoS,GAA0B7sF,EAAAA,EAAAA,KAAY,KAC1CssF,EAAwB,CAAEjhF,OAAAA,EAAQ+gF,YAAY,IAC9CK,MACC,CAACH,EAAyBjhF,EAAQohF,IAE/BK,GAA0B9sF,EAAAA,EAAAA,KAAY,KAC1CssF,EAAwB,CAAEjhF,OAAAA,EAAQ+gF,YAAY,IAC9CQ,MACC,CAACN,EAAyBjhF,EAAQuhF,IAErC,OACE,0BAAKjsF,UAAU,iCACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,gBACZ23B,GACC,mBAACD,GAAA,EAAD,CACEn7B,GAAG,mBACHuD,KAAMssF,EAAAA,GACNz0D,cAAeA,EACfC,KAAM4S,EACNxS,OAAQ0S,KAIbvjC,QAAQ+R,MAAAA,GAAD,UAACA,EAAM0iE,oBAAP,aAAC,EAAoBl+E,SAC3B,0BAAKsC,UAAU,gBACb,mBAACJ,EAAA,EAAD,CAAQI,UAAU,qBAAqBE,QAAS2rF,GAAhD,cACA,mBAACjsF,EAAA,EAAD,CAAQI,UAAU,qBAAqBE,QAAS8rF,EAAqB3kE,QAAM,GAA3E,iBAIN,0BAAKrnB,UAAU,WACb,0BAAKA,UAAU,gBAAgByhF,eAAa,GAC1C,wBAAGh4E,IAAI,SACHyP,MAAAA,GAAAA,EAAM0iE,aAAiC1iE,EAAK0iE,aAAal+E,OACvD4B,EAAK,eAAgB4Z,EAAK0iE,aAAal+E,QAAU4B,EAAK,oBADnCA,EAAK,cAG5B4Z,MAAAA,GAAAA,EAAM0iE,eACN,mBAACjtE,EAAA,EAAD,CAASlF,IAAI,YAEiB,KAA/ByP,MAAAA,GAAA,UAAAA,EAAM0iE,oBAAN,eAAoBl+E,SACnB,wBAAGsC,UAAU,aAAayJ,IAAI,SACfnK,EAAZynB,EAAiB,iCAAyC,gCAG9D7N,MAAAA,GAbH,UAaGA,EAAM0iE,oBAbT,aAaG,EAAoB34D,KAAI,QAAC,OAAEK,EAAF,MAAUuD,EAAV,KAAiBxN,GAAlB,SACvB,mBAAC,GAAD,CACEiK,OAAQA,EACRuD,MAAOA,EACPxN,KAAMA,EACN0N,UAAWA,EACXrc,OAAQA,EACRjB,IAAK6Z,SAKb,mBAAC8E,GAAA,EAAD,CACEzoB,OAAQisF,EACRrlF,QAASulF,EACTllE,MAAM,uBACN3lB,KAAK,gDACLqnB,eAAgB4jE,IAElB,mBAAC9jE,GAAA,EAAD,CACEzoB,OAAQosF,EACRxlF,QAAS0lF,EACTrlE,MAAM,uBACN3lB,KAAK,gDACLqnB,eAAgB6jE,SCuJxB,IAAeruF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAGQ,CACLquF,gBAHqBC,EAAAA,EAAAA,IAA4BtuF,MAFnCD,EAnP0B,IAUxC,IAVyC,OAC7C2M,EAD6C,cAE7C+3B,EAF6C,qBAG7Cw/C,EAH6C,wBAI7CF,EAJ6C,eAK7Cn/C,EAL6C,mBAM7Ci5C,EAN6C,QAO7Ct1E,EAP6C,SAQ7C+E,EAR6C,eAS7C+gF,GACI,EACJ,OAAQ5pD,GACN,KAAK43C,EAAAA,GAAAA,QACH,OAAQgS,GACN,IAAK,OACH,OACE,mBAAC,GAAD,CACE5iF,IAAKiB,EACL4Y,OAAQ5Y,EACRnE,QAASA,EACT+E,SAAUA,IAGhB,IAAK,QACH,OACE,mBAAC,GAAD,CACE7B,IAAKiB,EACLA,OAAQA,EACRk4B,eAAgBA,EAChBr8B,QAASA,EACT+E,SAAUA,GAAY,CACpB+uE,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA79E,SAASimC,KAGjB,IAAK,UACH,OACE,mBAAC,GAAD,CACEh5B,IAAKiB,EACLA,OAAQA,EACRk4B,eAAgBA,EAChBr8B,QAASA,EACT+E,SAAUA,GAAY,CACpB+uE,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA79E,SAASimC,KAKnB,MAGF,KAAK43C,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRk4B,eAAgBA,EAChBt3B,SAAUA,EACV/E,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRk4B,eAAgBA,EAChBi5C,mBAAoBA,EACpBvwE,SAAUA,GAAY,CACpB+uE,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACA79E,SAASimC,GACXl8B,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRmxE,mBAAoBA,EACpBj5C,eAAgBA,EAChBt3B,SAAUA,GAAY,CACpB+uE,EAAAA,GAAAA,sBACA79E,SAASimC,GACXl8B,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRu3E,qBAAsBA,EACtBF,wBAAyBA,EACzBn/C,eAAgBA,EAChBt3B,SAAUA,EACV/E,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRk4B,eAAgBA,EAChBi5C,mBAAoBA,EACpBvwE,SAAUA,GAAY,CACpB+uE,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA79E,SAASimC,GACXl8B,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRq4E,WAAYtgD,IAAkB43C,EAAAA,GAAAA,mBAC9B2I,eAAgBf,EAChBF,wBAAyBA,EACzBn/C,eAAgBA,EAChBt3B,SAAUA,EACV/E,QAASA,IAIf,KAAK8zE,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,IAGf,KAAK8zE,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,EACTq8B,eAAgBA,IAGtB,KAAKy3C,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,EACTq8B,eAAgBA,IAGtB,KAAKy3C,EAAAA,GAAAA,eACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRy5E,UAAQ,EACR74E,SAAUA,EACV/E,QAASA,EACTq8B,eAAgBA,EAChBi5C,mBAAoBA,IAI1B,KAAKxB,EAAAA,GAAAA,UACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,IAGf,KAAK8zE,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,IAGf,KAAK8zE,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE3vE,OAAQA,EACRY,SAAUA,EACV/E,QAASA,S,eCpRnB,MAAMgmF,GAAO,8BACPC,GAAc,uBACdC,GAAc,uBAEb,IAAKC,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAMZ,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,cAGlB,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAWpgE,QAAQ,MAAO,IACnC2/D,GAAKvnD,KAAKgoD,GACLN,GAASG,KAEdL,GAAYxnD,KAAKgoD,IAAeP,GAAYznD,KAAKgoD,GAC5CN,GAASI,WAEXJ,GAASE,QCvBlB,MA0OMK,GAAuC,GAChCC,GAA2B,oDAoCxC,GA/Qc,+8JA8OX1vD,MAAM,MACNva,KAAKkqE,IAQG,CACL5wF,GARS4wF,EAAI5sC,OAAO,EAAG,GAQnB6sC,KAPOD,EAAI5sC,OAAO,EAAG,GAOf/zB,KANE,IAAG2gE,EAAI1xD,MAAM,OAAQ,KAMjBta,KALLgsE,EAAI3vD,MAAM,OAAO,GAKN6vD,YAI5B,SAA8BC,GAC5B,IAAKA,EACH,OAAOJ,GAGT,MAAMK,EAAcD,EAAO,GAC3B,IAAIE,EAEJ,IAAKP,GAAaM,GAAc,CAC9B,MAAME,EAAoBF,EAAY/vD,MAAM,IAAIva,IAAIhJ,QACpDuzE,EAAoBC,EAAkB5rC,QAAO,CAACC,EAAQ7sB,EAAO/R,IACnD,GAAE4+B,WAAgB7sB,MAAU/R,EAAI,EAAI,IAAM,MACjD,IACH+pE,GAAaM,GAAe,IAAIG,OAAQ,GAAEF,IAAoB,MAAMG,OAAO,EAAIF,EAAkB/vF,WAGnG,OAAOuvF,GAAaM,GAvBEK,CADLT,EAAI1xD,MAAM,aCpNvBuG,GAA2B,CAC/B6rD,YAAa,GACbC,YAAa,GACbC,KAAM,GACNzrD,MAAO,GACP0rD,YAAa,GACbC,SAAU,GACVj4D,SAAU,GACVoM,MAAO,GACP8rD,MAAO,GACPC,SAAU,GACVnB,WAAY,GACZoB,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,IAGRC,GAAgD,CAACtsD,EAAOC,KAC5D,OAAQA,EAAOxoB,MACb,IAAK,iBACH,MAAO,IACFuoB,EACHurD,YAAatrD,EAAOC,QACpBmsD,WAAY,IACPrsD,EAAMqsD,WACTd,iBAAa5tF,IAGnB,IAAK,iBACH,MAAO,IACFqiC,EACHwrD,YAAavrD,EAAOC,QACpBmsD,WAAY,IACPrsD,EAAMqsD,WACTb,iBAAa7tF,IAGnB,IAAK,aACH,MAAO,IACFqiC,EACHyrD,KAAMxrD,EAAOC,QACbmsD,WAAY,IACPrsD,EAAMqsD,WACTZ,UAAM9tF,IAGZ,IAAK,cACH,MAAO,IACFqiC,EACHA,MAAOC,EAAOC,QACdmsD,WAAY,IACPrsD,EAAMqsD,WACTrsD,WAAOriC,IAGb,IAAK,gBACH,MAAO,IACFqiC,EACH0rD,YAAazrD,EAAOC,QACpB+rD,eAAgBM,GAAkBtsD,EAAOC,SACzCmsD,WAAY,IACPrsD,EAAMqsD,WACTX,iBAAa/tF,IAGnB,IAAK,iBACH,MAAO,IACFqiC,EACH2rD,SAAU1rD,EAAOC,QACjBmsD,WAAY,IACPrsD,EAAMqsD,WACTV,cAAUhuF,IAGhB,IAAK,iBACH,MAAO,IACFqiC,EACHtM,SAAUuM,EAAOC,QACjBmsD,WAAY,IACPrsD,EAAMqsD,WACT34D,cAAU/1B,IAGhB,IAAK,cACH,MAAO,IACFqiC,EACHF,MAAOG,EAAOC,QACdmsD,WAAY,IACPrsD,EAAMqsD,WACTvsD,WAAOniC,IAGb,IAAK,cACH,MAAO,IACFqiC,EACH4rD,MAAO3rD,EAAOC,QACdmsD,WAAY,IACPrsD,EAAMqsD,WACTT,WAAOjuF,IAGb,IAAK,iBACH,MAAO,IAAKqiC,EAAO6rD,SAAU5rD,EAAOC,SACtC,IAAK,mBACH,MAAO,IACFF,EACH0qD,WAAYzqD,EAAOC,QACnBmsD,WAAY,IACPrsD,EAAMqsD,WACT3B,gBAAY/sF,IAGlB,IAAK,mBACH,MAAO,IACFqiC,EACH8rD,WAAY7rD,EAAOC,QACnBmsD,WAAY,IACPrsD,EAAMqsD,WACTP,gBAAYnuF,IAGlB,IAAK,mBACH,MAAO,IACFqiC,EACH+rD,OAAQ9rD,EAAOC,QACfmsD,WAAY,IACPrsD,EAAMqsD,WACTN,YAAQpuF,IAGd,IAAK,gBACH,MAAO,IACFqiC,EACHgsD,IAAK/rD,EAAOC,QACZmsD,WAAY,IACPrsD,EAAMqsD,WACTL,SAAKruF,IAGX,IAAK,uBACH,MAAO,IACFqiC,EACHisD,eAAgBhsD,EAAOC,QACvBmsD,WAAY,IACPrsD,EAAMqsD,WACTJ,oBAAgBtuF,IAGtB,IAAK,mBACH,MAAO,IACFqiC,EACHksD,WAAYjsD,EAAOC,QACnBmsD,WAAY,IACPrsD,EAAMqsD,WACTH,gBAAYvuF,IAGlB,IAAK,iBACH,MAAO,IAAKqiC,EAAOmsD,SAAUlsD,EAAOC,SACtC,IAAK,wBACH,MAAO,IAAKF,EAAOosD,gBAAiBnsD,EAAOC,SAC7C,IAAK,iBACH,OAAID,EAAOC,QAAQwrD,YACV,IACF1rD,KACAC,EAAOC,QACV+rD,eAAgBM,GAAkBtsD,EAAOC,QAAQwrD,cAG9C,IAAK1rD,KAAUC,EAAOC,SAC/B,IAAK,gBACH,MAAO,IACFF,EACHqsD,WAAY,IACPrsD,EAAMqsD,cACNpsD,EAAOC,UAGhB,QACE,OAAOF,IAIb,SAASusD,GAAkBC,GACzB,MAAMzsC,EAAUmC,GAAAA,MAAiB,QAAC,GAAEjoD,GAAH,SAAYA,IAAOuyF,KACpD,OAAOzsC,EAAUA,EAAQlhC,KAAO,GCvNnB,SAAS4tE,GACtBtpF,GACA,IADkCupF,EAClC,uDAJuB,KAKvBztF,EAAAA,EAAAA,KAAU,KACJqF,EAAAA,IAIJxC,YAAW,MACT0sE,EAAAA,EAAAA,KAAQ,KACFrrE,EAAIvB,SACNuB,EAAIvB,QAAQyqC,aAGfqgD,KACF,CAACvpF,EAAKupF,ICNX,MAyCA,IAAelxF,EAAAA,EAAAA,KAzCeuN,IAC5B,MAAM,GACJ9O,EADI,MAEJ0T,EAFI,MAGJkhB,EAHI,SAIJ89D,EAJI,MAKJrpE,EALI,IAMJngB,EANI,YAOJ8c,EAPI,SAQJvI,EARI,SASJnE,GACExK,EACE6jF,EAAYtpE,GAASuL,EACrB69C,GAAgB7sE,EAAAA,EAAAA,GACpB,cACA8N,GAAS,UACT2V,GAAS,QACTspE,GAAa,aACbD,GAAY,aACZ,eAGF,OACE,0BAAKjvF,UAAWgvE,GACd,6BACEhvE,UAAU,eACVzD,GAAIA,EACJ0T,MAAOA,GAAS,GAChB+J,SAAUA,EACVuI,YAAaA,GAAe4O,EAC5B1rB,IAAKA,GAEJoQ,GAEFq5E,GAAa3yF,GACZ,4BAAO4yF,QAAS5yF,GAAK2yF,OCsJ7B,IAAepxF,EAAAA,EAAAA,KAlLoB,IAO7B,IAP8B,MAClCwkC,EADkC,UAElC8sD,EAFkC,UAGlCC,EAHkC,SAIlCC,EAJkC,YAKlCC,EALkC,SAMlCzjD,GACI,EAEJ,MAAMnyB,GAAW5V,EAAAA,EAAAA,IAAyB,MAEpCyrF,GAAWzrF,EAAAA,EAAAA,IAAyB,MAEpC0rF,GAAmB1rF,EAAAA,EAAAA,IAA0B,OAEnDxC,EAAAA,EAAAA,KAAU,KACJkuF,EAAiBvrF,SAChBurF,EAAiBvrF,QAAQ+L,QAAUqyB,EAAM0rD,cAC5CyB,EAAiBvrF,QAAQ+L,MAAQqyB,EAAM0rD,eAExC,CAAC1rD,EAAM0rD,cAEV,MAAM1uF,GAAOC,EAAAA,EAAAA,KAEbwvF,GAAuBp1E,GAEvB,MAAM+1E,GAAuBrwF,EAAAA,EAAAA,KAAa+C,IACxC0pC,EAAS,CAAE/xB,KAAM,iBAAkByoB,QAASpgC,EAAE8G,OAAO+G,UACpD,CAAC67B,IAEE6jD,GAAuBtwF,EAAAA,EAAAA,KAAa+C,IACxC0pC,EAAS,CAAE/xB,KAAM,iBAAkByoB,QAASpgC,EAAE8G,OAAO+G,UACpD,CAAC67B,IAEE8jD,GAAmBvwF,EAAAA,EAAAA,KAAa+C,IACpC0pC,EAAS,CAAE/xB,KAAM,aAAcyoB,QAASpgC,EAAE8G,OAAO+G,UAChD,CAAC67B,IAEE+jD,GAAoBxwF,EAAAA,EAAAA,KAAa+C,IACrC0pC,EAAS,CAAE/xB,KAAM,cAAeyoB,QAASpgC,EAAE8G,OAAO+G,UACjD,CAAC67B,IAEEgkD,GAAsBzwF,EAAAA,EAAAA,KAAa+C,IACvC0pC,EAAS,CAAE/xB,KAAM,gBAAiByoB,QAASpgC,EAAE8G,OAAO+G,UACnD,CAAC67B,IAEEikD,GAAuB1wF,EAAAA,EAAAA,KAAa+C,IACxC0pC,EAAS,CAAE/xB,KAAM,iBAAkByoB,QAASpgC,EAAE8G,OAAO+G,UACpD,CAAC67B,IAEEkkD,GAAuB3wF,EAAAA,EAAAA,KAAa+C,IACxC0pC,EAAS,CAAE/xB,KAAM,iBAAkByoB,QAASpgC,EAAE8G,OAAO+G,UACpD,CAAC67B,IAEEmkD,GAAoB5wF,EAAAA,EAAAA,KAAa+C,IACrC0pC,EAAS,CAAE/xB,KAAM,cAAeyoB,QAASpgC,EAAE8G,OAAO+G,UACjD,CAAC67B,IAEEokD,GAAoB7wF,EAAAA,EAAAA,KAAa+C,IACrC,IAAI,MAAE6N,GAAU7N,EAAE8G,OAClB+G,EAAS,IAAGA,EAAM2c,QAAQ,MAAO,MAC7B4iE,EAAStrF,UACXsrF,EAAStrF,QAAQ+L,MAAQA,GAE3B67B,EAAS,CAAE/xB,KAAM,cAAeyoB,QAASvyB,MACxC,CAAC67B,IAEEqkD,GAAuB9wF,EAAAA,EAAAA,KAAa+C,IACxC0pC,EAAS,CAAE/xB,KAAM,iBAAkByoB,QAASpgC,EAAE8G,OAAO+G,UACpD,CAAC67B,KAEE,WAAE6iD,GAAersD,EACvB,OACE,0BAAKtiC,UAAU,gBACb,+BACGuvF,EACC,8BACE,6BAAKjwF,EAAK,2BACV,mBAAC+iB,GAAA,EAAD,CACE5c,IAAKkU,EACLwX,MAAO7xB,EAAK,sCACZ0a,SAAU01E,EACVz/E,MAAOqyB,EAAMurD,YACbpgE,UAAU,OACV7H,MAAO+oE,EAAWd,cAEpB,mBAACxrE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,sCACZ0a,SAAU21E,EACV1/E,MAAOqyB,EAAMwrD,YACbrgE,UAAU,OACV7H,MAAO+oE,EAAWb,cAEpB,mBAACzrE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,kCACZ0a,SAAU41E,EACV3/E,MAAOqyB,EAAMyrD,KACbtgE,UAAU,OACV7H,MAAO+oE,EAAWZ,OAEpB,mBAAC1rE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,mCACZ0a,SAAU61E,EACV5/E,MAAOqyB,EAAMA,MACb7U,UAAU,OACV7H,MAAO+oE,EAAWrsD,QAEpB,mBAAC,GAAD,CACEnR,MAAO7xB,EAAK,0BACZijB,YAAajjB,EAAK,0BAClB0a,SAAU81E,EACV7/E,MAAOqyB,EAAM0rD,YACbiB,SAAU9nF,SAAQ,GAClB5K,GAAG,mBACHqpB,MAAO+oE,EAAWX,YAClBvoF,IAAKgqF,GAEJjrC,GAAAA,KAAgB,QAAC,KAAErjC,EAAF,GAAQ5kB,GAAT,SACf,6BACE0T,MAAO1T,EACPyD,UAAU,eAETmhB,OAKP,mBAACkB,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,iCACZ0a,SAAU+1E,EACV9/E,MAAOqyB,EAAM2rD,SACbxgE,UAAU,OACV7H,MAAO+oE,EAAWV,iBAGpBhuF,EACFqvF,GAAYF,GAAaC,EACzB,6BAAK/vF,EAAK,iCACRW,EACFqvF,GACA,mBAACjtE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,uBACZ0a,SAAUg2E,EACV//E,MAAOqyB,EAAMtM,SACbvI,UAAU,OACV7H,MAAO+oE,EAAW34D,WAGpBo5D,GACA,mBAAC/sE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,mCACZ0a,SAAUi2E,EACVhgF,MAAOqyB,EAAMF,MACb3U,UAAU,QACV7H,MAAO+oE,EAAWvsD,QAGpBitD,GACA,mBAAChtE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,8BACZ0a,SAAUk2E,EACVjgF,MAAOqyB,EAAM4rD,MACbzgE,UAAU,MACV7H,MAAO+oE,EAAWT,MAClBzoF,IAAK+pF,IAGT,mBAAClmD,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,uBACZwzC,SAAUxzC,EAAK,2BACfiqC,QAASpiC,QAAQm7B,EAAMmsD,UACvBz0E,SAAUm2E,SCtIpB,IAAeryF,EAAAA,EAAAA,KAxCgB,IAKzB,IAL0B,MAC9BwkC,EAD8B,gBAE9B8tD,EAF8B,SAG9BC,EAH8B,SAI9BvkD,GACI,EACJ,MAAMxsC,GAAOC,EAAAA,EAAAA,MAEbgC,EAAAA,EAAAA,KAAU,KACH6uF,IAAmB9tD,EAAM6rD,UAG9BriD,EAAS,CAAE/xB,KAAM,iBAAkByoB,QAAS4tD,EAAgB,GAAG7zF,OAC9D,CAAC6zF,EAAiB9tD,EAAM6rD,SAAUriD,IAErC,MAAMwkD,GAAuBjxF,EAAAA,EAAAA,KAAa4Q,IACxC67B,EAAS,CAAE/xB,KAAM,iBAAkByoB,QAASvyB,MAC3C,CAAC67B,IAEEza,GAAU5xB,EAAAA,EAAAA,KAAQ,IAAO2wF,EAAgBntE,KAAI,QAAG1mB,GAAI0T,EAAO2W,MAAOuK,EAApB,OAA2Bo/D,GAA5B,QAA0C,CAC3Fp/D,MAAAA,EACA2hB,UAAU09C,EAAAA,GAAAA,GAAeD,EAAQF,EAAU/wF,EAAKktB,MAChDvc,MAAAA,OACI,CAACmgF,EAAiBC,EAAU/wF,EAAKktB,OAEvC,OACE,0BAAKxsB,UAAU,YACb,+BACE,4BAAIV,EAAK,0BACT,mBAAC8xB,GAAA,EAAD,CACEjQ,KAAK,mBACLkQ,QAASA,EACTrX,SAAUs2E,EACVh/D,SAAUgR,EAAM6rD,gBCkC1B,SAASsC,GACPxwC,EAAgCr5B,EAAe3W,EAAeogF,GAC9D,IADiFK,EACjF,wDACA,OACE,0BAAK1wF,UAAY,oBAAkB0wF,EAAO,uBAAyB,KACjE,0BAAK1wF,UAAU,SACX4mB,GAEJ,0BAAK5mB,UAAU,UACZwwF,EAAAA,GAAAA,GAAevgF,EAAOogF,EAAUpwC,KAMzC,SAAS0wC,GAAmBlwF,EAAcmmB,EAAe2Q,GACvD,OACE,0BAAKv3B,UAAU,sBACb,wBAAGA,UAAWS,GAAd,KACA,0BAAKT,UAAU,QACb,0BAAKA,UAAU,SACX4mB,GAEJ,wBAAG5mB,UAAU,QACTu3B,KAOZ,UAAez5B,EAAAA,EAAAA,KAvFgB,IAOzB,IAP0B,eAC9B8yF,EAD8B,OAE9BC,EAF8B,eAG9BC,EAH8B,aAI9BC,EAJ8B,SAK9BV,EAL8B,WAM9BW,GACI,EACJ,MAAM1xF,GAAOC,EAAAA,EAAAA,MAEP,SAAE0xF,EAAF,MAAYrqE,EAAZ,KAAmB3lB,GAAS2vF,GAAkB,IAC9C,cACJM,EADI,gBAEJC,EAFI,gBAGJC,EAHI,KAIJjwE,EAJI,MAKJ+sE,EALI,eAMJmD,GACGN,GAAgB,GAErB,OACE,0BAAK/wF,UAAU,YACb,0BAAKA,UAAU,yBACZixF,GAAY,0BAAKz1F,IAAKy1F,EAAUpiF,IAAI,KACrC,0BAAK7O,UAAU,QACb,6BAAK4mB,GACL,4BAAI3lB,KAGR,0BAAKjB,UAAU,cACX6wF,GAAUA,EAAO5tE,KAAKg+C,GACtBwvB,GAAkBnxF,EAAKktB,KAAMy0C,EAAK9vC,MAAO8vC,EAAKsvB,OAAQF,KAEtDS,GAAkBA,EAAe7tE,KAAKg+C,GACtCwvB,GAAkBnxF,EAAKktB,KAAMy0C,EAAK9vC,MAAO8vC,EAAKsvB,OAAQF,UAEvCpwF,IAAf+wF,GACAP,GAAkBnxF,EAAKktB,KAAMltB,EAAK,wBAAyB0xF,EAAYX,GAAU,IAGrF,0BAAKrwF,UAAU,gBACZkxF,GAAiBP,GAAmB,YAAaO,EAAe5xF,EAAK,0BACrE6xF,GAAmBR,IAClBxuF,EAAAA,EAAAA,GAAe,WAAYgvF,EAAgB9wC,eAC3C8wC,EACA7xF,EAAK,4BAEN8xF,GAAmBT,GAAmB,gBAAiBS,EAAiB9xF,EAAK,2BAC7E6hB,GAAQwvE,GAAmB,YAAaxvE,EAAM7hB,EAAK,wBACnD4uF,GAASyC,GAAmB,aAAczC,EAAO5uF,EAAK,+BACtD+xF,GAAkBV,GAAmB,aAAcU,EAAgB/xF,EAAK,uCCjCjF,IAAexB,EAAAA,EAAAA,KAhCoB,IAAgC,IAA/B,MAAEmS,EAAF,MAAS2V,EAAT,SAAgB5L,GAAe,EACjE,MAAM1a,GAAOC,EAAAA,EAAAA,KAEP+xF,GAAiBvtF,EAAAA,EAAAA,IAAyB,MAE1C+c,GAAgBzhB,EAAAA,EAAAA,KAAa+C,IACjC,GAAc,cAAVA,EAAEqH,KAA0D,MAAnCwG,EAAMshF,OAAOthF,EAAMvS,OAAS,GAAY,CACnE,MAAMopD,EAAW72C,EAAMgxB,MAAM,EAAGhxB,EAAMvS,OAAS,GAC3C4zF,EAAeptF,UACjBotF,EAAeptF,QAAQ+L,MAAQ62C,MAGlC,CAAC72C,IAEE+vC,GAAe3gD,EAAAA,EAAAA,KAAa+C,IAChC4X,EChCG,SAA0B2kD,GAE/B,MAAM6yB,GADN7yB,EAAQA,EAAM/xC,QAAQ,SAAU,IAAIqU,MAAM,EAAG,IACzBxF,MAAM,WAO1B,OANI+1D,MAAAA,GAAAA,EAAQ,IAAMv3E,OAAOu3E,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,MAAAA,GAAAA,EAAQ,IAA0B,IAApBA,EAAM,GAAG9zF,SAAiB8zF,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAMjnF,KAAK,KAAO,GDuBtBknF,CAAiBrvF,EAAE8G,OAAO+G,UAClC,CAAC+J,IAEJ,OACE,mBAACqI,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,yBACZmG,IAAK6rF,EACLt3E,SAAUgmC,EACV19B,UAAWxB,EACX7Q,MAAOA,EACP2V,MAAOA,EACP6H,UAAU,UACVy2D,UAnCmB,O,0BEOzB,MAmDA,IAAepmF,EAAAA,EAAAA,KA3CkB,IAAgC,IAA/B,MAAEmS,EAAF,MAAS2V,EAAT,SAAgB5L,GAAe,EAC/D,MAAM1a,GAAOC,EAAAA,EAAAA,KAEPmyF,GAAgB3tF,EAAAA,EAAAA,IAAyB,MAE/CgrF,GAAuB2C,GAEvB,MAAOC,EAAUC,IAAetwF,EAAAA,EAAAA,IAAiBorF,GAASE,UAC1DrrF,EAAAA,EAAAA,KAAU,KACR,MAAMswF,EAAc9E,GAAe98E,GACnC2hF,EAAYC,KAEX,IAEH,MAAM7xC,GAAe3gD,EAAAA,EAAAA,KAAa+C,IAChC,MAAM0kD,ED3BH,SAA0B6X,GAE/B,MAAM6yB,GADN7yB,EAAQA,EAAM/xC,QAAQ,SAAU,KACZ6O,MAAM,WAC1B,OAAO+1D,EAAQA,EAAMjnF,KAAK,KAAO,GCwBdunF,CAAiB1vF,EAAE8G,OAAO+G,OACrC4hF,EAAc9E,GAAe3qF,EAAE8G,OAAO+G,OAC5C2hF,EAAYC,GACZ73E,EAAS8sC,GACL4qC,EAAcxtF,UAChBwtF,EAAcxtF,QAAQ+L,MAAQ62C,KAE/B,CAAC9sC,EAAU03E,IAERK,EAqBR,SAAqBJ,GACnB,OAAQA,GACN,KAAKjF,GAASI,WACZ,OAAO,0BAAKtxF,IAAKw2F,GAAoBnjF,IAAI,KAC3C,KAAK69E,GAASG,KACZ,OAAO,0BAAKrxF,IAAKy2F,GAAcpjF,IAAI,KACrC,QACE,QA5BaqjF,CAAYP,GAE7B,OACE,0BAAK3xF,UAAU,aACb,2BAAMA,UAAU,cAAc+xF,GAC9B,mBAAC1vE,GAAA,EAAD,CACE5c,IAAKisF,EACLvgE,MAAO7xB,EAAK,qBACZ0a,SAAUgmC,EACV/vC,MAAOA,EACPwd,UAAU,UACVztB,UAAW2xF,EAAW,iBAAmB,GACzC/rE,MAAOA,EACPs+D,UA7CuB,SC2I/B,IAAepmF,EAAAA,EAAAA,KAlImB,IAO5B,IAP6B,MACjCwkC,EADiC,mBAEjC6vD,EAFiC,mBAGjCC,EAHiC,YAIjCC,EAJiC,QAKjCC,EALiC,SAMjCxmD,GACI,EAEJ,MAAM2jD,GAAmB1rF,EAAAA,EAAAA,IAA0B,OAEnDxC,EAAAA,EAAAA,KAAU,KACJkuF,EAAiBvrF,SAChBurF,EAAiBvrF,QAAQ+L,QAAUqyB,EAAMisD,iBAC5CkB,EAAiBvrF,QAAQ+L,MAAQqyB,EAAMisD,kBAExC,CAACjsD,EAAMisD,iBAEV,MAAMgE,GAAyBlzF,EAAAA,EAAAA,KAAa4Q,IAC1C67B,EAAS,CAAE/xB,KAAM,mBAAoByoB,QAASvyB,MAC7C,CAAC67B,IAEE0mD,GAAyBnzF,EAAAA,EAAAA,KAAa+C,IAC1C0pC,EAAS,CAAE/xB,KAAM,mBAAoByoB,QAASpgC,EAAE8G,OAAO+G,MAAMwiF,kBAC5D,CAAC3mD,IAEE4mD,GAAqBrzF,EAAAA,EAAAA,KAAa4Q,IACtC67B,EAAS,CAAE/xB,KAAM,mBAAoByoB,QAASvyB,MAC7C,CAAC67B,IAEE6mD,GAAkBtzF,EAAAA,EAAAA,KAAa+C,IACnC0pC,EAAS,CAAE/xB,KAAM,gBAAiByoB,QAASpgC,EAAE8G,OAAO+G,UACnD,CAAC67B,IAEEgkD,GAAsBzwF,EAAAA,EAAAA,KAAa+C,IACvC0pC,EAAS,CAAE/xB,KAAM,uBAAwByoB,QAASpgC,EAAE8G,OAAO+G,UAC1D,CAAC67B,IAEE8mD,GAA8BvzF,EAAAA,EAAAA,KAAa+C,IAC/C0pC,EAAS,CAAE/xB,KAAM,mBAAoByoB,QAASpgC,EAAE8G,OAAO+G,UACtD,CAAC67B,IAEE+mD,GAA8BxzF,EAAAA,EAAAA,KAAa+C,IAC/C0pC,EAAS,CAAE/xB,KAAM,wBAAyByoB,QAASpgC,EAAE8G,OAAO+G,UAC3D,CAAC67B,IAEExsC,GAAOC,EAAAA,EAAAA,MAEP,WAAEovF,EAAa,IAAOrsD,EAE5B,OACE,0BAAKtiC,UAAU,eACb,+BACE,6BAAKV,EAAK,qBACV,mBAAC,GAAD,CACE0a,SAAUu4E,EACVtiF,MAAOqyB,EAAM0qD,WACbpnE,MAAO+oE,EAAW3B,aAElBoF,GACA,mBAAC/vE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,mBACZ0a,SAAUw4E,EACVviF,MAAOqyB,EAAM8rD,WACb3gE,UAAU,OACV7H,MAAO+oE,EAAWP,aAGtB,8BAASpuF,UAAU,iBACjB,mBAAC,GAAD,CACEiQ,MAAOqyB,EAAM+rD,OACbr0E,SAAU04E,EACV9sE,MAAO+oE,EAAWN,SAEpB,mBAAChsE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,yBACZ0a,SAAU24E,EACV1iF,MAAOqyB,EAAMgsD,IACb7gE,UAAU,UACVy2D,UAAW,EACXt+D,MAAO+oE,EAAWL,OAGpB+D,GAAeC,EACf,6BAAKhzF,EAAK,+BACRW,EACFoyF,GACA,mBAAC,GAAD,CACElhE,MAAO7xB,EAAK,0BACZijB,YAAajjB,EAAK,0BAClB0a,SAAU81E,EACV7/E,MAAOqyB,EAAMisD,eACbU,SAAU9nF,SAAQ,GAClB5K,GAAG,kBACHqpB,MAAO+oE,EAAWJ,eAClB9oF,IAAKgqF,GAGHjrC,GAAAA,KAAgB,QAAC,KAAErjC,GAAH,SACd,6BACElR,MAAOkR,EACPnhB,UAAU,eAETmhB,OAMTmxE,GACA,mBAACjwE,GAAA,EAAD,CACE8O,MAAO7xB,EAAK,iCACZ0a,SAAU44E,EACV3iF,MAAOqyB,EAAMksD,WACb/gE,UAAU,OACV7H,MAAO+oE,EAAWH,aAGpB2D,GACA,mBAAC7oD,GAAA,EAAD,CACEnY,MAAO7xB,EAAK,qCACZiqC,QAASjH,EAAMosD,gBACf10E,SAAU64E,SCzHtB,IAAe/0F,EAAAA,EAAAA,KAhBsB,IAAa,IAAZ,IAAEmI,GAAU,EAChD,MAAM3G,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKS,UAAU,kBACb,6BACExE,IAAKyK,EACL2gB,MAAOtnB,EAAK,kCACZwzF,MAAM,UACNC,QAAQ,mEACR/yF,UAAU,gCCOZgzF,GAAsB,IAAI9lD,IAAI,CAFX,SACD,gBAkVxB,IAAepvC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJ8b,EADI,gBAEJs2E,EAFI,UAGJ6C,EAHI,mBAIJd,EAJI,QAKJe,EALI,eAMJtC,EANI,eAOJuC,EAPI,aAQJC,EARI,gBASJC,EATI,MAUJztE,EAVI,kBAWJ0tE,GACEt1F,EAAOu1F,QAELC,EAAkBrsF,QAAQ+rF,KAAaC,IAAmBH,GAAoBS,IAAIN,MAClF,mBAAEf,EAAF,YAAsBC,EAAtB,QAAmCC,GAAac,GAAgB,IAChE,cACJM,EADI,eAEJC,EAFI,eAGJC,EAHI,yBAIJC,EAJI,SAKJC,EALI,gBAMJC,EANI,gBAOJC,EAPI,SAQJ3D,EARI,OASJQ,GACGqC,GAAW,GAEhB,MAAO,CACLp5E,KAAAA,EACAs2E,gBAAAA,EACA6C,UAAAA,EACAd,mBAAAA,EACAgB,eAAAA,EACAE,gBAAAA,EACAK,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAE,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACA3D,SAAAA,EACAQ,OAAAA,EACA2C,gBAAAA,EACA5C,eAAAA,EACAwB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA1sE,MAAAA,EACA0tE,kBAAAA,KApDcv1F,EAnT0C,IAwBxD,IAxByD,OAC7D4B,EAD6D,QAE7D4G,EAF6D,KAG7DuT,EAH6D,gBAI7Ds2E,EAJ6D,UAK7D6C,EAL6D,mBAM7Dd,EAN6D,cAO7DuB,EAP6D,yBAQ7DG,EAR6D,eAS7DF,EAT6D,eAU7DC,EAV6D,gBAW7DG,EAX6D,gBAY7DC,EAZ6D,SAa7D3D,EAb6D,gBAc7DgD,EAd6D,gBAe7DG,EAf6D,eAgB7D5C,EAhB6D,eAiB7DuC,EAjB6D,OAkB7DtC,EAlB6D,mBAmB7DuB,EAnB6D,YAoB7DC,EApB6D,QAqB7DC,EArB6D,kBAsB7DgB,EAtB6D,MAuB7D1tE,GACI,EACJ,MAAM,sBACJquE,EADI,gBAEJC,EAFI,eAGJC,EAHI,oBAIJC,EAJI,kBAKJC,IACEt1F,EAAAA,EAAAA,OAEGu1F,EAAcC,IXyIdpqC,EAAAA,GAAAA,GAAWykC,GAAS5sD,KWxIpBrD,EAAWy4C,IAAgB91E,EAAAA,EAAAA,KAAS,GACrChC,GAAOC,EAAAA,EAAAA,KACPi1F,EAAkB16E,IAAS26E,EAAAA,GAAAA,gBAEjClzF,EAAAA,EAAAA,KAAU,MACJuY,GAAQ8L,IACVwxD,GAAa,KAEd,CAACt9D,EAAM8L,KAEVrkB,EAAAA,EAAAA,KAAU,KACJqkB,MAAAA,GAAAA,EAAO8uE,OACTH,EAAgB,CACdx6E,KAAM,gBACNyoB,QAAS,CACP,CAAC5c,EAAM8uE,OAAQ9uE,EAAMzoB,aAI1B,CAACyoB,EAAO2uE,KAEXhzF,EAAAA,EAAAA,KAAU,KACR,GAAI0xF,EAAW,CACb,MACE9xE,KAAM6U,EADF,MACYk4D,EADZ,MACmB9rD,EADnB,gBAC0BgvD,GAC5B6B,EACJsB,EAAgB,CACdx6E,KAAM,iBACNyoB,QAAS,CACPxM,SAAAA,EACAk4D,MAAOA,GAA6B,MAApBA,EAAMqD,OAAO,GACxB,IAAGrD,IACJA,EACJ9rD,MAAAA,KACIgvD,GAAmB,SAI5B,CAAC6B,EAAWsB,IAEf,MAAMI,GAAwBt1F,EAAAA,EAAAA,KAAY,KACxCg1F,MACC,CAACA,IAEErD,GAAavxF,EAAAA,EAAAA,KAAQ,IACrBqa,IAAS26E,EAAAA,GAAAA,SACJ,EAqSb,WAAoH,IAA7F5D,EAA6F,uDAA3E,GAAIT,EAAuE,uCAAxBwE,EAAwB,uCAClH,MAAM9D,EAAiBV,EACnByE,GAAkBzE,EAAiBwE,GACnC,GACJ,IAAIhd,EAAQ,EACZ,MAAMkd,EAAcjE,EAAOn7D,OAAOo7D,GAAkB,IAIpD,OAHAlZ,EAAQkd,EAAYjzC,QAAO,CAACk8B,EAAKgX,IACxBhX,EAAMgX,EAAIxE,QAChB3Y,GACIA,EA3SEod,CAAcnE,EAAQT,EAAiBkE,EAAanG,WAC1D,CAACr0E,EAAMw6E,EAAanG,SAAU0C,EAAQT,IAEnCW,GAAetxF,EAAAA,EAAAA,KAAQ,KAC3B,GAAIqa,IAAS26E,EAAAA,GAAAA,SAGb,OAuSJ,SAAyBnyD,EAAkB8tD,EAA+Ce,GACxF,MACMD,EAAiB,GbjalB,SAA4BlE,GACjC,MAAM2E,EAAW5E,GAAeC,GAChC,OAAOL,GAAMgF,IAAuB,Ga8ZfsD,CAAmB3yD,EAAM0qD,gBACJ1qD,EAAM0qD,WAAW/rD,OAAO,KAC5DmwD,EAAkB9uD,EAAMurD,YACzB,GAAEvrD,EAAMurD,gBAAgBvrD,EAAMyrD,SAASzrD,EAAM0rD,mBAC9C/tF,GACE,MAAEiuF,EAAOl4D,SAAU7U,GAASmhB,EAC5BsyD,EAAiBxE,EAAkB8E,GAAmB9E,EAAiB9tD,EAAM6rD,eAAYluF,EAE/F,MAAO,CACLixF,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAjwE,KAAAA,EACA+sE,MAAAA,EACAmD,eAPqBuD,MAAAA,OAAH,EAAGA,EAAgBhuE,OA/S9BuuE,CAAgBb,EAAclE,EAAiB+C,GAAkB,MACvE,CAACr5E,EAAMw6E,EAAclE,EAAiB+C,IAiFnCiC,GAAkB/1F,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAEovF,GAAa6F,EACfe,EAsOV,SAAwBf,GACtB,MAAM,YACJzG,EADI,YAEJC,EAFI,KAGJC,EAHI,MAIJzrD,EAJI,YAKJ0rD,EALI,SAMJC,EACAj4D,SAAU7U,EAPN,MAQJ+sE,EARI,MASJ9rD,GACEkyD,EAWJ,MAAO,CACLnzE,KAAAA,EACA+sE,MAAAA,EACA9rD,MAAAA,EACAgvD,gBAbsB,CACtBvD,YAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAzrD,MAAAA,EACA0rD,YAAAA,EACAC,SAAAA,IAzPoBqH,CAAehB,GACnCL,EAAsB,CAAEoB,YAAAA,EAAa5G,SAAAA,MACpC,CAACwF,EAAuBK,IAErBiB,GAAkBl2F,EAAAA,EAAAA,KAAY,KAClC,MAAMm2F,EA+PV,SAAwBlB,GACtB,MAAM,WACJtH,EADI,WACQoB,EADR,OACoBC,EADpB,IAC4BC,EAD5B,eACiCC,EADjC,WACiDC,GACnD8F,GACGmB,EAAaC,GAAcrH,EAAO7wD,MAAM,KAW/C,MAAO,CACLjG,KAXW,CACXy1D,WAAAA,EACAoB,WAAAA,EACAqH,YAAAA,EACAC,WAAAA,EACApH,IAAAA,EACAjsC,QAASksC,EACToH,IAAKnH,IA3QeoH,CAAetB,GACnCF,EAAoB,CAClBoB,YAAAA,MAED,CAACpB,EAAqBE,IAEnBuB,GAAWx2F,EAAAA,EAAAA,KAAY,KAC3B60F,EAAgB,CACd4B,iBAAkBxB,EAAanG,SAC/BO,gBAAiB4F,EAAa5F,oBAE/B,CAACwF,EAAiBI,IAEfyB,GAAU12F,EAAAA,EAAAA,KAAa22F,IAC3B7B,EAAe,CAAEr6E,KAAMk8E,MACtB,CAAC7B,IAEEh5B,GAAoB97D,EAAAA,EAAAA,KAAY,KAEpC,OADA+3E,GAAa,GACLt9D,GACN,KAAK26E,EAAAA,GAAAA,aACH,OAAOW,IACT,KAAKX,EAAAA,GAAAA,SACH,OAAOsB,EAAQtB,EAAAA,GAAAA,aACjB,KAAKA,EAAAA,GAAAA,YACH,OAAOc,IACT,KAAKd,EAAAA,GAAAA,SACH,OAAOoB,IACT,QACE,MAAO,UAGV,CAAC/7E,EAAMs7E,EAAiBW,EAASR,EAAiBM,IAE/CzzE,GAAc3iB,EAAAA,EAAAA,KAAQ,KAC1B,OAAQqa,GACN,KAAK26E,EAAAA,GAAAA,aACH,OAAOn1F,EAAK,uBACd,KAAKm1F,EAAAA,GAAAA,SACH,OAAOn1F,EAAK,yBACd,KAAKm1F,EAAAA,GAAAA,YACH,OAAOn1F,EAAK,mBACd,KAAKm1F,EAAAA,GAAAA,SACH,OAAOn1F,EAAK,mBACd,KAAKm1F,EAAAA,GAAAA,eACH,OAAOn1F,EAAK,kCACd,QACE,MAAO,MAEV,CAACwa,EAAMxa,IAEJ22F,GAAax2F,EAAAA,EAAAA,KAAQ,IACjBqa,IACD26E,EAAAA,GAAAA,SACIn1F,EAAK,qBAAqBkxF,EAAAA,GAAAA,GAAeQ,EAAYX,EAAU/wF,EAAKktB,OAEpEltB,EAAK,SAEf,CAACwa,EAAMxa,EAAM+wF,EAAUW,IAE1B,OAAIwC,EAEA,mBAAC/wE,GAAA,EAAD,CACEziB,UAAU,QACVL,OAAQA,EACR4G,QAASA,GAET,qGAC6E,8BAD7E,iDAIA,mBAAC3G,EAAA,EAAD,CACEynB,QAAM,EACNnnB,QAASqG,GAERjH,EAAK,QAOZ,mBAACmjB,GAAA,EAAD,CACEziB,UAAU,eACVL,OAAQA,EACR4G,QAASA,GAET,0BAAKvG,UAAU,SAASsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAChD,mBAACL,EAAA,EAAD,CACEI,UAAU,eACVD,MAAM,cACNF,OAAK,EACLC,KAAK,UACLI,QAASqG,EACTpG,UAAU,SAEV,wBAAGH,UAAU,gBAEf,6BAAKoiB,SAEGniB,IAAT6Z,EACC,mBAACR,EAAA,EAAD,CAAY6H,KAAK,QAAQD,UAAWpH,GAClC,0BAAK9Z,UAAU,yBAtKvB,SAA4Bk2F,GAC1B,OAAQA,GACN,KAAKzB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEnyD,MAAOgyD,EACPxoD,SAAUyoD,EACVhF,YAAapoF,QAAQ0sF,GACrBzE,UAAWjoF,QAAQysF,GAAkBI,GACrC3E,UAAWloF,QAAQwsF,GAAkBI,GACrCzE,SAAUnoF,QAAQusF,KAGxB,KAAKe,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACEnyD,MAAOgyD,EACPxoD,SAAUyoD,EACVnE,gBAAiBA,GAAmB,GACpCC,SAAUA,IAGhB,KAAKoE,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEnyD,MAAOgyD,EACPxoD,SAAUyoD,EACVpC,mBAAoBhrF,SAASksF,GAAmBlB,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,IAGf,KAAKmC,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACE5D,OAAQA,EACRC,eAAgBwD,EAAanG,UAAYiC,EACrCyE,GAAkBzE,EAAiBkE,EAAanG,eAChDluF,EACJ+wF,WAAYA,EACZJ,eAAgBA,EAChBG,aAAcA,EACdV,SAAUA,IAGhB,KAAKoE,EAAAA,GAAAA,eACH,OACE,mBAAC,GAAD,CACExuF,IAAKqtF,IAGX,QACE,QAkHK6C,CAAmBr8E,KAIxB,0BAAK9Z,UAAU,iBACb,mBAAC2O,EAAA,EAAD,CAAS5O,MAAM,UAGlBy0F,GACC,0BAAKx0F,UAAU,UACb,mBAACJ,EAAA,EAAD,CACEma,KAAK,SACL7Z,QAASi7D,EACTthD,SAAU8kB,EACVA,UAAWA,GAEVs3D,IAINrwE,IAAUA,EAAM8uE,OAjNrB,WACE,GAAK9uE,EAGL,OACE,mBAACnD,GAAA,EAAD,CACEziB,UAAU,QACVL,OAAQwH,QAAQye,GAChBrf,QAASouF,GAET,6BAAK/uE,EAAMgL,aAAe,SAC1B,4BAAIhL,EAAMgL,aAAe,SACzB,mBAAChxB,EAAA,EAAD,CACEynB,QAAM,EACNnnB,QAASm0F,GAER/0F,EAAK,QAiMgB82F,QA8DhC,SAASlB,GAAmB9E,EAAmCiG,GAC7D,OAAOjG,EAAgBt6D,MAAK,QAAC,GAAEv5B,GAAH,SAAYA,IAAO85F,KAGjD,SAASxB,GAAkBzE,EAAmCwE,GAC5D,MAAM1+B,EAASg/B,GAAmB9E,EAAiBwE,GACnD,OAAO1+B,MAAAA,OAAP,EAAOA,EAAQ26B,OCrYjB,MA0DA,IAAe/yF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAEs4F,GAAYt4F,EAAOu1F,SACrB,SACJlD,EADI,OAEJQ,EAFI,KAGJ0F,EAHI,YAIJC,EAJI,iBAKJC,EALI,eAMJ3F,EANI,eAOJO,EAPI,SAQJJ,EARI,KASJhwF,EATI,MAUJ2lB,GACG0vE,GAAW,GAEhB,MAAO,CACLjG,SAAAA,EACAQ,OAAAA,EACA0F,KAAAA,EACAC,YAAAA,EACAC,iBAAAA,EACA3F,eAAAA,EACAO,eAAAA,EACAJ,SAAAA,EACAhwF,KAAAA,EACA2lB,MAAAA,KA1Bc7oB,EA1D4B,IAa1C,IAb2C,OAC/C4B,EAD+C,QAE/C4G,EAF+C,OAG/CsqF,EAH+C,eAI/CC,EAJ+C,YAK/C0F,EAL+C,SAM/CnG,EAN+C,KAO/CkG,EAP+C,SAQ/CtF,EAR+C,KAS/ChwF,EAT+C,MAU/C2lB,EAV+C,iBAW/C6vE,EAX+C,eAY/CpF,GACI,EACJ,MAAM/xF,GAAOC,EAAAA,EAAAA,KACPwxF,GAAetxF,EAAAA,EAAAA,KAAQ,IA0E/B,SAAyByxF,EACvBqF,EAKAlF,GACA,IAAKkF,EACH,MAAO,CAAErF,cAAAA,GAEX,MAAM,gBAAEE,GAAoBmF,EACtBG,EAActF,MAAAA,GAAAA,EAAiBvD,YAChC,GAAEuD,EAAgBvD,gBAAgBuD,EAAgBrD,SAASqD,EAAgBpD,mBAC5E/tF,GACE,MAAEiuF,EAAF,KAAS/sE,GAASo1E,EACxB,MAAO,CACLrF,cAAAA,EACAC,gBAAiB,SACjBC,gBAAiBsF,EACjBv1E,KAAAA,EACA+sE,MAAAA,EACAmD,eAAAA,GA9FO8D,CAAgBsB,EAAkBF,EAAMlF,IAC9C,CAACkF,EAAMlF,EAAgBoF,IAE1B,OACE,mBAACh0E,GAAA,EAAD,CACEziB,UAAU,oCACVL,OAAQA,EACR4G,QAASA,GAET,8BACE,0BAAKvG,UAAU,SAASsC,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAChD,mBAACL,EAAA,EAAD,CACEI,UAAU,eACVD,MAAM,cACNF,OAAK,EACLC,KAAK,UACLI,QAASqG,EACTpG,UAAU,SAEV,wBAAGH,UAAU,gBAEf,iCAAMV,EAAK,kBAAX,MAEF,0BAAKU,UAAU,iCACb,mBAAC,GAAD,CACE6wF,OAAQA,EACRC,eAAgBA,EAChBE,WAAYwF,EACZ5F,eAAgB,CACdK,SAAAA,EACAhwF,KAAAA,EACA2lB,MAAAA,GAEFmqE,aAAcA,EACdV,SAAUA,Y,+FC/DtB,MAAMhqC,EAAyBjmD,EAAAA,GAA0B,IAAM,IAuG/D,GAAetC,EAAAA,EAAAA,KArGoB,IAW7B,IAX8B,UAClC6gC,GAAY,EADsB,kBAElCsnB,EAFkC,MAGlCrgC,EAHkC,KAIlCuc,EAJkC,YAKlC5f,EAAc,WALoB,YAMlC+J,EAAc,OANoB,WAOlCi5B,EAPkC,2BAQlCY,EARkC,cASlCwwC,EATkC,SAUlC5sE,GACI,EAEJ,MAAMpQ,GAAW5V,EAAAA,EAAAA,IAAyB,MACpCzE,GAAOC,EAAAA,EAAAA,MAEN2iC,EAAU00D,IAAet1F,EAAAA,EAAAA,IAAS,KAClCu1F,EAAWC,IAAgBx1F,EAAAA,EAAAA,KAAS,GAgD3C,OA9CAC,EAAAA,EAAAA,KAAU,KACHqF,EAAAA,IACHxC,YAAW,KACTuV,EAASzV,QAASyqC,UACjB0X,KAEJ,KAEH9kD,EAAAA,EAAAA,KAAU,KACJqkB,GACFnH,uBAAsB,KACpB9E,EAASzV,QAASyqC,QAClBh1B,EAASzV,QAAS6yF,cAGrB,CAACnxE,IAgCF,2BAAM2c,OAAO,GAAGxY,SAblB,SAAsBxX,GACpBA,EAAM7I,iBAEFi1B,GAIAk4D,GACF9sE,EAASmY,IAK6B80D,aAAa,OACnD,0BACEh3F,WAAWmC,EAAAA,EAAAA,GAAe,6BAA8B+/B,GAAY,UAAWtc,GAAS,SACxFtjB,IAAKhD,EAAK2hB,MAAQ,WAAQhhB,GAE1B,4BACEwF,IAAKkU,EACL3Z,UAAU,eACV+Z,KAAMksC,EAAoB,OAAS,WACnC1pD,GAAG,mBACH0T,MAAOiyB,GAAY,GACnB80D,aAAa,mBACbh9E,SA1CR,SAA0B5X,GACpBwjB,GACF2/B,IAGF,MAAM,OAAEr8C,GAAW9G,EACnBw0F,EAAY1tF,EAAO+G,OACnB6mF,EAAa5tF,EAAO+G,MAAMvS,QAAUu5F,EAAAA,IAChCN,GACFA,EAAcztF,EAAO+G,QAkCjB3N,IAAI,SAEN,gCAAQsjB,GAASuc,GAAQ5f,GACzB,0BACEviB,UAAU,kBACVE,QAnCR,WACEimD,GAA4BF,IAmCtB34B,KAAK,SACLC,SAAU,EACV3G,MAAM,8BAEN,wBAAG5mB,UAAWimD,EAAoB,WAAa,sBAGlD4wC,GACC,mBAAC,IAAD,CAAQ98E,KAAK,SAASpU,QAAM,EAACg5B,UAAWA,GACrCrS,Q,sFCxGX,MACM4qE,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAC3CC,EAAej3F,EAAAA,GAA0Bk3F,EAAAA,GAA2BC,EAAAA,GAsD1E,GAAez5F,EAAAA,EAAAA,KApDsB,IAAkC,IAAjC,kBAAEmoD,EAAF,MAAqBD,GAAY,EACrE,MAAOwxC,EAAiBC,IAAsBn2F,EAAAA,EAAAA,OACvCo2F,EAAgBC,IAAqBr2F,EAAAA,EAAAA,OACrCs2F,EAAqBC,IAA0Bv2F,EAAAA,EAAAA,KAAS,IACxDw2F,EAAaC,IAAkBz2F,EAAAA,EAAAA,KAAS,IAE/CC,EAAAA,EAAAA,KAAU,KACHi2F,EAGHpzF,YAAW,IAAM2zF,GAAe,IAhBP,MAczB1gE,EAAAA,EAAAA,GAAiB,eAAeC,KAAKmgE,KAItC,CAACD,KAEJj2F,EAAAA,EAAAA,KAAU,KACHm2F,IACHrgE,EAAAA,EAAAA,GAAiB,cAAcC,KAAKqgE,KAErC,CAACD,IAEJ,MAAMM,GAAwB34F,EAAAA,EAAAA,KAAY,IAAMw4F,GAAuB,IAAO,IAE9E,OACE,0BAAKt7F,GAAG,SAASyD,UAAWgmD,EAAQ,MAAQ,KACxC4xC,GACA,0BAAK53F,UAAU,mBAEhBw3F,GACC,mBAAC,IAAD,CACEj7F,GAAG,cACHuD,KAAMkmD,EAAQiyC,EAAAA,GAAsBZ,EACpCr3F,UAAW83F,EAAc,SAAW,QACpCngE,cAAe6/D,EACfU,YAAahB,EACbn/D,QAAM,EACNC,OAAQggE,IAGXN,GACC,mBAAC,IAAD,CACEn7F,GAAG,aACHuD,KAAMkmD,EAAQiyC,EAAAA,GAAsBZ,EACpCr3F,UAAW83F,EAAc,QAAU,SACnCngE,cAAe+/D,EACfQ,YAAajyC,EAAoBkxC,EAAsBC,EACvDr/D,QAAM,S,kHCrDhB,MAAMogE,EAAiE,CACrEp+E,KAAM,OACN8d,QAAS,EACTy1D,OAAQ,OACR8K,QAAQ,EACRt4F,KAAM,CAAE2E,MAAO,KAAM/C,OAAQ,OAI/B,IAAI22F,EACAC,EAWAC,EAwCJ,MAwDA,GAAez6F,EAAAA,EAAAA,KAxDiB,IAA2C,IAA1C,KAAEgnE,EAAF,SAAQ9qD,EAAR,QAAkBzT,GAAwB,EACzE,MAAOiyF,EAAgBC,IAAqBn3F,EAAAA,EAAAA,KAAS,IAErDC,EAAAA,EAAAA,KAAU,KACHujE,IAIA0zB,EA9CTpgD,eAA2BsgD,GACzB,IACE,MAAMC,EAAgB59F,SAASgkB,eAAe,eAC9C,IAAK45E,EACH,OAGF,MAAM,YAAE9/C,EAAF,aAAel8C,GAAiBg8F,EAEtCJ,EAAU,IAAIF,EAAQM,EAAe,CACnCC,YAAY,EACZC,SAAU,CACRp0F,MAAOo0C,EACPn3C,OAAQ/E,GAEVm8F,SAAU,CACRr0F,MAAOo0C,EAAc,GACrBn3C,OAAQ/E,EAAe,GACvBod,KAAM,YAIV,MAAMo8B,QAAgB4iD,EAAAA,EAAAA,IAAcL,SAC9BH,EAAQS,KAAK,CAAE/yF,IAAKkwC,IAC1B,MAAO8iD,GACHC,EAAAA,IAEFC,QAAQvzE,MAAMqzE,IAyBhBG,CAAYt0B,GA/DhB1sB,iBAME,OALKkgD,IACHA,EAAiB,qDACjBD,SAAiBC,GAAgB1rB,SAG5B0rB,EAoDHe,GAAgB/hE,MAAK,IAAMmhE,GAAkB,QAM9C,CAAC3zB,EAAM0zB,IAEV,MAAMl5F,GAAOC,EAAAA,EAAAA,KAab,OACE,mBAACkjB,EAAA,EAAD,CACE9iB,OAAQwH,QAAQ29D,GAChBv+D,QAASA,EACTqgB,MAAM,qBACN5mB,UAAU,YACVo7D,gBAAc,GAEbo9B,EACC,0BAAKj8F,GAAG,gBAER,mBAACinB,EAAA,EAAD,MAEF,mBAAC5jB,EAAA,EAAD,CACEI,UAAU,iBACVH,OAAK,EACLE,MAAM,UACNG,QA5BNk4C,iBACE,IAAKmgD,EACH,OAGF,MAAMz2C,QAA8By2C,EAAQz2C,OAAOq2C,GAC7CmB,EAA+B,iBAAXx3C,EAAsBA,GAASy3C,EAAAA,EAAAA,IAAWz3C,EAAQ,cAE5E9nC,EAASs/E,IAqBLn5F,UAAWb,EAAK,cAEhB,wBAAGU,UAAU,oBC5CrB,GAAelC,EAAAA,EAAAA,KAhEsB,IAK/B,IALgC,MACpC8oB,EAAQ,8BAD4B,SAEpC/M,EAFoC,qBAGpCitB,EAHoC,SAIpC9sB,GACI,EACJ,MAAOw/E,EAAcC,IAAmBn4F,EAAAA,EAAAA,OACjCo4F,EAAgBC,IAAqBr4F,EAAAA,EAAAA,IAA6BwlC,IAEzEvlC,EAAAA,EAAAA,KAAU,KACRo4F,EAAkB7yD,KACjB,CAACA,IA2BJ,MAAM8yD,GAAiBz3F,EAAAA,EAAAA,GACrBu3F,GAAkB,SAClB7/E,GAAY,YAGd,OACE,0BAAK7Z,UAAU,kBACb,4BACEA,UAAW45F,EACXtsE,KAAK,SACLC,SAAU,EACV3G,MAAOA,GAEP,4BACE7M,KAAK,OACLC,SAxCR,SAA0BzH,GACxB,MAAMrJ,EAASqJ,EAAMrJ,OAEhBA,GAAWA,EAAOwuC,OAAUxuC,EAAOwuC,MAAM,KAI9C+hD,EAAgBvwF,EAAOwuC,MAAM,IAC7BxuC,EAAO+G,MAAQ,KAiCTgkC,OAAO,0BAET,wBAAGj0C,UAAU,oBACZ05F,GAAkB,0BAAKl+F,IAAKk+F,EAAgB7qF,IAAI,YAEnD,mBAAC,EAAD,CAAWi2D,KAAM00B,EAAcjzF,QAzBnC,WACEkzF,OAAgBx5F,IAwB4C+Z,SAnC9D,SAA0Bs/E,GACxBG,OAAgBx5F,GAChB+Z,EAASs/E,GAELI,GACFG,IAAIC,gBAAgBJ,GAEtBC,EAAkBE,IAAIE,gBAAgBT,Y","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../modules/helpers';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../modules/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getDispatch();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import React, {\n  FC, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  isVisible: boolean;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  isVisible,\n  setVisibility,\n  onSeek,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking) {\n      if (timeout) window.clearTimeout(timeout);\n      return;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import { ApiDimensions } from '../../api/types';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport React, { FC, memo, useCallback, useEffect, useRef, useState } from '../../lib/teact/teact';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\nimport VideoPlayerControls from './VideoPlayerControls';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (e.target === videoRef.current) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../modules/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    onClose,\n    onFooterClick,\n    isFooterHidden,\n    isProtected,\n    setIsFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && IS_TOUCH_ENV}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return {};\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return {};\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return {};\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return {};\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useDebounce from '../../hooks/useDebounce';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD, RealTouchEvent } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\nimport useTimeout from '../../hooks/useTimeout';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_X_THRESHOLD = 40;\nconst CLICK_Y_THRESHOLD = 80;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(true);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsActive = useCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const debounceSetMessage = useDebounce(DEBOUNCE_MESSAGE, true);\n  const debounceSwipeDirection = useDebounce(DEBOUNCE_SWIPE, true);\n  const debounceActive = useDebounce(DEBOUNCE_ACTIVE, true);\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = window.innerHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < CLICK_X_THRESHOLD) return;\n    if (!isFooter && e.pageX > window.innerWidth - CLICK_X_THRESHOLD) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [isFooterHidden]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { x: 0, y: 0, scale: 1 };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (e: MouseEvent) => {\n      if (transformRef.current.scale !== 1) return false;\n      let direction = 0;\n      if (window.innerHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return false;\n      }\n      if (e.pageX < CLICK_X_THRESHOLD) {\n        direction = -1;\n      } else if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) {\n        direction = 1;\n      }\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (window.innerWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        debounceSetMessage(() => selectMessage(mId));\n        debounceActive(() => {\n          setIsActive(true);\n        });\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n      }\n      return direction !== 0;\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.MediaViewerFooter',\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS) {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= window.innerWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            setTransform({\n              x: dragOffsetX,\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onClick(e) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return undefined;\n        }\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        debounceSwipeDirection(() => {\n          swipeDirectionRef.current = undefined;\n        });\n        debounceActive(() => {\n          setIsActive(true);\n        });\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = {\n              x,\n              y,\n              scale,\n            };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          debounceSetMessage(() => selectMessage(mId));\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    setIsActive,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={previousMessageId} />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActive && isActiveRef.current}\n            setIsFooterHidden={setIsFooterHidden}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={nextMessageId}/>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(target, '.play, .fullscreen')) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: React.ReactNode;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getDispatch();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { ChildrenFn, TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps & { children: ChildrenFn }> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) return children(true, true, 1);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getDispatch();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .Spoiler, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          isZoomed={isZoomed}\n          message={message}\n          fileName={fileName}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          onZoomToggle={handleZoomToggle}\n          isAvatar={isAvatar}\n        />\n      </div>\n      <PanZoom\n        noWrap={!canPanZoomWrap}\n        canPan={isZoomed}\n        panDeltaX={panDelta.x}\n        panDeltaY={panDelta.y}\n        zoomLevel={zoomLevel}\n        onPan={handlePan}\n      >\n        <SlideTransition\n          activeKey={selectedMediaMessageIndex}\n          name={slideAnimation}\n        >\n          {(isActive: boolean) => (\n            <MediaViewerSlides\n              messageId={messageId}\n              getMessageId={getMessageId}\n              chatId={chatId}\n              isPhoto={isPhoto}\n              isGif={isGif}\n              threadId={threadId}\n              avatarOwnerId={avatarOwner && avatarOwner.id}\n              profilePhotoIndex={profilePhotoIndex}\n              origin={origin}\n              isOpen={isOpen}\n              hasFooter={hasFooter}\n              isZoomed={isZoomed}\n              isActive={isActive}\n              isVideo={isVideo}\n              animationLevel={animationLevel}\n              onClose={close}\n              selectMessage={selectMessage}\n              onFooterClick={handleFooterClick}\n            />\n          )}\n        </SlideTransition>\n      </PanZoom>\n      {!isFirst && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(previousMessageId)}\n        />\n      )}\n      {!isLast && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(nextMessageId)}\n        />\n      )}\n      <ZoomControls\n        isShown={isZoomed}\n        onChangeZoom={handleZoomValue}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../modules/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../modules/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getDispatch();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button className=\"confirm-dialog-button\" isText onClick={handleConfirm}>{lang('OK')}</Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getDispatch();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getDispatch } from '../../lib/teact/teactn';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getDispatch();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getDispatch();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getDispatch();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getDispatch();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useEffect } from '../../../lib/teact/teact';\nimport { IS_MAC_OS } from '../../../util/environment';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        e.preventDefault();\n        copySelectedMessages();\n      }\n    }\n\n    if (isActive) {\n      document.addEventListener('keydown', handleCopy, false);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copySelectedMessages, isActive]);\n};\n\nexport default useCopySelectedMessages;\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\nconst ReportMessageModal: FC<OwnProps> = ({\n  isOpen,\n  messageIds,\n  onClose,\n}) => {\n  const {\n    reportMessages,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(ReportMessageModal);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n  } = getDispatch();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../modules/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../modules/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getDispatch();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-reaction-filled\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../modules/selectors';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getDispatch();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectAnimationData = useMedia(`sticker${effectAnimationId}`, !effectAnimationId, ApiMediaFormat.Lottie);\n\n  const [localEffectAnimationData, setLocalEffectAnimationData] = useState<string | undefined>();\n  useEffect(() => {\n    if (localEffectAnimation) {\n      getAnimationData(localEffectAnimation as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalEffectAnimationData(data);\n      });\n    }\n  }, [localEffectAnimation]);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        id={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        animationData={localEffectAnimationData || effectAnimationData}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(ANIMATED_STICKERS_PATHS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, loadContactList, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getDispatch();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getDispatch();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getDispatch();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos } = getDispatch();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getDispatch();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayVideos: isChecked })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onScreenSelect,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getDispatch();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getDispatch();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(\n    isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats,\n  );\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n}) => {\n  const {\n    setSettingOption,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getDispatch();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getDispatch();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getDispatch();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n              runDebounced(() => playNotifySound(undefined, volume));\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getDispatch();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getDispatch();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getDispatch();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n}) => {\n  const {\n    loadAuthorizations,\n    terminateAuthorization,\n    terminateAllAuthorizations,\n  } = getDispatch();\n\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../modules/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadContactList,\n    setUserSearchQuery,\n    blockContact,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getDispatch();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getDispatch();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isChatGroup, isUserId } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helper/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getDispatch();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        return chat && ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat));\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  onScreenSelect,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getDispatch();\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || screen === SettingsScreens.QuickReaction\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    loadContactList,\n    openChat,\n  } = getDispatch();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    loadContactList,\n    setGlobalSearchQuery,\n  } = getDispatch();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getDispatch();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({ reaction, previewIndex, onSendReaction, isReady }) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady, ApiMediaFormat.Lottie);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          id={`select_${reaction.reaction}`}\n          className={cn('animated', [animatedClassNames])}\n          animationData={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../modules/helpers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onDownload?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined, onCopyMessages);\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"reactions\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'reactions' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            {canShowReactionsCount && message.reactors?.count ? (\n              canShowSeenBy && message.seenByUserIds?.length\n                ? lang('Chat.OutgoingContextMixedReactionCount', [message.reactors.count, message.seenByUserIds.length])\n                : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n            ) : (\n              message.seenByUserIds?.length === 1 && seenByRecentUsers\n                ? getUserFullName(seenByRecentUsers[0])\n                : (message.seenByUserIds?.length\n                  ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                  : lang('Conversation.ContextMenuNoViews')\n                )\n            )}\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../modules/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal,\n} from '../../../modules/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport buildClassName from '../../../util/buildClassName';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n  } = getDispatch();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onDownload={handleDownloadClick}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount < seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: !isProtected && canCopy,\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    addContact,\n    openCallFallbackConfirm,\n  } = getDispatch();\n\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    addContact({ userId: chatId });\n    closeMenu();\n  }, [addContact, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleCall = useCallback(() => {\n    openCallFallbackConfirm();\n    closeMenu();\n  }, [closeMenu, openCallFallbackConfirm]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSilentSend: () => void;\n  openCalendar: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSilentSend,\n  openCalendar,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSilentSend={!isChatWithSelf ? onSilentSend : undefined}\n              onScheduleSend={openCalendar}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, canAttachMedia, canAttachPolls, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  stickers,\n}) => {\n  const { clearStickersForEmoji } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, isOpenToBottom = false, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getDispatch();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getDispatch();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getDispatch();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getDispatch();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport {\n  ApiChat, ApiChatBannedRights, ApiExportedInvite, ApiMediaFormat,\n} from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getDispatch();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = () => {\n    onScreenSelect(ManagementScreens.Invites);\n  };\n\n  const handleClickRequests = () => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  };\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getDispatch();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiExportedInvite, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getDispatch();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = () => {\n    onScreenSelect(ManagementScreens.Invites);\n  };\n\n  const handleClickRequests = () => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  };\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getDispatch();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getDispatch();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, loadContactList } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadContactList, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      openChat({ id });\n    }\n  }, [noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack(isActive, onClose);\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../modules/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../modules/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('Invite').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"inviteDuck\"\n                size={STICKER_SIZE_INVITES}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          <p className='text-muted'>{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getDispatch();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack(isActive, onClose);\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getDispatch();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack(isActive, onClose);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getDispatch();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack(isActive, onClose);\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { selectUser } from '../../../modules/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getDispatch();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../modules/selectors';\nimport { isChatChannel, isUserId } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport getAnimationData from '../../common/helpers/animatedAssets';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getDispatch();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('JoinRequest').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"section\">\n        <div className=\"section-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"joinRequestDucks\"\n              size={STICKER_SIZE_JOIN_REQUESTS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n        {Boolean(chat?.joinRequests?.length) && (\n          <div className=\"bulk-actions\">\n            <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n            <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n          </div>\n        )}\n      </div>\n      <div className=\"section\">\n        <div className=\"custom-scroll\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName('provider', paymentProvider.toLowerCase()),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('PaymentCardName')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getDispatch();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<string>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<string>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getDispatch","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","size","color","className","undefined","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","isVisible","setVisibility","onSeek","seekerRef","useRef","isSeekingRef","isSeeking","current","timeout","setTimeout","clearTimeout","body","remove","handleSeek","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","toggleControls","areControlsVisible","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseMove","handleMouseOut","target","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","isFooterHidden","setIsFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","forceUpdate","useForceUpdate","setTransform","value","setIsActive","debounceSetMessage","useDebounce","debounceSwipeDirection","debounceActive","handleToggleFooterVisibility","isFooter","innerHeight","pageY","pageX","innerWidth","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","timingFunctions","onUpdate","isNotPassive","excludedClosestSelector","checkIfControlTarget","arePropsShallowEqual","event","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","minOffsetY","top","maxOffsetY","bottom","dirX","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","checkIfInsideSelector","selector","matches","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","onMouseUp","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","disabled","step","type","onChange","Number","mediaViewer","settings","byKey","chatMessages","collectionIds","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","useHistoryBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","map","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","setFilter","markIsShown","unmarkIsShown","useFlag","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","handleCopy","IS_MAC_OS","metaKey","ctrlKey","getKeyFromEvent","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","seenByModal","memberIds","seenByUserIds","openChat","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleClose","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","getUserFullName","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","ANIMATED_STICKERS_PATHS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","timeoutRef","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectAnimationData","localEffectAnimationData","setLocalEffectAnimationData","getAnimationData","then","data","startSize","isReversed","AnimatedSticker","animationData","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","Checkbox","checked","onCheck","isChecked","RangeSlider","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","focus","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","stickerSets","installedDate","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","handleChange","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","serverTimeOffset","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onShowSeenBy","onShowReactors","onCopyMessages","menuRef","scrollableRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","noReactions","withReactions","markIsReady","unmarkIsReady","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","positionY","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","Menu","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","addContact","openCallFallbackConfirm","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleCall","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSilentSend","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","isOpenToBottom","onScheduleSend","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","canAttachMedia","canAttachPolls","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","useInterval","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","formatFullDate","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","allow","sandbox","SUPPORTED_PROVIDERS","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","payment","isProviderError","has","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","canRenderFooter","PaymentStep","field","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","cropperResultOptions","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}