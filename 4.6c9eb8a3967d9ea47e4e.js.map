{"version":3,"sources":["webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/hooks/useBeforeUnload.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/hooks/useBrowserOnline.ts","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/helpers/preventMessageInputBlur.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Dialogs.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/HistoryCalendar.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["window","addEventListener","e","state","chatId","id","threadId","messageListType","type","getDispatch","openChat","noPushState","addReducer","global","actions","payload","currentMessageList","selectCurrentMessageList","exitMessageSelectMode","messages","contentToBeScheduled","undefined","forwardMessages","toChatId","setGlobal","history","pushState","updateCurrentMessageList","isChatInfoShown","chatCreation","blurTimeout","scrollOffset","replaceThreadParam","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","targetIndexDelta","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","indexOf","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","setTimeout","newGlobal","getGlobal","noHighlight","groupedId","groupedChatId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","query","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","pop","content","updateGlobalSearchContent","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","replaceSettings","theme","settings","replaceThemeSettings","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","selectEmojiKeywords","isLoading","emojiKeywords","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","lastReadInboxMessageId","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","alert","isError","showDialog","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","shouldShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","isSensitiveEnabled","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","error","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","firstUnreadId","selectFirstUnreadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","animationLevel","byKey","globalSearchChatId","searchDate","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","setActiveChatFolder","transitionRef","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","handleKeyDown","metaKey","startsWith","digit","preventDefault","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isOnline","setIsOnline","navigator","onLine","useBrowserOnline","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","NewChat","ContentType","ArchivedChats","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","isSelectModeActive","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","preventMessageInputBlur","activeElement","target","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","MessageScroll","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","onNotchToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","scrollHeight","scrollBottom","isAtBottom","observe","observeIntersection","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","resetScroll","useOnIntersect","observeIntersectionForFab","freeze","freezeForFab","unfreeze","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","position","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","isLastInList","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","getCustomAppendixBg","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","shouldRenderInlineVideo","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","IS_ANDROID","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","openHistoryCalendar","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusLastMessage","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","loadEmojiKeywords","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_IOS","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","footerClassName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","shouldSkipTransition","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","chatUsername","handleNotificationChange","copy","entity","formattedNumber","getChatLink","printedUsername","getChatDescription","ListItem","multiline","narrow","isStatic","TABS","buildInfiniteScrollItemSelector","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","teactOrderKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","RightSearch","Management","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closeLocalTextSearch","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","GroupType","handleSelectChatMember","memberId","isPromoted","onChatMemberSelect","prevContentKey","MediaViewer","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","middleColumnTransitionClassNames","rightColumnTransitionClassNames","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","stopEvent","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.6c9eb8a3967d9ea47e4e.js","sourcesContent":["import { addReducer, getDispatch, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode,\n  updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\nwindow.addEventListener('popstate', (e) => {\n  if (!e.state) {\n    return;\n  }\n\n  const { chatId: id, threadId, messageListType: type } = e.state;\n\n  getDispatch().openChat({\n    id, threadId, type, noPushState: true,\n  });\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', noPushState,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = exitMessageSelectMode(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n\n    if (!noPushState) {\n      window.history.pushState({ chatId: id, threadId, messageListType: type }, '');\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId, selectIsViewportNewest, selectReplyingToId,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nconst FOCUS_DURATION = 2000;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n});\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings, IThemeSettings, ThemeKey } from '../../../types';\nimport { replaceSettings, replaceThemeSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n\naddReducer('setThemeSettings', (global, actions, payload: { theme: ThemeKey } & Partial<IThemeSettings>) => {\n  const { theme, ...settings } = payload;\n\n  return replaceThemeSettings(global, theme, settings);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { ApiError } from '../../../api/types';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : {chatId: number; userId: number} = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : {chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectEmojiKeywords, selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n  let currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = selectEmojiKeywords(global, language);\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin && currentMessageListInfoOrigin.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo && currentMessageListInfo.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    serverTimeOffset,\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || Date.now() / 1000 + serverTimeOffset - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now() / 1000 + global.serverTimeOffset,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationExceptions', () => {\n  callApi('fetchNotificationExceptions');\n});\n\naddReducer('loadNotificationSettings', (global) => {\n  const { serverTimeOffset } = global;\n  (async () => {\n    const result = await callApi('fetchNotificationSettings', {\n      serverTimeOffset,\n    });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, shouldShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, shouldShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, shouldShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n\naddReducer('updateIsOnline', (global, actions, payload) => {\n  callApi('updateIsOnline', payload);\n});\n\naddReducer('loadContentSettings', () => {\n  (async () => {\n    const result = await callApi('fetchContentSettings');\n    if (!result) return;\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateContentSettings', (global, actions, payload) => {\n  (async () => {\n    setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: payload }));\n\n    const result = await callApi('updateContentSettings', payload);\n    if (!result) {\n      setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: !payload }));\n    }\n  })();\n});\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showDialog({ data: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const ids = Object.keys(global.messages.byChatId[chatId].byId).map(Number);\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first uread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        id, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[id];\n\n      if (chat) {\n        global = updateChat(global, id, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, id, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName('animated-menu-icon', !hasMenu && 'state-back')} />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.metaKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return <ChatList folderType=\"all\" isActive={isActive} />;\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        noChatsText={lang('FilterNoChatsToDisplay')}\n        isActive={isActive}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name=\"zoom-fade\"\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (\n      content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId, resetChatCreation,\n    settingsScreen,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, setGlobalSearchQuery, searchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                currentScreen={settingsScreen}\n                onScreenSelect={setSettingsScreen}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n    } = global;\n    return { searchQuery: query, searchDate: date, activeChatFolder };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [\n    openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode,\n    shouldShowCloseButton,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition name=\"slide-fade\" activeKey={messageListType === 'thread' ? threadId : 1}>\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import React from '../../../lib/teact/teact';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nexport function preventMessageInputBlur(e: React.MouseEvent<HTMLElement>) {\n  if (\n    IS_SINGLE_COLUMN_LAYOUT\n    || !document.activeElement\n    || document.activeElement.id !== EDITABLE_INPUT_ID\n    || e.target !== e.currentTarget\n  ) {\n    return;\n  }\n\n  e.preventDefault();\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, { FC, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  onNotchToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1500;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = video.duration || (videoRef.current && videoRef.current.duration) || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderPlayButton = (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(!isInline || shouldRenderThumb || shouldRenderInlineVideo)\n        && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${width}px; height: ${height}px;`}\n          />\n        )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {button.text}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport {\n  FocusDirection, IAlbum, ISettings, MediaViewerOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  noAvatars?: boolean;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 150;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = Boolean(canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({ chatId, threadId, messageId: message.replyToMessageId });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const target = e.target as HTMLDivElement;\n    if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n      return;\n    }\n\n    if (IS_ANDROID) {\n      setTimeout(() => {\n        handleContextMenu(e);\n      }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n    } else {\n      handleContextMenu(e);\n    }\n  }, [handleContextMenu]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isMessageLocal(message)}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={`text-content ${shouldInlineMeta ? 'with-meta' : ''}`} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : IS_ANDROID ? handleClick : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleMouseDown : undefined}\n      onContextMenu={!isInSelectMode ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset' | 'openHistoryCalendar'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            noAvatars,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n            openHistoryCalendar,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  noAvatars: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId: number | undefined,\n  threadFirstMessageId: number | undefined,\n  hasLinkedChat: boolean | undefined,\n  isSchedule: boolean,\n  noAppearanceAnimation: boolean,\n  openHistoryCalendar: Function,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusLastMessage'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusLastMessage,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusLastMessage();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusLastMessage]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusLastMessage']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { LangCode } from '../../../types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n  selectEmojiKeywords,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  language: LangCode;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'loadEmojiKeywords'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  language,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  loadEmojiKeywords,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const lang = useLang();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID) {\n      loadScheduledHistory();\n    }\n  }, [chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      // If selection is outside of input, set cursor at the end of input\n      requestAnimationFrame(() => {\n        focusEditableElement(messageInput);\n      });\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showDialog({\n        data: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n      return;\n    }\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000) + serverTimeOffset;\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000) + serverTimeOffset;\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, serverTimeOffset, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        language={language}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        loadEmojiKeywords={loadEmojiKeywords}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              <Spinner color=\"gray\" />\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            loadEmojiKeywords={loadEmojiKeywords}\n            language={language}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = selectEmojiKeywords(global, 'en');\n    const emojiKeywords = language !== 'en' ? selectEmojiKeywords(global, language) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      language,\n      baseEmojiKeywords: baseEmojiKeywords ? baseEmojiKeywords.keywords : undefined,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'loadEmojiKeywords',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'unpinAllMessages' | 'loadUser'>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n            />\n            <Transition\n              name={animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_SINGLE_COLUMN_LAYOUT),\n      isPinnedMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    shouldSkipTransition && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n  serverTimeOffset,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user, serverTimeOffset)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime, serverTimeOffset } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel, serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned, selectIsChatMuted,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  isMuted,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const {\n    id: chatId,\n    username: chatUsername,\n  } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n  }, [chatId, isMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n  const printedUsername = username || chatUsername;\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {printedUsername && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${printedUsername}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(printedUsername)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {canInviteUsers && !printedUsername && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">\n            <SafeLink url={url} className=\"title\" text={link} />\n          </div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!isMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers, isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ISettings,\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback(() => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo();\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n          />\n        );\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch />;\n      case RightColumnContent.PollResults:\n        return <PollResults />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n        />\n        <Transition\n          name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline'\n)>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n  );\n\n  useEffect(() => {\n    // For animating Symbol Menu on mobile\n    document.body.classList.toggle('is-middle-column-open', className.includes('middle-column-open'));\n  }, [className]);\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}