{"version":3,"sources":["webpack:///./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack:///./src/components/mediaViewer/SenderInfo.tsx","webpack:///./src/components/mediaViewer/MediaViewerActions.tsx","webpack:///./src/components/mediaViewer/MediaViewerFooter.tsx","webpack:///./src/hooks/useFullscreen.ts","webpack:///./src/components/mediaViewer/helpers/formatFileSize.ts","webpack:///./src/components/mediaViewer/VideoPlayerControls.tsx","webpack:///./src/components/mediaViewer/VideoPlayer.tsx","webpack:///./src/components/mediaViewer/ZoomControls.tsx","webpack:///./src/components/mediaViewer/PanZoom.tsx","webpack:///./src/components/mediaViewer/MediaViewer.tsx","webpack:///./src/components/main/ForwardPicker.tsx","webpack:///./src/components/main/Dialogs.tsx","webpack:///./src/components/main/Notifications.tsx","webpack:///./src/components/main/SafeLinkModal.tsx","webpack:///./src/components/common/CalendarModal.tsx","webpack:///./src/components/main/HistoryCalendar.tsx","webpack:///./src/components/common/DeleteMessageModal.tsx","webpack:///./src/components/common/PinMessageModal.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.tsx","webpack:///./src/components/middle/DeleteSelectedMessageModal.tsx","webpack:///./src/components/common/ReportMessageModal.tsx","webpack:///./src/components/middle/MessageSelectToolbar.tsx","webpack:///./src/hooks/useSelectWithEnter.ts","webpack:///./src/components/left/search/LeftSearchResultChat.tsx","webpack:///./src/components/left/search/RecentContacts.tsx","webpack:///./src/components/left/search/ChatMessage.tsx","webpack:///./src/components/left/search/DateSuggest.tsx","webpack:///./src/components/left/search/ChatResults.tsx","webpack:///./src/components/left/search/ChatMessageResults.tsx","webpack:///./src/components/left/search/helpers/createMapStateToProps.ts","webpack:///./src/components/left/search/MediaResults.tsx","webpack:///./src/components/left/search/helpers/getSenderName.ts","webpack:///./src/components/left/search/LinkResults.tsx","webpack:///./src/components/left/search/FileResults.tsx","webpack:///./src/components/left/search/AudioResults.tsx","webpack:///./src/components/left/search/LeftSearch.tsx","webpack:///./src/hooks/useReducer.ts","webpack:///./src/hooks/reducers/useFoldersReducer.ts","webpack:///./src/hooks/reducers/useTwoFaReducer.ts","webpack:///./src/components/left/settings/SettingsHeader.tsx","webpack:///./src/components/left/settings/SettingsMain.tsx","webpack:///./src/components/common/UsernameInput.tsx","webpack:///./src/components/left/settings/SettingsEditProfile.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack:///./src/components/ui/ShowMoreButton.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack:///./src/components/left/settings/folders/SettingsFolders.tsx","webpack:///./src/components/ui/RangeSlider.tsx","webpack:///./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack:///./src/components/middle/composer/StickerSetCover.tsx","webpack:///./src/components/common/StickerButton.tsx","webpack:///./src/components/left/settings/SettingsStickerSet.tsx","webpack:///./src/components/left/settings/SettingsGeneral.tsx","webpack:///./src/util/systemFilesDialog.ts","webpack:///./src/util/colors.ts","webpack:///./src/components/left/settings/WallpaperTile.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackground.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack:///./src/components/left/settings/SettingsNotifications.tsx","webpack:///./src/components/left/settings/SettingsPrivacy.tsx","webpack:///./src/components/left/settings/SettingsLanguage.tsx","webpack:///./src/components/left/settings/helper/privacy.ts","webpack:///./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack:///./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack:///./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack:///./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack:///./src/components/left/settings/Settings.tsx","webpack:///./src/components/left/main/ContactList.tsx","webpack:///./src/components/left/newChat/NewChatStep1.tsx","webpack:///./src/components/left/newChat/NewChatStep2.tsx","webpack:///./src/components/left/newChat/NewChat.tsx","webpack:///./src/components/left/ArchivedChats.tsx","webpack:///./src/util/scrollLock.ts","webpack:///./src/components/middle/message/helpers/copyOptions.ts","webpack:///./src/components/middle/message/MessageContextMenu.tsx","webpack:///./src/components/middle/message/ContextMenuContainer.tsx","webpack:///./src/components/common/StickerSetModal.tsx","webpack:///./src/components/middle/HeaderMenuContainer.tsx","webpack:///./src/components/middle/MobileSearch.tsx","webpack:///./src/util/findInViewport.ts","webpack:///./src/util/isFullyVisible.ts","webpack:///./src/util/setTooltipItemVisible.ts","webpack:///./src/components/middle/composer/MentionTooltip.tsx","webpack:///./src/components/middle/composer/AttachmentModal.tsx","webpack:///./src/components/middle/composer/PollModal.tsx","webpack:///./src/hooks/useMouseInside.ts","webpack:///./src/components/middle/composer/EmojiButton.tsx","webpack:///./src/components/middle/composer/EmojiCategory.tsx","webpack:///./src/components/middle/composer/EmojiPicker.tsx","webpack:///./src/components/middle/composer/StickerSet.tsx","webpack:///./src/components/middle/composer/StickerPicker.tsx","webpack:///./src/components/common/GifButton.tsx","webpack:///./src/components/middle/composer/GifPicker.tsx","webpack:///./src/components/middle/composer/SymbolMenuFooter.tsx","webpack:///./src/components/middle/composer/SymbolMenu.tsx","webpack:///./src/components/middle/composer/AttachMenu.tsx","webpack:///./src/components/middle/composer/StickerTooltip.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.tsx","webpack:///./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack:///./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack:///./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack:///./src/components/middle/composer/inlineResults/GifResult.tsx","webpack:///./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack:///./src/components/middle/composer/InlineBotTooltip.tsx","webpack:///./src/components/right/RightSearch.tsx","webpack:///./src/components/right/StickerSetResult.tsx","webpack:///./src/components/right/StickerSearch.tsx","webpack:///./src/components/right/GifSearch.tsx","webpack:///./src/components/right/PollAnswerResults.tsx","webpack:///./src/components/right/PollResults.tsx","webpack:///./src/components/right/management/ManageUser.tsx","webpack:///./src/components/right/management/ManageGroup.tsx","webpack:///./src/components/right/management/ManageGroupPermissions.tsx","webpack:///./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack:///./src/components/right/management/ManageChannel.tsx","webpack:///./src/components/right/management/ManageChatPrivacyType.tsx","webpack:///./src/components/right/management/ManageDiscussion.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissions.tsx","webpack:///./src/components/right/management/ManageChatAdministrators.tsx","webpack:///./src/components/right/management/ManageGroupRecentActions.tsx","webpack:///./src/components/right/management/ManageGroupAdminRights.tsx","webpack:///./src/components/right/management/ManageGroupMembers.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack:///./src/components/right/management/Management.tsx","webpack:///./src/components/middle/helpers/getCurrencySign.ts","webpack:///./src/components/common/helpers/detectCardType.ts","webpack:///./src/hooks/reducers/usePaymentReducer.ts","webpack:///./src/hooks/useFocusAfterAnimation.tsx","webpack:///./src/components/ui/Select.tsx","webpack:///./src/components/payment/ShippingInfo.tsx","webpack:///./src/components/payment/Shipping.tsx","webpack:///./src/components/payment/Checkout.tsx","webpack:///./src/components/payment/ExpiryInput.tsx","webpack:///./src/components/middle/helpers/inputFormatters.ts","webpack:///./src/assets/mastercard.svg","webpack:///./src/assets/visa.svg","webpack:///./src/components/payment/CardInput.tsx","webpack:///./src/components/payment/PaymentInfo.tsx","webpack:///./src/components/payment/PaymentModal.tsx","webpack:///./src/components/payment/ReceiptModal.tsx","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["animateOpening","hasFooter","origin","bestImageData","dimensions","isVideo","message","mediaEl","fromImage","getNodes","width","windowWidth","windowSize","get","availableWidth","height","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","mql","window","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","matches","REM","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","getBoundingClientRect","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","SearchResult","includes","uncovered","realWidth","realHeight","size","Math","max","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","transform","applyShape","document","body","classList","add","requestAnimationFrame","appendChild","style","firstChild","objectFit","remove","clearShape","setTimeout","contains","removeChild","ANIMATION_END_DELAY","animateClosing","container","toImage","getElementById","querySelector","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","isMessageImageFullyVisible","existingGhost","getElementsByClassName","ProfileAvatar","transition","transformOrigin","opacity","source","shouldAppendProfileInfo","createElement","img","Image","src","HTMLVideoElement","poster","profileInfo","cloneNode","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","parentElement","scrollTop","offsetHeight","element","styles","Object","assign","containerSelector","mediaSelector","MiddleHeaderAvatar","mediaEls","querySelectorAll","length","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","chat","user","dir","renderText","formatMediaDateTime","date","MediaViewerActions","mediaData","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","href","download","ProgressSpinner","progress","noCross","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","clientHeight","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getBrowserFullscreenElementProp","units","bytes","number","floor","log","toFixed","stopEvent","VideoPlayerControls","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","clearTimeout","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","1","1.5","2","2.5","3","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","blobUrlPreview","startsWith","DataUri","fullMediaData","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","textParts","renderMessageText","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","disableRefresh","enableRefresh","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","Right","Left","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","aria-label","chats","byId","chatsById","listIds","orderedPinnedIds","currentUserId","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","getTime","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","formatMonthAndYear","d","dateCopy","letter","role","tabIndex","handleDateSelect","inputMode","formatHumanDate","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","contextActions","useChatContextActions","handleDelete","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","formatDateToString","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","Backwards","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","WebLink","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","onPlay","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","useReducer","reducer","initialState","reducerRef","state","setState","action","currentState","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","folder","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","values","bots","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","payload","isTouched","omit","folderId","currentPassword","password","hint","email","twoFaReducer","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","EditProfile","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","Folders","FoldersCreateFolder","FoldersEditFolder","FoldersIncludedChats","FoldersExcludedChats","renderHeaderContent","confirmIsDestructive","currentUser","onScreenSelect","Main","formatPhoneNumberWithCode","phoneNumber","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","ShowMoreButton","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","find","typeKey","inactive","renderChatType","event","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","Lottie","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","sticker","noAnimate","onUnfaveClick","localMediaHash","stickerSelector","thumbnail","dataUri","previewBlobUrl","shouldPlay","isAnimated","markLoaded","unmarkLoaded","canAnimatedPlay","shouldRenderThumb","shouldRenderPreview","previewTransitionClassNames","fullClassName","emoji","data-sticker-id","isLowPriority","stickers","firstSticker","STICKER_SIZE_GENERAL_SETTINGS","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","handleStickerSetClick","stickerSets","installedDate","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","setAttribute","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","thumbRef","useCanvasBlur","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","data-color","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","renderSession","handler","dateActive","appName","ip","sessions","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","code","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","itemIds","filterPlaceholder","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","shouldSkipTransition","foldersState","foldersDispatch","twoFaState","twoFaDispatch","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","contactIds","serverTimeOffset","resultIds","sortUserIds","forceShowSelf","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","isStepActive","NewChannelStep1","NewGroupStep1","Archived","folderType","noChatsText","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","ArrowLeft","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadMessageLink","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","reportMessageIds","scheduledMaxDate","getDayStartAt","selectStickerSet","stickerSetId","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","isFullyVisible","setTooltipItemVisible","selector","first","position","fastSmoothScroll","onInsertUserName","filteredUsers","getSelectedIndex","newIndex","cycleRestrict","selectedMentionIndex","setSelectedMentionIndex","handleArrowKey","handleUserSelect","forceFocus","handleSelectMention","member","onUp","onDown","onTab","prevChatMembers","renderedChatMembers","attachments","caption","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","onCaptionUpdate","addRecentEmoji","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_FOR_QUICK_UPLOAD","has","areAllPhotos","mimeType","areAllVideos","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","data-attach-description","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","closeTimeout","useMouseInside","menuCloseTimeout","isMouseInside","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","buttonClassName","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","clickInlineButton","keyboardButtons","row","button","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","selectedIndex","setSelectedIndex","setItemVisible","emojisCount","handleSelectEmoji","onLeft","onRight","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","botId","isGallery","inlineBotResults","switchPm","loadMore","sendBotCommand","onSelectResult","handleSelectInlineBotResult","handleSendPm","command","startParam","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","renderLinkGroupHeader","linkedGroup","renderLinkGroupConfirmText","hasPrivateLink","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","ChatAdminRights","getMemberStatus","promotedByUser","GroupRecentActions","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","CURRENCIES","USD","EUR","GBP","JPY","RUB","UAH","INR","AED","getCurrencySign","currency","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","amount","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","item","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","globalDialogs","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","currencySign","field","fieldError","errors","getShippingErrors","handleErrorModalClose","PaymentStep","Checkout","shippingOption","getShippingPrices","totalPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","ShippingInfo","Shipping","PaymentInfo","buttonText","cuurentStep","renderModalContent","renderError","optionId","receipt","mapedPrices","info","totalAmount","credentialsTitle","fullAddress","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"3.625cec8d1b47c57f32e3.js","sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin === MediaViewerOrigin.ProfileAvatar);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, shouldAppendProfileInfo = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (shouldAppendProfileInfo) {\n    ghost.classList.add('ProfileInfo');\n    const profileInfo = document.querySelector('#RightColumn .ProfileInfo .info');\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(\n    message && isVideo ? getMessageMediaHash(message, 'download') : undefined,\n    fileName,\n  );\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\nimport { ApiDimensions } from '../../api/types';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    isAvatar && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      setForwardChatId({ id: viewportIds[index === -1 ? 0 : index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport {\n  formatMonthAndYear, formatHumanDate, formatTime,\n} from '../../util/dateFormat';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {formatMonthAndYear(lang, selectedDate, IS_SINGLE_COLUMN_LAYOUT)}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((letter) => (\n            <div className=\"day-button faded weekday\">\n              <span>{letter}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay();\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatHumanDate(lang, date, true);\n\n  if (day === 'Today') {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', day).replace('%@', formatTime(date));\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n    exitMessageSelectMode();\n    onClose();\n  }, [deleteMessages, exitMessageSelectMode, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    exitMessageSelectMode();\n    onClose();\n  }, [\n    isSchedule, exitMessageSelectMode, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages,\n  ]);\n\n  const lang = useLang();\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: {value: ApiReportReason; label: string}[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            {canReportMessages && (\n              <MenuItem\n                icon=\"flag\"\n                onClick={openReportModal}\n                disabled={!canReportMessages}\n                ariaLabel={lang('Conversation.ReportMessages')}\n              >\n                <span className=\"item-text\">\n                  {lang('Report')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n  });\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            target=\"searchResult\"\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import { useState, useCallback, useRef } from '../lib/teact/teact';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<Actions> = (action: ReducerAction<Actions>) => void;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const reducerRef = useRef(reducer);\n  const [state, setState] = useState<State>(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    setState((currentState) => reducerRef.current(currentState, action));\n  }, []);\n\n  return [\n    state,\n    dispatch,\n  ] as [State, Dispatch<Actions>];\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { ApiChatFolder } from '../../api/types';\nimport { pick, omit } from '../../util/iteratees';\n\nexport type FolderChatType = {\n  icon: string;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nexport const INCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'user', title: 'FilterContacts', key: 'contacts' },\n  { icon: 'non-contacts', title: 'FilterNonContacts', key: 'nonContacts' },\n  { icon: 'group', title: 'FilterGroups', key: 'groups' },\n  { icon: 'channel', title: 'FilterChannels', key: 'channels' },\n  { icon: 'bots', title: 'FilterBots', key: 'bots' },\n];\n\nexport const EXCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'mute', title: 'FilterMuted', key: 'excludeMuted' },\n  { icon: 'archive', title: 'FilterArchived', key: 'excludeArchived' },\n  { icon: 'readchats', title: 'FilterRead', key: 'excludeRead' },\n];\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: number[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  return {\n    selectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds && includedChatIds.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters'\n);\nexport type FolderEditDispatch = Dispatch<FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: '',\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : getSuggestedFolderName(state.includeFilters),\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, description, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        error: action.payload,\n      };\n    }\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, useCallback, useMemo, memo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  Delete Folder\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <div className=\"settings-main-header\">\n            {currentScreen === SettingsScreens.FoldersIncludedChats ? (\n              <h3>{lang('FilterInclude')}</h3>\n            ) : (\n              <h3>{lang('FilterExclude')}</h3>\n            )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text=\"Are you sure you want to log out?\"\n        confirmLabel=\"Log Out\"\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text=\"Are you sure you want to delete this folder?\"\n        confirmLabel=\"Delete\"\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n}) => {\n  const lang = useLang();\n  const fullName = getUserFullName(currentUser);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <div className=\"settings-current-user\">\n            <Avatar user={currentUser} size=\"jumbo\" />\n            <p className=\"name\">{fullName && renderText(fullName)}</p>\n            <p className=\"phone\">{formatPhoneNumberWithCode(currentUser.phoneNumber)}</p>\n          </div>\n        )}\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n        >\n          {lang('lng_settings_information')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'Please select at least one chat for this folder.';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {state.error}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersIncludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersExcludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiSticker } from '../../api/types';\n\nimport { useIsIntersecting, ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from './AnimatedSticker';\nimport Button from '../ui/Button';\n\nimport './StickerButton.scss';\n\ntype OwnProps = {\n  sticker: ApiSticker;\n  size: number;\n  observeIntersection: ObserveFn;\n  noAnimate?: boolean;\n  title?: string;\n  className?: string;\n  onClick?: (arg: any) => void;\n  clickArg?: any;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n};\n\nconst StickerButton: FC<OwnProps> = ({\n  sticker, size, observeIntersection, noAnimate, title, className, onClick, clickArg, onUnfaveClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const localMediaHash = `sticker${sticker.id}`;\n  const stickerSelector = `sticker-button-${sticker.id}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const thumbDataUri = sticker.thumbnail ? sticker.thumbnail.dataUri : undefined;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !isIntersecting, ApiMediaFormat.BlobUrl);\n\n  const shouldPlay = isIntersecting && !noAnimate;\n  const lottieData = useMedia(sticker.isAnimated && localMediaHash, !shouldPlay, ApiMediaFormat.Lottie);\n  const [isAnimationLoaded, markLoaded, unmarkLoaded] = useFlag(Boolean(lottieData));\n  const canAnimatedPlay = isAnimationLoaded && shouldPlay;\n\n  const {\n    shouldRenderThumb,\n    shouldRenderFullMedia: shouldRenderPreview,\n    transitionClassNames: previewTransitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || canAnimatedPlay, 'slow');\n\n  // To avoid flickering\n  useEffect(() => {\n    if (!shouldPlay) {\n      unmarkLoaded();\n    }\n  }, [unmarkLoaded, shouldPlay]);\n\n  function handleClick() {\n    if (onClick) {\n      onClick(clickArg);\n    }\n  }\n\n  function handleUnfaveClick(e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onUnfaveClick!(sticker);\n  }\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    sticker.isAnimated && 'animated',\n    stickerSelector,\n    className,\n  );\n\n  const style = shouldRenderThumb && thumbDataUri ? `background-image: url('${thumbDataUri}');` : '';\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker && sticker.emoji)}\n      // @ts-ignore\n      style={style}\n      data-sticker-id={sticker.id}\n      onClick={handleClick}\n    >\n      {shouldRenderPreview && !canAnimatedPlay && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={previewBlobUrl} className={previewTransitionClassNames} />\n      )}\n      {shouldPlay && lottieData && (\n        <AnimatedSticker\n          id={localMediaHash}\n          animationData={lottieData}\n          play\n          size={size}\n          isLowPriority\n          onLoad={markLoaded}\n        />\n      )}\n      {onUnfaveClick && (\n        <Button\n          className=\"sticker-unfave-button\"\n          color=\"dark\"\n          round\n          onClick={handleUnfaveClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    true,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' | 'updateNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    setLanguage(langCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>Other Sessions</h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('EnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useFoldersReducer from '../../../hooks/reducers/useFoldersReducer';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersExcludedChats,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" noChatsText=\"Archive is empty.\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'loadMessageLink'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  loadMessageLink,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    loadMessageLink({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    closeMenu();\n  }, [closeMenu, loadMessageLink, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'loadMessageLink',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker: ApiSticker;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      const { stickerSetId, stickerSetAccessHash } = fromSticker;\n      loadStickers({ stickerSetId, stickerSetAccessHash });\n    }\n  }, [isOpen, fromSticker, loadStickers]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId: fromSticker.stickerSetId });\n    onClose();\n  }, [fromSticker.stickerSetId, onClose, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker }: OwnProps) => {\n    return { stickerSet: selectStickerSet(global, fromSticker.stickerSetId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMutedState' | 'enterMessageSelectMode'>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'Delete'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import React, {\n  FC, useCallback, useEffect, useState, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filter: string;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filter,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!filteredUsers) {\n      return -1;\n    }\n    const membersCount = filteredUsers!.length;\n    return cycleRestrict(membersCount, newIndex);\n  }, [filteredUsers]);\n\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(-1);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedMentionIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedMentionIndex, getSelectedIndex]);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((e: KeyboardEvent) => {\n    if (filteredUsers && filteredUsers.length && selectedMentionIndex > -1) {\n      const member = filteredUsers[selectedMentionIndex];\n      if (member) {\n        e.preventDefault();\n        handleUserSelect(member.id, true);\n      }\n    }\n  }, [filteredUsers, selectedMentionIndex, handleUserSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectMention,\n    onTab: handleSelectMention,\n  }) : undefined), [isOpen, onClose, handleArrowKey, handleSelectMention]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  useEffect(() => {\n    setSelectedMentionIndex(0);\n  }, [filter]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers && filteredUsers.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD, EDITABLE_INPUT_MODAL_ID } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  canSuggestEmoji?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  onCaptionUpdate,\n  addRecentEmoji,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files && files.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            filter={mentionFilter}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={isOpen}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT, isDisabled = false,\n) {\n  const isMouseInside = useRef(false);\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV && !isDisabled) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isDisabled, isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  }, [menuCloseTimeout, onClose]);\n\n  return [handleMouseEnter, handleMouseLeave];\n}\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = gif.thumbnail && !!gif.thumbnail.dataUri;\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(hasThumbnail || previewBlobUrl || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {!hasThumbnail && previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"thumbnail\"\n        />\n      )}\n      {(shouldRenderVideo || previewBlobUrl) && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_FOR_QUICK_UPLOAD).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"KeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\nconst NO_EMOJI_SELECTED_INDEX = -1;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const [selectedIndex, setSelectedIndex] = useState(NO_EMOJI_SELECTED_INDEX);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [emojis]);\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!emojis.length) {\n      return NO_EMOJI_SELECTED_INDEX;\n    }\n\n    const emojisCount = emojis.length;\n    return cycleRestrict(emojisCount, newIndex);\n  }, [emojis]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedIndex, getSelectedIndex]);\n\n  const handleSelectEmoji = useCallback((e: KeyboardEvent) => {\n    if (emojis.length && selectedIndex > NO_EMOJI_SELECTED_INDEX) {\n      const emoji = emojis[selectedIndex];\n      if (emoji) {\n        e.preventDefault();\n        onEmojiSelect(emoji.native);\n        addRecentEmoji({ emoji: emoji.id });\n      }\n    }\n  }, [addRecentEmoji, emojis, onEmojiSelect, selectedIndex]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onLeft: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectEmoji,\n  }) : undefined), [handleArrowKey, handleSelectEmoji, isOpen, onClose]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../../hooks/useTransitionForMedia';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(mediaBlobUrl, 'slow');\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        {shouldRenderThumb && (\n          <img src={(photo && photo.thumbnail && photo.thumbnail.dataUri) || thumbnailDataUrl} alt=\"\" />\n        )}\n        {shouldRenderFullMedia && (\n          <img src={mediaBlobUrl} className={`${transitionClassNames} full-media`} alt=\"\" />\n        )}\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={shouldRenderFullMedia ? mediaBlobUrl : (thumbnail && thumbnail.dataUri) || thumbnailDataUrl}\n      transitionClassNames={shouldRenderFullMedia ? transitionClassNames : undefined}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: number;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('sendBotCommand' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  sendBotCommand,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  useEffect(() => {\n    setSelectedIndex(isGallery ? -1 : 0);\n  }, [inlineBotResults, isGallery]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!inlineBotResults || !inlineBotResults.length) {\n      return -1;\n    }\n\n    return cycleRestrict(inlineBotResults.length, newIndex);\n  }, [inlineBotResults]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    if (isGallery) {\n      return;\n    }\n\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [isGallery, getSelectedIndex]);\n\n  const handleSelectInlineBotResult = useCallback((e: KeyboardEvent) => {\n    if (inlineBotResults && inlineBotResults.length && selectedIndex > -1) {\n      const inlineResult = inlineBotResults[selectedIndex];\n      if (inlineResult) {\n        e.preventDefault();\n        onSelectResult(inlineResult);\n      }\n    }\n  }, [inlineBotResults, onSelectResult, selectedIndex]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectInlineBotResult,\n  }) : undefined), [handleArrowKey, handleSelectInlineBotResult, isGallery, isOpen, onClose]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    sendBotCommand({ chatId: botId, command: `/start ${switchPm!.startParam}` });\n  }, [botId, openChat, sendBotCommand, switchPm]);\n\n  if (!shouldRender || !inlineBotResults || (!inlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return inlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={inlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendBotCommand', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults && foundResults[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline ripple onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion}>\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            ripple\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem icon=\"delete-user\" multiline ripple narrow onClick={handleRemovedUsersClick}>\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            ripple\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              ripple\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" ripple multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion} disabled={!canChangeInfo}>\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickSubscribers}>\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = (\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic)\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem icon=\"recent\" multiline ripple onClick={handleRecentActionsClick}>\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const CURRENCIES: Record<string, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  RUB: '₽',\n  UAH: '₴',\n  INR: '₹',\n  AED: 'د.إ',\n};\n\nexport function getCurrencySign(currency: string | undefined): string {\n  if (!currency) {\n    return '';\n  }\n  return CURRENCIES[currency] || '';\n}\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types/index';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: `${currency} ${String(amount / 100)}`,\n    value,\n  }))), [shippingOptions, currency]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { Price } from '../../types';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    description?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const { photoUrl, title, text } = (invoiceContent || {});\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        { photoUrl && (\n          <img src={photoUrl} alt=\"\" />\n        )}\n        <div className=\"text\">\n          <h5>{ title }</h5>\n          <p>{ text }</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem('Total', totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(title: string, value: number, currency?: string, main = false) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        { `${currency || ''} ${(value / 100).toFixed(2)}` }\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","export default __webpack_public_path__ + \"mastercard.4216118edafe23cc2dec7b8807ba4622.svg\";","export default __webpack_public_path__ + \"visa.e5a7c336e1deb4b92a636e2e053878c4.svg\";","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport { getShippingErrors } from '../../modules/helpers/payments';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  globalDialogs?: (ApiError | ApiInviteInfo)[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  globalDialogs,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const currencySign = getCurrencySign(currency);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error || globalDialogs) {\n      setIsLoading(false);\n    }\n  }, [step, error, globalDialogs]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.fieldError,\n        },\n      });\n      return;\n    }\n    if (globalDialogs && globalDialogs.length) {\n      const errors = getShippingErrors(globalDialogs);\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          ...errors,\n        },\n      });\n    }\n  }, [error, globalDialogs, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(cuurentStep: PaymentStep) {\n    switch (cuurentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currencySign}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', `${currencySign}${(totalPrice / 100).toFixed(2)}`);\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currencySign, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      globalDialogs: global.dialogs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types/payments';\n\nimport useLang from '../../hooks/useLang';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const currencySign = getCurrencySign(currency);\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}