{"version":3,"file":"3779.ae9eee6e693d458b2834.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    video.addEventListener('enterpictureinpicture', onEnter);\n    video.addEventListener('leavepictureinpicture', onLeave);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnter);\n      video.removeEventListener('leavepictureinpicture', onLeave);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  zoomLevelChange,\n  setZoomLevelChange,\n  onForward,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName('playback-rate-menu', !isFullscreenSupported && 'no-fullscreen')}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  isProtected,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlaying);\n\n  const handleEnterFullscreen = useCallback(() => setMediaViewerHidden(true), [setMediaViewerHidden]);\n  const handleLeaveFullscreen = useCallback(() => setMediaViewerHidden(false), [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            volume={0}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMouseDown && scale > 1 && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) return;\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [handleClose, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={avatarOwner.id}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n          isAvatar={Boolean(avatarOwner)}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { shouldSkipHistoryAnimations } = global;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen, resetSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={searchRef}\n        value={search}\n        onChange={handleSearchChange}\n        onKeyDown={handleKeyDown}\n        placeholder={searchPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatId({ id: recipientId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatId, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (global.forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    openChatWithDraft({ chatId: recipientId, text: requestedDraft!.text });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { botId, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ botId: botId!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [botId, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { cancelAttachBotInstall, confirmAttachBotInstall } = getActions();\n\n  const lang = useLang();\n\n  const name = useCurrentOrPrev(bot?.firstName, true);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      confirmHandler={confirmAttachBotInstall}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, isActivated, canPlay,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated && canPlay}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<OwnProps & StateProps> = ({\n  availableReactions, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused || !isActive ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  unique_reactions: 'PremiumPreviewReactions',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  unique_reactions: 'PremiumPreviewReactionsDescription',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'unique_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'unique_reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.unique_reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.unique_reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  unique_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {discount && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                    <FullNameTitle peer={user} withEmojiStatus />\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectTgsUrl = useMedia(`sticker${effectAnimationId}`, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? TME_LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  maxBioLength,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"web\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n        >\n          {lang('PrivacySettings.WebSessions')}\n          <span className=\"settings-item__current-value\">{webAuthCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          size={size}\n          tgsUrl={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <OptimizedVideo canPlay src={mediaData} className={transitionClassNames} loop disablePictureInPicture />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCoverAnimated from '../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  const preview = useMemo(() => {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }, [firstSticker, lang.isRtl, observeIntersection, stickerSet]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {preview}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  onReset,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <div ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'unique_reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !renderingStickerSet?.installedDate && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      renderingStickerSet.installedDate ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {renderingStickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={renderingStickerSet.installedDate ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot, selectIsPremiumPurchaseBlocked,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  captionLimit: number;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  isCurrentUserPremium,\n}) => {\n  const { clearRecentStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isExpanded, expand] = useFlag(!stickerSet.isEmoji);\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isEmoji = stickerSet.isEmoji;\n\n  const handleClearRecent = useCallback(() => {\n    clearRecentStickers();\n    closeConfirmModal();\n  }, [clearRecentStickers, closeConfirmModal]);\n\n  const isLocked = !isSavedMessages && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some((l) => !l.isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const shouldCutSet = isEmoji && !isExpanded && !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const itemsBeforeCutout = shouldCutSet ? stickersPerRow * 3 : Infinity;\n  const height = Math.ceil((\n    !shouldCutSet ? stickerSet.count : Math.min(itemsBeforeCutout, stickerSet.count))\n    / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, !isExpanded ? (itemsBeforeCutout - 1) : stickerSet.stickers.length)\n          .map((sticker) => (\n            <StickerButton\n              key={sticker.id}\n              sticker={sticker}\n              size={itemSize}\n              observeIntersection={observeIntersection}\n              noAnimate={!loadAndPlay}\n              onClick={onStickerSelect}\n              clickArg={sticker}\n              onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n                ? onStickerUnfave : undefined}\n              onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n              onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              isSavedMessages={isSavedMessages}\n              canViewSet\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          ))}\n        {!isExpanded && stickerSet.count > itemsBeforeCutout - 1 && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout + 1}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification, openPremiumModal } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: () => openPremiumModal(),\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n  maxPublicLinks,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  currentUserId,\n  canDeleteMembers,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      serverTimeOffset: global.serverTimeOffset,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `${TME_LINK_PREFIX}${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n  serverTimeOffset,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"checkout-info-item\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkoutInfoItem\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkout-info-item-icon\":\"YqZr6__8x50n06_r2wD8\",\"checkoutInfoItemIcon\":\"YqZr6__8x50n06_r2wD8\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiWebDocument } from '../../api/types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photo?: ApiWebDocument;\n    isRecurring?: boolean;\n    recurringTermsUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  onAcceptTos?: (isAccepted: boolean) => void;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  onAcceptTos,\n}) => {\n  const lang = useLang();\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl,\n  } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className={styles.checkoutInfoItem}>\n      <i className={buildClassName(icon, styles.checkoutInfoItemIcon)}> </i>\n      <div className={styles.checkoutInfoItemInfo}>\n        <div className={styles.checkoutInfoItemInfoTitle}>\n          {title}\n        </div>\n        <p className={styles.checkoutInfoItemInfoData}>\n          {data}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            tabIndex={0}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const { closePaymentModal, openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closePaymentModal();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [closePaymentModal, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry } from '../../api/types';\nimport type { ShippingOption, Price } from '../../types';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        validateRequest();\n        break;\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.PaymentInfo);\n        break;\n      case PaymentStep.PaymentInfo:\n        sendCredentials();\n        break;\n      case PaymentStep.Checkout:\n        sendForm();\n        break;\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n  }, [paymentDispatch]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  const isSubmitDisabled = isLoading\n    || Boolean(step === PaymentStep.Checkout && invoiceContent?.isRecurring && !isTosAccepted);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoiceContent?.isRecurring && 'recurring')}\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photo,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isAvatar","canReport","onReport","onCloseMediaViewer","zoomLevelChange","setZoomLevelChange","onForward","downloadMessageMedia","cancelMessageMediaDownload","getActions","downloadProgress","handleDownloadClick","useCallback","handleZoomOut","handleZoomIn","lang","useLang","MenuButton","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","handleEnterFullscreen","handleLeaveFullscreen","enterPictureInPicture","onEnter","onLeave","isSupported","setIsSupported","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","chatId","threadId","avatarOwnerId","mediaViewer","selectChatMessage","senderId","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","type","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","settings","byKey","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","chat","renderText","formatMediaDateTime","date","shouldSkipHistoryAnimations","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","messageIds","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","ShowTransition","noCloseTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","searchRef","resetSearch","useInputFocusOnOpen","handleSearchChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatId","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","botId","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","cancelAttachBotInstall","confirmAttachBotInstall","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","AnimatedCircleReaction","realIndex","isActivated","reaction","maxLength","handleClick","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","double_limits","unique_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","botUrl","handlePremiumClick","getUserFirstOrLastName","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","ReactionStaticEmoji","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","children","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","userOrChat","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","selectedReaction","defaultReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","firstSticker","handleCardClick","preview","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","values","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isEmoji","isButtonLocked","installedDate","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","expand","handleClearRecent","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","shouldCutSet","itemsBeforeCutout","Infinity","favoriteStickerIdsSet","isRecent","noAnimate","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","canViewSet","stickerSetIntersections","favorite","premiumSet","recentStickers","premiumStickers","shouldPlay","loadRecentStickers","addRecentSticker","removeRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","pickTruthy","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","PREMIUM_STICKER_SET_ID","fullSet","CHAT_STICKER_SET_ID","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleAddClick","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","isRecurring","recurringTermsUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","forceAspectRatio","langStringSplit","renderTosLink","endsWith","formatCardExpiry","teactExperimentControlled","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","closePaymentModal","SUPPORTED_PROVIDERS","step","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","general","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","setIsTosAccepted","canRenderFooter","PaymentStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","handleModalClose","isSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}