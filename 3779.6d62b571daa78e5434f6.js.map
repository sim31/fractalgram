{"version":3,"file":"3779.6d62b571daa78e5434f6.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    video.addEventListener('enterpictureinpicture', onEnter);\n    video.addEventListener('leavepictureinpicture', onLeave);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnter);\n      video.removeEventListener('leavepictureinpicture', onLeave);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport {\n  selectIsDownloading, selectIsMessageProtected, selectAllowedMessageActions, selectCurrentMessageList,\n} from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  canDelete?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  zoomLevelChange,\n  setZoomLevelChange,\n  canDelete,\n  onForward,\n  messageListType,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    const menuItems: MenuItemProps[] = [];\n    if (!isAvatar && !isProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {message && canDelete && (\n          <DeleteMessageModal\n            isOpen={isDeleteModalOpen}\n            isSchedule={messageListType === 'scheduled'}\n            onClose={closeDeleteModal}\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {message && canDelete && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={message}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const { canDelete } = (threadId && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      canDelete,\n      messageListType,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport {\n  IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV, IS_YA_BROWSER,\n} from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(true);\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden(false);\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) return;\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [handleClose, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={avatarOwner.id}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n          isAvatar={Boolean(avatarOwner)}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { shouldSkipHistoryAnimations } = global;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen, resetSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={searchRef}\n        value={search}\n        onChange={handleSearchChange}\n        onKeyDown={handleKeyDown}\n        placeholder={searchPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatId({ id: recipientId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatId, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (global.forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    openChatWithDraft({ chatId: recipientId, text: requestedDraft!.text });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { botId, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ botId: botId!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [botId, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { cancelAttachBotInstall, confirmAttachBotInstall } = getActions();\n\n  const lang = useLang();\n\n  const name = useCurrentOrPrev(bot?.firstName, true);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      confirmHandler={confirmAttachBotInstall}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, isActivated, canPlay,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated && canPlay}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<OwnProps & StateProps> = ({\n  availableReactions, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused || !isActive ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  unique_reactions: 'PremiumPreviewReactions',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  unique_reactions: 'PremiumPreviewReactionsDescription',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'unique_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'unique_reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.unique_reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.unique_reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  unique_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {discount && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                    <FullNameTitle peer={user} withEmojiStatus />\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^[^\\d]([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  checkedUsername,\n  isUsernameAvailable,\n  maxBioLength,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable, checkedUsername } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"web\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n        >\n          {lang('PrivacySettings.WebSessions')}\n          <span className=\"settings-item__current-value\">{webAuthCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia((hasThumbnail || isLottie) && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const isReady = mediaData && (!isVideo || IS_WEBM_SUPPORTED);\n  const transitionClassNames = useMediaTransition(isReady);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={isIntersecting && !noAnimate}\n          />\n        ) : isVideo ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'unique_reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !renderingStickerSet?.installedDate && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      renderingStickerSet.installedDate ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {renderingStickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={renderingStickerSet.installedDate ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot, selectIsPremiumPurchaseBlocked,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember, ApiSticker } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji } = getActions();\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const { isCustomEmojiTooltipOpen, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji) && isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    caption,\n    onCaptionUpdate,\n    customEmojiForEmoji,\n    !isReady,\n  );\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isCustomEmojiPicker?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n  isCustomEmojiPicker,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isExpanded, expand] = useFlag(!stickerSet.isEmoji);\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some((l) => !l.isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const shouldCutSet = isEmoji && !isExpanded && !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const itemsBeforeCutout = shouldCutSet ? stickersPerRow * 3 : Infinity;\n  const height = Math.ceil((\n    !shouldCutSet ? stickerSet.count : Math.min(itemsBeforeCutout, stickerSet.count))\n    / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${isCustomEmojiPicker ? 'custom-emoji-set' : 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n        {!isRecent && isEmoji && !stickerSet.installedDate && (\n          <Button\n            className=\"symbol-set-add-button\"\n            withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n            onClick={handleAddClick}\n            pill\n            size=\"tiny\"\n            fluid\n          >\n            {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n          </Button>\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, !isExpanded ? (itemsBeforeCutout - 1) : stickerSet.stickers.length)\n          .map((sticker) => (\n            <StickerButton\n              key={sticker.id}\n              sticker={sticker}\n              size={itemSize}\n              observeIntersection={observeIntersection}\n              noAnimate={!loadAndPlay}\n              isSavedMessages={isSavedMessages}\n              canViewSet\n              isCurrentUserPremium={isCurrentUserPremium}\n              onClick={onStickerSelect}\n              clickArg={sticker}\n              onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n                ? onStickerUnfave : undefined}\n              onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n              onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n            />\n          ))}\n        {!isExpanded && stickerSet.count > itemsBeforeCutout && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout + 1}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className: string;\n  loadAndPlay: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  recentCustomEmoji: ApiSticker[];\n  featuredCustomEmojiIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  recentCustomEmoji,\n  stickerSetsById,\n  featuredCustomEmojiIds,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('custom-emoji-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('custom-emoji-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (recentCustomEmoji.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmoji,\n        count: recentCustomEmoji.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedCustomEmojiIds));\n\n    const filteredFeaturedIds = featuredCustomEmojiIds?.filter((id) => !addedCustomEmojiIds.includes(id)) || [];\n    const featuredSetIds = Object.values(pickTruthy(stickerSetsById, filteredFeaturedIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n      ...featuredSetIds,\n    ];\n  }, [addedCustomEmojiIds, featuredCustomEmojiIds, lang, recentCustomEmoji, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`custom-emoji-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isCustomEmojiPicker\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    const recentCustomEmoji = Object.values(pickTruthy(global.customEmojis.byId, global.recentCustomEmojis));\n\n    return {\n      stickerSetsById: setsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      recentCustomEmoji,\n      featuredCustomEmojiIds: global.customEmojis.featuredIds,\n    };\n  },\n)(CustomEmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n  addRecentCustomEmoji,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef.current);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (\n    isOpen ? captureEscKeyListener(clearCustomEmojiForEmoji) : undefined\n  ), [isOpen, clearCustomEmojiForEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withSharedAnimation shouldPreloadPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification, openPremiumModal } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: () => openPremiumModal(),\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  currentUserId,\n  canDeleteMembers,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      serverTimeOffset: global.serverTimeOffset,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `${TME_LINK_PREFIX}${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n  serverTimeOffset,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const { closePaymentModal, openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closePaymentModal();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [closePaymentModal, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    error: global.payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: global.payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  const isSubmitDisabled = isLoading\n    || Boolean(step === PaymentStep.Checkout && invoice?.isRecurring && !isTosAccepted);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={closeModal}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","canDelete","messageListType","type","isAvatar","canReport","onReport","onCloseMediaViewer","zoomLevelChange","setZoomLevelChange","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","downloadMessageMedia","cancelMessageMediaDownload","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","MenuButton","onTrigger","round","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","menuItems","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","onLeave","isSupported","setIsSupported","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","avatarOwnerId","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","settings","byKey","sender","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","ShowTransition","noCloseTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","searchRef","resetSearch","useInputFocusOnOpen","handleSearchChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatId","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","botId","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","cancelAttachBotInstall","confirmAttachBotInstall","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","AnimatedCircleReaction","realIndex","isActivated","reaction","maxLength","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","double_limits","unique_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","ReactionStaticEmoji","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","userOrChat","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","selectedReaction","defaultReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","stickerSet","STICKER_SIZE_PICKER_HEADER","noAnimate","hasThumbnail","isLottie","isVideos","isIntersecting","useIsIntersecting","isReady","IS_WEBM_SUPPORTED","getFirstLetters","firstSticker","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","renderPreview","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","values","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","mediaHash","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isEmoji","isButtonLocked","installedDate","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","customEmojiForEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","addRecentCustomEmoji","addRecentEmoji","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isCustomEmojiTooltipOpen","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","closeEmojiTooltip","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","onCustomEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","isCustomEmojiPicker","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","isConfirmModalOpen","openConfirmModal","closeConfirmModal","expand","isRecent","isPremiumSet","handleClearRecent","handleAddClick","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","shouldCutSet","itemsBeforeCutout","Infinity","favoriteStickerIdsSet","canViewSet","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","stickerSetIntersections","recentCustomEmoji","pickTruthy","recentCustomEmojis","addedCustomEmojiIds","canAnimate","featuredCustomEmojiIds","featuredIds","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","filteredFeaturedIds","featuredSetIds","noPopulatedSets","stickerSetEl","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","loadFeaturedEmojiStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","withSharedAnimation","shouldPreloadPreview","listEmojis","usePrevDuringAnimation","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","closePaymentModal","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","isSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}