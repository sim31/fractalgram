{"version":3,"file":"524.02be87f89576388b5afc.js","mappings":"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","sources":["webpack://telegram-t/./src/config.ts","webpack://telegram-t/./src/util/schedulers.ts","webpack://telegram-t/./src/serviceWorker/progressive.ts","webpack://telegram-t/./src/serviceWorker/pushNotification.ts","webpack://telegram-t/./src/serviceWorker.ts","webpack://telegram-t/./src/serviceWorker/assetCache.ts","webpack://telegram-t/./src/util/generateIdFor.ts"],"sourcesContent":["export const PAGE_TITLE = 'Telegram';\nexport const INACTIVE_MARKER = ' [Inactive]';\n\nexport const APP_NAME = process.env.APP_NAME || 'Telegram WebZ';\nexport const APP_VERSION = process.env.APP_VERSION || 'dev';\n\nexport const DEBUG = (\n  process.env.APP_ENV !== 'production' && process.env.APP_ENV !== 'perf' && process.env.APP_ENV !== 'test'\n);\nexport const DEBUG_MORE = false;\n\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const SESSION_USER_KEY = 'user_auth';\nexport const LEGACY_SESSION_KEY = 'GramJs:sessionId';\n\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\nexport const GLOBAL_STATE_CACHE_KEY = 'tt-global-state';\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 30;\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 5000;\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs-v5';\nexport const ASSET_CACHE_NAME = 'tt-assets';\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SENSITIVE_AREA = 750;\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const CHAT_HEIGHT_PX = 72;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_PHOTOS_LIMIT = 40;\nexport const PROFILE_SENSITIVE_AREA = 500;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\nexport const ALL_CHATS_PRELOAD_DISABLED = false;\n\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\nexport const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;\nexport const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\n\n// Screen width where Pinned Message / Audio Player in the Middle Header can be safely displayed\nexport const SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1440; // px\n// Screen width where Pinned Message / Audio Player in the Middle Header shouldn't collapse with ChatInfo\nexport const SAFE_SCREEN_WIDTH_FOR_CHAT_INFO = 1150; // px\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const LOCAL_MESSAGE_ID_BASE = 1e9;\n\nexport const ANIMATION_END_DELAY = 100;\n\nexport const FAST_SMOOTH_MAX_DISTANCE = 1500;\nexport const FAST_SMOOTH_MIN_DURATION = 250;\nexport const FAST_SMOOTH_MAX_DURATION = 600;\nexport const FAST_SMOOTH_SHORT_TRANSITION_MAX_DISTANCE = 500; // px\n\n// Average duration of message sending animation\nexport const API_UPDATE_THROTTLE = Math.round((FAST_SMOOTH_MIN_DURATION + FAST_SMOOTH_MAX_DURATION) / 2);\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory',\n]);\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 64;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 48;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_SIZE_SEARCH = 64;\nexport const STICKER_SIZE_MODAL = 64;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 80;\nexport const STICKER_SIZE_INLINE_BOT_RESULT = 100;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const MEMOJI_STICKER_ID = 'MEMOJI_STICKER';\n\nexport const BASE_EMOJI_KEYWORD_LANG = 'en';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\n\nexport const CONTENT_TYPES_FOR_QUICK_UPLOAD = new Set([\n  'image/png', 'image/gif', 'image/jpeg', 'video/mp4', 'video/avi', 'video/quicktime',\n]);\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,63})\\\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)';\nexport const RE_MENTION_TEMPLATE = '(@[\\\\w\\\\d_-]+)';\nexport const RE_TME_LINK = /^(?:https?:\\/\\/)?(?:t\\.me\\/)([\\d\\w_]+)(?:\\/([\\d]+))?(?:\\/([\\d]+))?$/gm;\nexport const RE_TME_INVITE_LINK = /^(?:https?:\\/\\/)?(?:t\\.me\\/joinchat\\/)([\\d\\w_-]+)?$/gm;\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = 777000;\nexport const REPLIES_USER_ID = 1271266957;\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const DELETED_COMMENTS_CHANNEL_ID = 777;\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const DEFAULT_LANG_CODE = 'en';\nexport const DEFAULT_LANG_PACK = 'android';\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'] as const;\nexport const TIPS_USERNAME = 'TelegramTips';\nexport const LOCALIZED_TIPS = ['ar', 'pt-br', 'id', 'it', 'ko', 'ms', 'pl', 'es', 'tr'];\nexport const FEEDBACK_URL = 'https://bugs.telegram.org/?tag_ids=41&sort=time';\nexport const LIGHT_THEME_BG_COLOR = '#A2AF8E';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DARK_THEME_PATTERN_COLOR = '#0a0a0a8c';\nexport const DEFAULT_PATTERN_COLOR = 'rgba(90, 110, 70, 0.6)';\n","type Scheduler =\n  typeof requestAnimationFrame\n  | typeof onTickEnd\n  | typeof runNow;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      // @ts-ignore\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        // @ts-ignore\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRaf, fn);\n}\n\nexport function throttleWithPrimaryRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastPrimaryRaf, fn);\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWithNow<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(runNow, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        // @ts-ignore\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function onTickEnd(cb: NoneToVoidFunction) {\n  Promise.resolve().then(cb);\n}\n\nexport function onIdle(cb: NoneToVoidFunction) {\n  // eslint-disable-next-line no-restricted-globals\n  if (self.requestIdleCallback) {\n    // eslint-disable-next-line no-restricted-globals\n    self.requestIdleCallback(cb);\n  } else {\n    onTickEnd(cb);\n  }\n}\n\nfunction runNow(fn: NoneToVoidFunction) {\n  fn();\n}\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise<void>((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\nlet fastRafPrimaryCallbacks: NoneToVoidFunction[] | undefined;\n\n// May result in an immediate execution if called from another `requestAnimationFrame` callback\nexport function fastRaf(callback: NoneToVoidFunction, isPrimary = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = isPrimary ? [] : [callback];\n    fastRafPrimaryCallbacks = isPrimary ? [callback] : [];\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n      const currentPrimaryCallbacks = fastRafPrimaryCallbacks!;\n      fastRafCallbacks = undefined;\n      fastRafPrimaryCallbacks = undefined;\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    fastRafPrimaryCallbacks!.push(callback);\n  } else {\n    fastRafCallbacks.push(callback);\n  }\n}\n\nexport function fastPrimaryRaf(callback: NoneToVoidFunction) {\n  fastRaf(callback, true);\n}\n\nlet beforeUnloadCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onBeforeUnload(callback: NoneToVoidFunction, isLast = false) {\n  if (!beforeUnloadCallbacks) {\n    beforeUnloadCallbacks = [];\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('beforeunload', () => {\n      beforeUnloadCallbacks!.forEach((cb) => cb());\n    });\n  }\n\n  if (isLast) {\n    beforeUnloadCallbacks.push(callback);\n  } else {\n    beforeUnloadCallbacks.unshift(callback);\n  }\n\n  return () => {\n    beforeUnloadCallbacks = beforeUnloadCallbacks!.filter((cb) => cb !== callback);\n  };\n}\n","import { pause } from '../util/schedulers';\nimport generateIdFor from '../util/generateIdFor';\nimport {\n  DEBUG,\n  MEDIA_CACHE_MAX_BYTES,\n  MEDIA_PROGRESSIVE_CACHE_DISABLED,\n  MEDIA_PROGRESSIVE_CACHE_NAME,\n} from '../config';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\ntype PartInfo = {\n  type: 'PartInfo';\n  arrayBuffer: ArrayBuffer;\n  mimeType: 'string';\n  fullSize: number;\n};\n\ntype RequestStates = {\n  resolve: (response: PartInfo) => void;\n  reject: () => void;\n};\n\nconst MB = 1024 * 1024;\nconst DEFAULT_PART_SIZE = 0.5 * MB;\nconst MAX_END_TO_CACHE = 2 * MB - 1; // We only cache the first 2 MB of each file\nconst PART_TIMEOUT = 60000;\n\nconst requestStates = new Map<string, RequestStates>();\n\nexport async function respondForProgressive(e: FetchEvent) {\n  const { url } = e.request;\n  const range = e.request.headers.get('range');\n  const bytes = /^bytes=(\\d+)-(\\d+)?$/g.exec(range || '')!;\n  const start = Number(bytes[1]);\n  const originalEnd = Number(bytes[2]);\n\n  let end = originalEnd;\n  if (!end || (end - start + 1) > DEFAULT_PART_SIZE) {\n    end = start + DEFAULT_PART_SIZE - 1;\n  }\n\n  // Optimization for Safari\n  if (start === 0 && end === 1) {\n    const match = e.request.url.match(/fileSize=(\\d+)&mimeType=([\\w/]+)/);\n    const fileSize = match && Number(match[1]);\n    const mimeType = match && match[2];\n\n    if (fileSize && mimeType) {\n      return new Response(new Uint8Array(2).buffer, {\n        status: 206,\n        statusText: 'Partial Content',\n        headers: [\n          ['Content-Range', `bytes 0-1/${fileSize}`],\n          ['Accept-Ranges', 'bytes'],\n          ['Content-Length', '2'],\n          ['Content-Type', mimeType],\n        ],\n      });\n    }\n  }\n\n  const cacheKey = `${url}?start=${start}&end=${end}`;\n  const [cachedArrayBuffer, cachedHeaders] = !MEDIA_PROGRESSIVE_CACHE_DISABLED ? await fetchFromCache(cacheKey) : [];\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log(\n      `FETCH PROGRESSIVE ${cacheKey} (request: ${start}-${originalEnd}) CACHED: ${Boolean(cachedArrayBuffer)}`,\n    );\n  }\n\n  if (cachedArrayBuffer) {\n    return new Response(cachedArrayBuffer, {\n      status: 206,\n      statusText: 'Partial Content',\n      headers: cachedHeaders,\n    });\n  }\n\n  let partInfo;\n  try {\n    partInfo = await requestPart(e, { url, start, end });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('FETCH PROGRESSIVE', err);\n    }\n  }\n\n  if (!partInfo) {\n    return new Response('', {\n      status: 500,\n      statusText: 'Failed to fetch progressive part',\n    });\n  }\n\n  const { arrayBuffer, fullSize, mimeType } = partInfo;\n\n  const partSize = Math.min(end - start + 1, arrayBuffer.byteLength);\n  end = start + partSize - 1;\n  const arrayBufferPart = arrayBuffer.slice(0, partSize);\n  const headers = [\n    ['Content-Range', `bytes ${start}-${end}/${fullSize}`],\n    ['Accept-Ranges', 'bytes'],\n    ['Content-Length', String(partSize)],\n    ['Content-Type', mimeType],\n  ];\n\n  if (!MEDIA_PROGRESSIVE_CACHE_DISABLED && partSize <= MEDIA_CACHE_MAX_BYTES && end < MAX_END_TO_CACHE) {\n    saveToCache(cacheKey, arrayBufferPart, headers);\n  }\n\n  return new Response(arrayBufferPart, {\n    status: 206,\n    statusText: 'Partial Content',\n    headers,\n  });\n}\n\n// We can not cache 206 responses: https://github.com/GoogleChrome/workbox/issues/1644#issuecomment-638741359\nasync function fetchFromCache(cacheKey: string) {\n  const cache = await self.caches.open(MEDIA_PROGRESSIVE_CACHE_NAME);\n\n  return Promise.all([\n    cache.match(`${cacheKey}&type=arrayBuffer`).then((r) => (r ? r.arrayBuffer() : undefined)),\n    cache.match(`${cacheKey}&type=headers`).then((r) => (r ? r.json() : undefined)),\n  ]);\n}\n\nasync function saveToCache(cacheKey: string, arrayBuffer: ArrayBuffer, headers: HeadersInit) {\n  const cache = await self.caches.open(MEDIA_PROGRESSIVE_CACHE_NAME);\n\n  return Promise.all([\n    cache.put(new Request(`${cacheKey}&type=arrayBuffer`), new Response(arrayBuffer)),\n    cache.put(new Request(`${cacheKey}&type=headers`), new Response(JSON.stringify(headers))),\n  ]);\n}\n\nasync function requestPart(\n  e: FetchEvent,\n  params: { url: string; start: number; end: number },\n): Promise<PartInfo | undefined> {\n  if (!e.clientId) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  const client = await self.clients.get(e.clientId);\n  if (!client) {\n    return undefined;\n  }\n\n  const messageId = generateIdFor(requestStates);\n  const requestState = {} as RequestStates;\n\n  const promise = Promise.race([\n    pause(PART_TIMEOUT).then(() => Promise.reject(new Error('ERROR_PART_TIMEOUT'))),\n    new Promise<PartInfo>((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    }),\n  ]);\n\n  requestStates.set(messageId, requestState);\n  promise\n    .catch(() => undefined)\n    .finally(() => {\n      requestStates.delete(messageId);\n    });\n\n  client.postMessage({\n    type: 'requestPart',\n    messageId,\n    params,\n  });\n\n  return promise;\n}\n\nself.addEventListener('message', (e) => {\n  const { type, messageId, result } = e.data as {\n    type: string;\n    messageId: string;\n    result: PartInfo;\n  };\n\n  if (type === 'partResponse') {\n    const requestState = requestStates.get(messageId);\n    if (requestState) {\n      requestState.resolve(result);\n    }\n  }\n});\n","import { APP_NAME, DEBUG } from '../config';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nenum Boolean {\n  True = '1',\n  False = '0',\n}\n\ntype PushData = {\n  custom: {\n    msg_id?: string;\n    channel_id?: string;\n    chat_id?: string;\n    from_id?: string;\n  };\n  mute: Boolean;\n  badge: Boolean;\n  loc_key: string;\n  loc_args: string[];\n  random_id: number;\n  title: string;\n  description: string;\n};\n\ntype NotificationData = {\n  messageId?: number;\n  chatId?: number;\n  title: string;\n  body: string;\n  icon?: string;\n};\n\nlet lastSyncAt = new Date().valueOf();\nconst shownNotifications = new Set();\nconst clickBuffer: Record<string, NotificationData> = {};\n\nfunction getPushData(e: PushEvent | Notification): PushData | undefined {\n  try {\n    return e.data.json();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('[SW] Unable to parse push notification data', e.data);\n    }\n    return undefined;\n  }\n}\n\nfunction getChatId(data: PushData) {\n  if (data.custom.from_id) {\n    return parseInt(data.custom.from_id, 10);\n  }\n  // Chats and channels have negative IDs\n  if (data.custom.chat_id) {\n    return parseInt(data.custom.chat_id, 10) * -1;\n  }\n  if (data.custom.channel_id) {\n    return parseInt(data.custom.channel_id, 10) * -1;\n  }\n  return undefined;\n}\n\nfunction getMessageId(data: PushData) {\n  if (!data.custom.msg_id) return undefined;\n  return parseInt(data.custom.msg_id, 10);\n}\n\nfunction getNotificationData(data: PushData): NotificationData {\n  return {\n    chatId: getChatId(data),\n    messageId: getMessageId(data),\n    title: data.title || APP_NAME,\n    body: data.description,\n  };\n}\n\nasync function playNotificationSound(id: number) {\n  const clients = await self.clients.matchAll({ type: 'window' }) as WindowClient[];\n  const clientsInScope = clients.filter((client) => client.url === self.registration.scope);\n  const client = clientsInScope[0];\n  if (!client) return;\n  if (clientsInScope.length === 0) return;\n  client.postMessage({\n    type: 'playNotificationSound',\n    payload: { id },\n  });\n}\n\nasync function showNotification({\n  chatId,\n  messageId,\n  body,\n  title,\n  icon,\n}: NotificationData) {\n  const tag = String(chatId || 0);\n  const options: NotificationOptions = {\n    body,\n    data: {\n      chatId,\n      messageId,\n      count: 1,\n    },\n    icon: icon || 'icon-192x192.png',\n    badge: 'icon-192x192.png',\n    tag,\n    vibrate: [200, 100, 200],\n  };\n  const notifications = await self.registration.getNotifications({ tag });\n  if (notifications.length > 0) {\n    const current = notifications[0];\n    const count = current.data.count + 1;\n    options.data.count = count;\n    options.data.messageId = current.data.messageId;\n    options.body = `You have ${count} new messages`;\n    current.close();\n  }\n  return Promise.all([\n    playNotificationSound(messageId || chatId || 0),\n    self.registration.showNotification(title, options),\n  ]);\n}\n\nexport function handlePush(e: PushEvent) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('[SW] Push received event', e);\n    if (e.data) {\n      // eslint-disable-next-line no-console\n      console.log('[SW] Push received with data', e.data.json());\n    }\n  }\n\n  const data = getPushData(e);\n\n  // Do not show muted notifications\n  if (!data || data.mute === Boolean.True) return;\n\n  const notification = getNotificationData(data);\n\n  // Dont show already triggered notification\n  if (shownNotifications.has(notification.messageId)) {\n    shownNotifications.delete(notification.messageId);\n    return;\n  }\n\n  e.waitUntil(showNotification(notification));\n}\n\nasync function focusChatMessage(client: WindowClient, data: { chatId?: number; messageId?: number }) {\n  const {\n    chatId,\n    messageId,\n  } = data;\n  if (!chatId) return;\n  client.postMessage({\n    type: 'focusMessage',\n    payload: {\n      chatId,\n      messageId,\n    },\n  });\n  // Catch \"focus not allowed\" DOM Exceptions\n  try {\n    await client.focus();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('[SW] ', error);\n    }\n  }\n}\n\nexport function handleNotificationClick(e: NotificationEvent) {\n  const appUrl = new URL(self.registration.scope).origin;\n  e.notification.close(); // Android needs explicit close.\n  const { data } = e.notification;\n  const notifyClients = async () => {\n    const clients = await self.clients.matchAll({ type: 'window' }) as WindowClient[];\n    const clientsInScope = clients.filter((client) => {\n      return new URL(client.url).origin === appUrl;\n    });\n    await Promise.all(clientsInScope.map((client) => {\n      clickBuffer[client.id] = data;\n      return focusChatMessage(client, data);\n    }));\n    if (!self.clients.openWindow || clientsInScope.length > 0) return undefined;\n    // Store notification data for default client (fix for android)\n    clickBuffer[0] = data;\n    // If there is no opened client we need to open one and wait until it is fully loaded\n    try {\n      const newClient = await self.clients.openWindow(appUrl);\n      if (newClient) {\n        // Store notification data until client is fully loaded\n        clickBuffer[newClient.id] = data;\n      }\n    } catch (error) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn('[SW] ', error);\n      }\n    }\n    return undefined;\n  };\n  e.waitUntil(notifyClients());\n}\n\nexport function handleClientMessage(e: ExtendableMessageEvent) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('[SW] New message from client', e);\n  }\n  if (!e.data) return;\n  const source = e.source as WindowClient;\n  if (e.data.type === 'clientReady') {\n    // focus on chat message when client is fully ready\n    const data = clickBuffer[source.id] || clickBuffer[0];\n    if (data) {\n      delete clickBuffer[source.id];\n      delete clickBuffer[0];\n      e.waitUntil(focusChatMessage(source, data));\n    }\n  }\n  if (e.data.type === 'newMessageNotification') {\n    // Do not show notifications right after sync (when browser is opened)\n    // To avoid stale notifications\n    if (new Date().valueOf() - lastSyncAt < 3000) return;\n\n    // store messageId for already shown notification\n    const notification: NotificationData = e.data.payload;\n    // mark this notification as shown if it was handled locally\n    shownNotifications.add(notification.messageId);\n    e.waitUntil(showNotification(notification));\n  }\n}\n\nself.onsync = () => {\n  lastSyncAt = new Date().valueOf();\n};\n","import { DEBUG } from './config';\nimport { respondForProgressive } from './serviceWorker/progressive';\nimport { respondWithCache, clearAssetCache } from './serviceWorker/assetCache';\nimport { handlePush, handleNotificationClick, handleClientMessage } from './serviceWorker/pushNotification';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nconst ASSET_CACHE_PATTERN = /[0-9a-f]{20}.*\\.(js|css|woff2?|svg|png|jpg|jpeg|json|wasm)$/;\n\nself.addEventListener('install', (e) => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('ServiceWorker installed');\n  }\n\n  // Activate worker immediately\n  e.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', (e) => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('ServiceWorker activated');\n  }\n\n  e.waitUntil(clearAssetCache());\n  // Become available to all pages\n  e.waitUntil(self.clients.claim());\n});\n\n// eslint-disable-next-line no-restricted-globals\nself.addEventListener('fetch', (e: FetchEvent) => {\n  const { url } = e.request;\n\n  if (url.includes('/progressive/')) {\n    e.respondWith(respondForProgressive(e));\n    return true;\n  }\n\n  if (url.startsWith('http') && url.match(ASSET_CACHE_PATTERN)) {\n    e.respondWith(respondWithCache(e));\n    return true;\n  }\n\n  return false;\n});\n\nself.addEventListener('push', handlePush);\nself.addEventListener('notificationclick', handleNotificationClick);\nself.addEventListener('message', handleClientMessage);\n","import { ASSET_CACHE_NAME } from '../config';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport async function respondWithCache(e: FetchEvent) {\n  const cache = await self.caches.open(ASSET_CACHE_NAME);\n  const cached = await cache.match(e.request);\n\n  if (cached) {\n    return cached;\n  }\n\n  const remote = await fetch(e.request);\n  cache.put(e.request, remote.clone());\n\n  return remote;\n}\n\nexport function clearAssetCache() {\n  return self.caches.delete(ASSET_CACHE_NAME);\n}\n","export default (store: AnyLiteral) => {\n  let id;\n\n  do {\n    id = String(Math.random()).replace('0.', 'id');\n  } while (store.hasOwnProperty(id));\n\n  return id;\n};\n"],"names":["MEDIA_PROGRESSIVE_CACHE_NAME","ASSET_CACHE_NAME","window","innerHeight","Math","round","Set","DEFAULT_PART_SIZE","requestStates","Map","Boolean","self","addEventListener","e","type","messageId","result","data","requestState","get","resolve","lastSyncAt","Date","valueOf","shownNotifications","clickBuffer","getChatId","custom","from_id","parseInt","chat_id","channel_id","getMessageId","msg_id","async","playNotificationSound","id","clientsInScope","clients","matchAll","filter","client","url","registration","scope","length","postMessage","payload","showNotification","chatId","body","title","icon","tag","String","options","count","badge","vibrate","notifications","getNotifications","current","close","Promise","all","focusChatMessage","focus","error","onsync","ASSET_CACHE_PATTERN","waitUntil","skipWaiting","caches","delete","claim","request","includes","respondWith","range","headers","bytes","exec","start","Number","end","match","fileSize","mimeType","Response","Uint8Array","buffer","status","statusText","cacheKey","cachedArrayBuffer","cachedHeaders","cache","open","then","r","arrayBuffer","undefined","json","fetchFromCache","partInfo","params","clientId","store","random","replace","hasOwnProperty","generateIdFor","promise","race","ms","setTimeout","reject","Error","Object","assign","set","catch","finally","requestPart","err","fullSize","partSize","min","byteLength","arrayBufferPart","slice","put","Request","JSON","stringify","saveToCache","respondForProgressive","startsWith","cached","remote","fetch","clone","respondWithCache","getPushData","mute","True","notification","process","description","getNotificationData","has","appUrl","URL","origin","map","openWindow","newClient","notifyClients","source","add"],"sourceRoot":""}