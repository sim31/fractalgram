{"version":3,"file":"477.fba5336385f552a13913.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'downloadMessageMedia' | 'cancelMessageMediaDownload'>;\n\nconst MediaViewerActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n}) => {\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloading ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n\n    return {\n      isDownloading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n  ]),\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setIsControlsVisible(false);\n      }\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n    if (!isControlsVisible) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    }\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif && !IS_TOUCH_ENV ? handleMouseOver : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat, selectChatMessage, selectScheduledMessage, selectUser,\n} from '../../modules/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    onClose,\n    onFooterClick,\n    isFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          false,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        false,\n      )}\n      {isVideo && (isActive ? (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen}\n          noPlay={!isActive}\n          onClose={onClose}\n        />\n      ) : renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        false,\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && (!isVideo || isGif)}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return {};\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return {};\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return {};\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return {};\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          // @ts-ignore\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            // @ts-ignore\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useDebounce from '../../hooks/useDebounce';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nconst INITIAL_TRANSFORM = {\n  x: 0,\n  y: 0,\n  scale: 1,\n};\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>(INITIAL_TRANSFORM);\n  const isSwipingRef = useRef(false);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsSwiping = useCallback((value: boolean) => {\n    isSwipingRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsActive = useCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const debounceSetMessage = useDebounce(DEBOUNCE_MESSAGE, false);\n  const debounceSwipe = useDebounce(DEBOUNCE_SWIPE, false);\n  const debounceActive = useDebounce(DEBOUNCE_ACTIVE, false);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif) && hasFooter) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [hasFooter, isFooterHidden, isGif, isPhoto]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { ...transformRef.current };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = { x: 0, y: 0 };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.VideoPlayerControls, .MediaViewerFooter',\n      onCapture: (event) => {\n        // Prevent safari back swipe on mobile\n        if (event.type === 'touchstart'\n          && 'pageX' in event\n          && !(event.pageX > 10 && event.pageX < window.innerWidth - 10)) {\n          event.preventDefault();\n        }\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, INITIAL_TRANSFORM)) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { scale, x, y } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        // If user is swiping horizontally or horizontal shift is dominant\n        // we change only horizontal position\n        if (isSwipingRef.current || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n          isSwipingRef.current = true;\n          isActiveRef.current = false;\n          setTransform({\n            x: dragOffsetX,\n            y: 0,\n            scale,\n          });\n          return;\n        }\n        if (isSwipingRef.current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const { scale, x, y } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const { scale, x, y } = transformRef.current;\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = INITIAL_TRANSFORM;\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = { x, y, scale };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = { x, y, scale };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          debounceSetMessage(() => selectMessage(mId));\n        }\n        debounceSwipe(() => setIsSwiping(false));\n        debounceActive(() => setIsActive(true));\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    setIsSwiping,\n    setIsActive,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && /* @ts-ignore */ (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n          <MediaViewerContent {...rest} messageId={previousMessageId} isFooterHidden={isFooterHidden} />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          /* @ts-ignore */\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActiveRef.current}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && /* @ts-ignore */ (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n          <MediaViewerContent {...rest} messageId={nextMessageId} isFooterHidden={isFooterHidden} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  closeMediaViewer,\n  focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) {\n    // Return dummy container to keep existing DOM structure, needed to preserve ghost animation\n    return (\n      <div className=\"Transition\">\n        <div className=\"Transition__slide--active\">\n          {children(true, true, 1)}\n        </div>\n      </div>\n    );\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\n\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaBlobUrl || previewBlobUrl}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <SlideTransition\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {(isActive: boolean) => (\n                <MediaViewerSlides\n                  messageId={messageId}\n                  getMessageId={getMessageId}\n                  chatId={chatId}\n                  isPhoto={isPhoto}\n                  isGif={isGif}\n                  threadId={threadId}\n                  avatarOwnerId={avatarOwner && avatarOwner.id}\n                  profilePhotoIndex={profilePhotoIndex}\n                  origin={origin}\n                  isOpen={isOpen}\n                  hasFooter={hasFooter}\n                  isZoomed={isZoomed}\n                  isActive={isActive}\n                  animationLevel={animationLevel}\n                  onClose={close}\n                  selectMessage={selectMessage}\n                  onFooterClick={handleFooterClick}\n                />\n              )}\n            </SlideTransition>\n          </PanZoom>\n          {!isFirst && !IS_TOUCH_ENV && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={() => selectMessage(previousMessageId)}\n            />\n          )}\n          {!isLast && !IS_TOUCH_ENV && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={() => selectMessage(nextMessageId)}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../modules/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  onFilterChange: (filter: string) => void;\n  loadMore: NoneToVoidFunction;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  onFilterChange,\n  onClose,\n  loadMore,\n  onSelectChatOrUser,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  useInputFocusOnOpen(filterRef, isOpen, () => { onFilterChange(''); });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat, getChatTitle, sortChatIds } from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  pinnedIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  orderedPinnedIds?: string[];\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={chatIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreChats}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date, lang));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date, lang)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages' | 'downloadSelectedMessages'\n)>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n  downloadSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton('forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages)\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'exitMessageSelectMode', 'openForwardMenuForSelectedMessages', 'downloadSelectedMessages',\n  ]),\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../modules/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'closeSeenByModal'>;\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  memberIds,\n  openChat,\n  closeSeenByModal,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title=\"Which users read the message\"\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['openChat', 'closeSeenByModal']),\n)(SeenByModal));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayVideos: isChecked })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption',\n  ]),\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  allListIds,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  onCreateFolder,\n  onEditFolder,\n  onScreenSelect,\n  onReset,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [lang, allListIds, foldersById, chatsById, usersById, orderedFolderIds, notifySettings, notifyExceptions]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  const firstLetters = useMemo(() => {\n    if (mediaData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      <img src={mediaData} className={transitionClassNames} alt=\"\" />\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers' |\n  'timeFormat'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, false, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n              runDebounced(() => playNotifySound(undefined, volume));\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<string, ApiChat>;\n  usersById?: Record<string, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick, unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery' | 'blockContact'>;\n\nconst BlockUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadContactList,\n  setUserSearchQuery,\n  blockContact,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactsId = useMemo(() => {\n    const availableContactsId = (contactIds || []).concat(localContactIds || []).filter((contactId) => {\n      return !blockedIds.includes(contactId) && contactId !== currentUserId;\n    });\n\n    return unique(availableContactsId).reduce<string[]>((acc, contactId) => {\n      if (\n        !filter\n        || !usersById[contactId]\n        || searchWords(getUserFullName(usersById[contactId]) || '', filter)\n        || usersById[contactId]?.username.toLowerCase().includes(filter)\n      ) {\n        acc.push(contactId);\n      }\n\n      return acc;\n    }, [])\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactsId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadContactList', 'setUserSearchQuery', 'blockContact',\n  ]),\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n  unblockContact,\n}) => {\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isUserId, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n  loadContactList,\n  openChat,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChatFolder } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolders'>;\n\nconst ChatFolderModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n  editChatFolders,\n}) => {\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id));\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id));\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolders']),\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst getTouchY = (e: WheelEvent | TouchEvent) => ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null) {\n  scrollLockEl = el;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onDownload?: () => void;\n  onShowSeenBy?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  isDownloading,\n  canShowSeenBy,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onShowSeenBy,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  useEffect(() => {\n    disableScrolling(withScroll ? menuRef.current : undefined);\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      menuStyle={menuStyle}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canDownload && (\n        <MenuItem icon=\"download\" onClick={onDownload}>\n          {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n        </MenuItem>\n      )}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canShowSeenBy && (\n        <MenuItem icon=\"group\" onClick={onShowSeenBy} disabled={!message.seenByUserIds?.length}>\n          {message.seenByUserIds?.length\n            ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n            : lang('Conversation.ContextMenuNoViews')}\n          <div className=\"avatars\">\n            {seenByRecentUsers?.map((user) => (\n              <Avatar\n                size=\"micro\"\n                user={user}\n              />\n            ))}\n          </div>\n        </MenuItem>\n      )}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n} from '../../../modules/selectors';\nimport { isChatGroup, isOwnMessage } from '../../../modules/helpers';\nimport { SEEN_BY_MEMBERS_EXPIRE, SEEN_BY_MEMBERS_CHAT_MAX } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'downloadMessageMedia' | 'cancelMessageMediaDownload' | 'loadSeenBy' |\n  'openSeenByModal'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  activeDownloads,\n  canShowSeenBy,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  downloadMessageMedia,\n  cancelMessageMediaDownload,\n  loadSeenBy,\n  openSeenByModal,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onDownload={handleDownloadClick}\n        onShowSeenBy={handleOpenSeenByModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const canShowSeenBy = Boolean(chat\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && chat.membersCount\n      && chat.membersCount < SEEN_BY_MEMBERS_CHAT_MAX\n      && message.date > Date.now() / 1000 - SEEN_BY_MEMBERS_EXPIRE);\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload,\n      activeDownloads,\n      canShowSeenBy,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'downloadMessageMedia',\n    'cancelMessageMediaDownload',\n    'loadSeenBy',\n    'openSeenByModal',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot' | 'openLinkedChat' |\n  'joinGroupCall' | 'createGroupCall' | 'addContact' | 'openCallFallbackConfirm'\n)>;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n  joinGroupCall,\n  createGroupCall,\n  openLinkedChat,\n  addContact,\n  openCallFallbackConfirm,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    addContact({ userId: chatId });\n    closeMenu();\n  }, [addContact, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleCall = useCallback(() => {\n    openCallFallbackConfirm();\n    closeMenu();\n  }, [closeMenu, openCallFallbackConfirm]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n    'joinGroupCall',\n    'createGroupCall',\n    'openLinkedChat',\n    'addContact',\n    'openCallFallbackConfirm',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<string, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<string, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../modules/helpers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreMembers' | 'deleteChatMember'>;\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  currentUserId,\n  isOpen,\n  onClose,\n  loadMoreMembers,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMembers = (chat.fullInfo?.members || []).filter((member) => {\n      return !member.isAdmin && !member.isOwner && member.userId !== currentUserId;\n    });\n\n    return availableMembers.reduce<string[]>((acc, member) => {\n      if (\n        !filter\n        || !usersById[member.userId]\n        || searchWords(getUserFullName(usersById[member.userId]) || '', filter)\n      ) {\n        acc.push(member.userId);\n      }\n\n      return acc;\n    }, []);\n  }, [chat.fullInfo?.members, currentUserId, filter, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      currentUserId,\n    } = global;\n\n    return { usersById, currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreMembers', 'deleteChatMember']),\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getHasAdminRight, getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return { chat, usersById, canDeleteMembers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  usersById: Record<string, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.adminRights) || {});\n    setCustomTitle(((selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={!!permissions.manageCall}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  userStatusesById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n// @ts-ignore\nimport CameraFlip from '../../../assets/animatedIcons/CameraFlip.tgs';\n// @ts-ignore\nimport HandFilled from '../../../assets/animatedIcons/HandFilled.tgs';\n// @ts-ignore\nimport HandOutline from '../../../assets/animatedIcons/HandOutline.tgs';\n// @ts-ignore\nimport Speaker from '../../../assets/animatedIcons/Speaker.tgs';\n// @ts-ignore\nimport VoiceAllowTalk from '../../../assets/animatedIcons/VoiceAllowTalk.tgs';\n// @ts-ignore\nimport VoiceMini from '../../../assets/animatedIcons/VoiceMini.tgs';\n// @ts-ignore\nimport VoiceMuted from '../../../assets/animatedIcons/VoiceMuted.tgs';\n// @ts-ignore\nimport VoiceOutlined from '../../../assets/animatedIcons/VoiceOutlined.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n  CameraFlip,\n  HandFilled,\n  HandOutline,\n  Speaker,\n  VoiceAllowTalk,\n  VoiceMini,\n  VoiceMuted,\n  VoiceOutlined,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","setGlobal","actions","pick","mediaData","isVideo","isZoomed","fileName","isAvatar","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","size","color","className","undefined","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","loadedPercent","totalSize","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","isFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","imageSize","canDrag","draggable","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","INITIAL_TRANSFORM","x","y","scale","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","isSwipingRef","isActiveRef","activeMessageId","setActiveMessageId","forceUpdate","useForceUpdate","setIsFooterHidden","setTransform","value","setIsSwiping","setIsActive","debounceSetMessage","useDebounce","debounceSwipe","debounceActive","handleToggleFooterVisibility","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","isNotPassive","excludedClosestSelector","event","type","pageX","innerWidth","arePropsShallowEqual","captureEvent","dragOffsetX","dragOffsetY","absOffsetX","abs","absOffsetY","h","touches","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","animateNumber","from","to","timing","timingFunctions","onUpdate","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","innerHeight","minOffsetY","top","maxOffsetY","bottom","direction","mId","dirX","offset","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","pageY","onMouseUp","onMouseMove","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","handleFocusMessage","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","disabled","step","onChange","Number","target","mediaViewer","settings","byKey","chatMessages","collectionIds","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","renderSenderInfo","useHistoryBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","onFilterChange","loadMore","onSelectChatOrUser","viewportIds","getMore","useInfiniteScroll","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","setFilter","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","handleSelectUser","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","seenByModal","memberIds","seenByUserIds","openChat","closeSeenByModal","handleClick","renderingMemberIds","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","Checkbox","checked","onCheck","isChecked","RangeSlider","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","allListIds","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","play","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","focus","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","stickerSets","installedDate","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","handleChange","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","contactIds","userSearch","setUserSearchQuery","blockContact","filteredContactsId","availableContactsId","concat","contactId","acc","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","onCloseAnimationEnd","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","clientY","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","onkeydown","enableScrolling","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canShowSeenBy","seenByRecentUsers","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onShowSeenBy","menuRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","menuStyle","withScroll","useContextMenuPosition","Menu","selectActiveDownloadIds","noOptions","isScheduled","isOwnMessage","SEEN_BY_MEMBERS_CHAT_MAX","SEEN_BY_MEMBERS_EXPIRE","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","getGlobal","some","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleRescheduleMessage","scheduledAt","handleCopyLink","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","addContact","openCallFallbackConfirm","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleCall","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","option","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","CameraFlip","HandFilled","HandOutline","Speaker","VoiceAllowTalk","VoiceMini","VoiceMuted","VoiceOutlined","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}