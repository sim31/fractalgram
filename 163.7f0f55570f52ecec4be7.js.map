{"version":3,"file":"163.7f0f55570f52ecec4be7.js","mappings":"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","sources":["webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import React, {\n  FC, useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && renderFileSize(bufferedProgress, fileSize)}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className=\"playback-rate-menu\"\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\nimport VideoPlayerControls from './VideoPlayerControls';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (e.target === videoRef.current) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    isFooterHidden,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setIsFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && IS_TOUCH_ENV}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useDebounce from '../../hooks/useDebounce';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD, RealTouchEvent } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\nimport useTimeout from '../../hooks/useTimeout';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_X_THRESHOLD = 40;\nconst CLICK_Y_THRESHOLD = 80;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(true);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsActive = useCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const debounceSetMessage = useDebounce(DEBOUNCE_MESSAGE, true);\n  const debounceSwipeDirection = useDebounce(DEBOUNCE_SWIPE, true);\n  const debounceActive = useDebounce(DEBOUNCE_ACTIVE, true);\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = window.innerHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < CLICK_X_THRESHOLD) return;\n    if (!isFooter && e.pageX > window.innerWidth - CLICK_X_THRESHOLD) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [isFooterHidden]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { x: 0, y: 0, scale: 1 };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (e: MouseEvent) => {\n      if (transformRef.current.scale !== 1) return false;\n      let direction = 0;\n      if (window.innerHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return false;\n      }\n      if (e.pageX < CLICK_X_THRESHOLD) {\n        direction = -1;\n      } else if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) {\n        direction = 1;\n      }\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (window.innerWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        debounceSetMessage(() => selectMessage(mId));\n        debounceActive(() => {\n          setIsActive(true);\n        });\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n      }\n      return direction !== 0;\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.MediaViewerFooter',\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS) {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= window.innerWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            setTransform({\n              x: dragOffsetX,\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onClick(e) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return undefined;\n        }\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        debounceSwipeDirection(() => {\n          swipeDirectionRef.current = undefined;\n        });\n        debounceActive(() => {\n          setIsActive(true);\n        });\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = {\n              x,\n              y,\n              scale,\n            };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          debounceSetMessage(() => selectMessage(mId));\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    setIsActive,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={previousMessageId}\n          />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActive && isActiveRef.current}\n            setIsFooterHidden={setIsFooterHidden}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={nextMessageId}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: React.ReactNode;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { ChildrenFn, TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps & { children: ChildrenFn }> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) return children(true, true, 1);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleZoomIn = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\nimport ReportModal from '../common/ReportModal';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const avatarPhoto = avatarOwner?.photos?.[profilePhotoIndex!];\n  const canReport = !!avatarPhoto && profilePhotoIndex! > 0 && !isChatWithSelf;\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .Spoiler, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          isZoomed={isZoomed}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          onZoomToggle={handleZoomToggle}\n          isAvatar={isAvatar}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <PanZoom\n        noWrap={!canPanZoomWrap}\n        canPan={isZoomed}\n        panDeltaX={panDelta.x}\n        panDeltaY={panDelta.y}\n        zoomLevel={zoomLevel}\n        onPan={handlePan}\n      >\n        <SlideTransition\n          activeKey={selectedMediaMessageIndex}\n          name={slideAnimation}\n        >\n          {(isActive: boolean) => (\n            <MediaViewerSlides\n              messageId={messageId}\n              getMessageId={getMessageId}\n              chatId={chatId}\n              isPhoto={isPhoto}\n              isGif={isGif}\n              threadId={threadId}\n              avatarOwnerId={avatarOwner && avatarOwner.id}\n              profilePhotoIndex={profilePhotoIndex}\n              origin={origin}\n              isOpen={isOpen}\n              hasFooter={hasFooter}\n              isZoomed={isZoomed}\n              isActive={isActive}\n              isVideo={isVideo}\n              animationLevel={animationLevel}\n              onClose={close}\n              selectMessage={selectMessage}\n              onFooterClick={handleFooterClick}\n            />\n          )}\n        </SlideTransition>\n      </PanZoom>\n      {!isFirst && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(previousMessageId)}\n        />\n      )}\n      {!isLast && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(nextMessageId)}\n        />\n      )}\n      <ZoomControls\n        isShown={isZoomed}\n        onChangeZoom={handleZoomValue}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalState } from '../../global/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n  switchBotInline?: GlobalState['switchBotInline'];\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n  switchBotInline,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    openChatWithText,\n    resetSwitchBotInline,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    if (switchBotInline) {\n      const text = `@${switchBotInline.botUsername} ${switchBotInline.query}`;\n      openChatWithText({ chatId: userId, text });\n      resetSwitchBotInline();\n    } else {\n      setForwardChatId({ id: userId });\n    }\n  }, [openChatWithText, resetSwitchBotInline, setForwardChatId, switchBotInline]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n      switchBotInline,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n      switchBotInline,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName), ['emoji', 'simple_markdown'])}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useEffect } from '../../../lib/teact/teact';\nimport { IS_MAC_OS } from '../../../util/environment';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        e.preventDefault();\n        copySelectedMessages();\n      }\n    }\n\n    if (isActive) {\n      document.addEventListener('keydown', handleCopy, false);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copySelectedMessages, isActive]);\n};\n\nexport default useCopySelectedMessages;\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n  } = getActions();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-reaction-filled\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectAnimationData = useMedia(`sticker${effectAnimationId}`, !effectAnimationId, ApiMediaFormat.Lottie);\n\n  const [localEffectAnimationData, setLocalEffectAnimationData] = useState<string | undefined>();\n  useEffect(() => {\n    if (localEffectAnimation) {\n      getAnimationData(localEffectAnimation as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalEffectAnimationData(data);\n      });\n    }\n  }, [localEffectAnimation]);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        id={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        animationData={localEffectAnimationData || effectAnimationData}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(ANIMATED_STICKERS_PATHS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, loadContactList, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FakeIcon from '../../common/FakeIcon';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n            {chat.fakeType && <FakeIcon fakeType={chat.fakeType} />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos, loadAuthorizations } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onScreenSelect,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../global/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(\n    isActive,\n    onReset,\n    onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats,\n  );\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n  } = getActions();\n\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.ActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n)(SettingsActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadContactList,\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  onScreenSelect,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getActions();\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || screen === SettingsScreens.QuickReaction\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    loadContactList,\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    loadContactList,\n    setGlobalSearchQuery,\n  } = getActions();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady, ApiMediaFormat.Lottie);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          id={`select_${reaction.reaction}`}\n          className={cn('animated', [animatedClassNames])}\n          animationData={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onSaveGif,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined, onCopyMessages);\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"reactions\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'reactions' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport buildClassName from '../../../util/buildClassName';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n  } = getActions();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount < seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: !isProtected && canCopy,\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectStickerSetByShortName,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiBotCommand, ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botCommands,\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonimous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonimous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonimous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED\n        ? emoji.native\n        : <img src={`./img-apple-64/${emoji.image}.png`} alt={emoji.native} loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n  onStickerFave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n            onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return { stickers, isSavedMessages };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            clickArg={undefined}\n            onClick={openModal}\n            noContextMenu\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiChannelStatistics, ApiGroupStatistics, StatisticsOverviewItem } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('ChannelStats.Overview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPercentage) {\n                return (\n                  <td>\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td>\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views)}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, {\n  FC, memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  useEffect(() => {\n    if (!isActive) {\n      loadedCharts.current = [];\n    }\n  }, [isActive]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken && {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            },\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n    })();\n  }, [graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return { statistics, dcId, isGroup };\n  },\n)(Statistics));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport {\n  ApiChat, ApiChatBannedRights, ApiExportedInvite, ApiMediaFormat,\n} from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiExportedInvite, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, loadContactList } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadContactList, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      openChat({ id });\n    }\n  }, [noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack(isActive, onClose);\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('Invite').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"inviteDuck\"\n                size={STICKER_SIZE_INVITES}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack(isActive, onClose);\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack(isActive, onClose);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack(isActive, onClose);\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport getAnimationData from '../../common/helpers/animatedAssets';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('JoinRequest').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"section\">\n        <div className=\"section-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"joinRequestDucks\"\n              size={STICKER_SIZE_JOIN_REQUESTS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n        {Boolean(chat?.joinRequests?.length) && (\n          <div className=\"bulk-actions\">\n            <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n            <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n          </div>\n        )}\n      </div>\n      <div className=\"section\">\n        <div className=\"custom-scroll\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName('provider', paymentProvider.toLowerCase()),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('PaymentCardName')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<string>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<string>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import React, {\n  FC, useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["cache","Map","useBlurSync","dataUri","blurredRef","useRef","isChanged","useOnChange","current","undefined","img","Image","src","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","delay","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","Boolean","createGhost","source","origin","ghost","document","createElement","classList","add","draggable","oncontextmenu","stopEvent","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","canReport","onReport","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getActions","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","IS_TOUCH_ENV","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseMove","handleMouseOut","target","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","mediaViewer","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","isFooterHidden","onFooterClick","setIsFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","setTransform","setIsActive","debounceSetMessage","useDebounce","debounceSwipeDirection","debounceActive","handleToggleFooterVisibility","isFooter","innerHeight","pageY","pageX","innerWidth","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","timingFunctions","onUpdate","isNotPassive","excludedClosestSelector","checkIfControlTarget","arePropsShallowEqual","event","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","minOffsetY","top","maxOffsetY","bottom","dirX","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","checkIfInsideSelector","selector","matches","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","onMouseUp","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","handleZoomOut","handleZoomIn","step","type","Number","settings","byKey","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","avatarPhoto","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","useHistoryBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","switchBotInline","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","openChatWithText","resetSwitchBotInline","setFilter","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","botUsername","query","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","handleClose","getUserStatus","label","Checkbox","checked","onCheck","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","handleCopy","IS_MAC_OS","metaKey","ctrlKey","getKeyFromEvent","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","seenByModal","memberIds","seenByUserIds","openChat","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","getUserFullName","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","ANIMATED_STICKERS_PATHS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectAnimationData","localEffectAnimationData","setLocalEffectAnimationData","getAnimationData","then","data","startSize","isReversed","AnimatedSticker","animationData","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","fakeType","FakeIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","sessionCount","activeSessions","currentUser","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","forceShowSelf","ChatExtra","langName","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","currentFirstName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","handleChange","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","noContextMenu","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","handleMessageSendComboChange","newCombo","handleSuggestStickersChange","newValue","handleShouldLoopStickersChange","stickerSets","installedDate","RadioGroup","options","selected","fromSticker","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","context","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","blockedCount","totalCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","country","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","appVersion","ip","sessions","handler","dateActive","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onSaveGif","onShowSeenBy","onShowReactors","onCopyMessages","menuRef","scrollableRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","noReactions","withReactions","markIsReady","unmarkIsReady","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","requestCalendar","calendar","useSchedule","stickerSetAccessHash","isScheduleRequested","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonimous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","stickersPerRow","STICKER_SIZE_PICKER","favoriteStickerIdsSet","noAnimate","onUnfaveClick","has","onFaveClick","stickerSetIntersections","favorite","recentStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","fullClassName","buttonClassName","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","bot","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","statistics","period","formatFullDate","row","cell","field","percentage","change","isChangeNegative","renderOverviewItemValue","views","formatDateTimeToString","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","useInterval","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","allow","sandbox","SUPPORTED_PROVIDERS","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","canRenderFooter","PaymentStep","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","cropperResultOptions","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","handleModalClose","labelClassName","accept"],"sourceRoot":""}